{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/NexT/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/NexT/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/chatpay.png","path":"images/chatpay.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"45dc8c3af1964904a6e112a76a9ceb1a0dd41a73","modified":1501590824000},{"_id":"themes/NexT/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501590825000},{"_id":"themes/NexT/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501590825000},{"_id":"themes/NexT/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501590825000},{"_id":"themes/NexT/.DS_Store","hash":"274a532a0a1feb298f216b395ad9bf54a706bdba","modified":1501590825000},{"_id":"themes/NexT/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1501590825000},{"_id":"themes/NexT/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501590825000},{"_id":"themes/NexT/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1501590825000},{"_id":"themes/NexT/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501590825000},{"_id":"themes/NexT/DefaultRedisClusterCache","hash":"8ec324c934ba75ad8be2b04d8c8ca63ff73f0ef6","modified":1501590825000},{"_id":"themes/NexT/_config.yml","hash":"a38618bb8597118f160fda2f4bd9e3d59fb68f5e","modified":1501590825000},{"_id":"themes/NexT/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1501590825000},{"_id":"themes/NexT/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1501590825000},{"_id":"themes/NexT/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1501590825000},{"_id":"source/_posts/crawler4j-jsoup.md","hash":"1fe625136a3f69fa0bb4c1e2aecd3eb6e10fcad0","modified":1501590824000},{"_id":"source/_posts/dynamicProxy.md","hash":"ca6079eda408514d775c9b5fe3ff73969eeb28ca","modified":1501590824000},{"_id":"source/_posts/elk-mac.md","hash":"ab19622621b497d309495baa8c193ab3a21c53eb","modified":1501590824000},{"_id":"source/_posts/github-io-hexo.md","hash":"5198a99cb4b5c534ee5b337208ad90f184389a29","modified":1501590824000},{"_id":"source/_posts/hbase-use.md","hash":"c656aee9ae098495a4e6fb110e60a64159a27bff","modified":1501590824000},{"_id":"source/_posts/hexo-image.md","hash":"5e52545d04e28934817da6d85bdc2248ec80b5c5","modified":1501590824000},{"_id":"source/_posts/java-generic.md","hash":"a7d2c9fe4686499ce7beaf5b5bf97f851427c49a","modified":1501590824000},{"_id":"source/_posts/log-grep.md","hash":"5ea23e293ad625603806c00ccb360789de74cf3e","modified":1501590824000},{"_id":"source/_posts/redis-export.md","hash":"ad298484b4111969f74f719bfd5c707eaf79cf82","modified":1501590824000},{"_id":"source/_posts/redisAndDB.md","hash":"00eebcece12fb40c874cb78634822e766e259a68","modified":1501590824000},{"_id":"source/_posts/reentrantlock.md","hash":"d98de6a5f7cb15cdac2ddcbd2704d6da3456be27","modified":1501590824000},{"_id":"source/about/index.md","hash":"25bd5268376c93ab1a9d536b1175f37fed435a00","modified":1501590824000},{"_id":"source/categories/index.md","hash":"1916b781b36009420117a8d2f61a8c21d0d43002","modified":1501590824000},{"_id":"source/tags/index.md","hash":"fe05cf8a1afce9d184fee26af6793be06e50b5d4","modified":1501590824000},{"_id":"themes/NexT/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1501590825000},{"_id":"themes/NexT/languages/default.yml","hash":"07a559df8f0d413cceb145a9bb8d6bbf72d93bcf","modified":1501590825000},{"_id":"themes/NexT/languages/en.yml","hash":"07a559df8f0d413cceb145a9bb8d6bbf72d93bcf","modified":1501590825000},{"_id":"themes/NexT/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1501590825000},{"_id":"themes/NexT/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1501590825000},{"_id":"themes/NexT/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1501590825000},{"_id":"themes/NexT/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1501590825000},{"_id":"themes/NexT/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1501590825000},{"_id":"themes/NexT/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1501590825000},{"_id":"themes/NexT/languages/ru.yml","hash":"55a75ca62a4fd55af288523f5f65148441b493ab","modified":1501590825000},{"_id":"themes/NexT/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1501590825000},{"_id":"themes/NexT/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1501590825000},{"_id":"themes/NexT/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1501590825000},{"_id":"themes/NexT/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1501590825000},{"_id":"themes/NexT/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1501590825000},{"_id":"themes/NexT/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1501590825000},{"_id":"themes/NexT/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1501590825000},{"_id":"themes/NexT/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1501590825000},{"_id":"themes/NexT/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1501590825000},{"_id":"themes/NexT/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1501590825000},{"_id":"themes/NexT/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1501590825000},{"_id":"themes/NexT/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1501590825000},{"_id":"themes/NexT/source/.DS_Store","hash":"055d272c1ef0d2aa73776960daf2847c19e3369c","modified":1501590825000},{"_id":"themes/NexT/source/404.html","hash":"10dfddff3baddf064e69c2877f8cb138e3eba7e0","modified":1501590825000},{"_id":"themes/NexT/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501590825000},{"_id":"themes/NexT/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501590826000},{"_id":"themes/NexT/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501590826000},{"_id":"themes/NexT/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501590826000},{"_id":"themes/NexT/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1501590825000},{"_id":"themes/NexT/layout/_macro/post.swig","hash":"0f67383a3501aa5151d18012cce8a3cab1fc3134","modified":1501590825000},{"_id":"themes/NexT/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501590825000},{"_id":"themes/NexT/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501590825000},{"_id":"themes/NexT/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1501590825000},{"_id":"themes/NexT/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1501590825000},{"_id":"themes/NexT/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501590825000},{"_id":"themes/NexT/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501590825000},{"_id":"themes/NexT/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501590825000},{"_id":"themes/NexT/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501590825000},{"_id":"themes/NexT/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1501590825000},{"_id":"themes/NexT/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1501590825000},{"_id":"themes/NexT/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501590825000},{"_id":"themes/NexT/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1501590825000},{"_id":"themes/NexT/source/images/avatar.gif","hash":"c7c263a882344ddcaf7a502bd36287a04fb1eeca","modified":1501590826000},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501590826000},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501590826000},{"_id":"themes/NexT/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501590826000},{"_id":"themes/NexT/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501590826000},{"_id":"themes/NexT/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501590826000},{"_id":"themes/NexT/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501590826000},{"_id":"themes/NexT/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501590826000},{"_id":"themes/NexT/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501590826000},{"_id":"themes/NexT/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501590826000},{"_id":"themes/NexT/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501590826000},{"_id":"themes/NexT/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501590826000},{"_id":"themes/NexT/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501590825000},{"_id":"themes/NexT/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501590825000},{"_id":"themes/NexT/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501590825000},{"_id":"themes/NexT/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501590825000},{"_id":"themes/NexT/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501590825000},{"_id":"themes/NexT/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501590825000},{"_id":"themes/NexT/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501590826000},{"_id":"themes/NexT/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501590825000},{"_id":"themes/NexT/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501590825000},{"_id":"themes/NexT/source/images/chatpay.png","hash":"082be6397f04b3a27baf6e70bbf1cb7ca317693b","modified":1501590826000},{"_id":"themes/NexT/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501590825000},{"_id":"themes/NexT/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501590825000},{"_id":"themes/NexT/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1501590825000},{"_id":"themes/NexT/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1501590825000},{"_id":"themes/NexT/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1501590825000},{"_id":"themes/NexT/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501590825000},{"_id":"themes/NexT/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1501590825000},{"_id":"themes/NexT/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501590826000},{"_id":"themes/NexT/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1501590825000},{"_id":"themes/NexT/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1501590826000},{"_id":"themes/NexT/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1501590826000},{"_id":"themes/NexT/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501590826000},{"_id":"themes/NexT/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1501590826000},{"_id":"themes/NexT/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1501590826000},{"_id":"themes/NexT/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501590826000},{"_id":"themes/NexT/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1501590826000},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501590826000},{"_id":"themes/NexT/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501590826000},{"_id":"source/_posts/elk-mac/kibana.png","hash":"2c85ce34bf07bc0459784df3e62c8ce593dc8abb","modified":1501590824000},{"_id":"themes/NexT/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501590826000},{"_id":"themes/NexT/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501590826000},{"_id":"themes/NexT/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501590826000},{"_id":"themes/NexT/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501590826000},{"_id":"themes/NexT/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501590826000},{"_id":"themes/NexT/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501590826000},{"_id":"themes/NexT/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501590826000},{"_id":"themes/NexT/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501590826000},{"_id":"themes/NexT/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501590826000},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501590826000},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501590826000},{"_id":"themes/NexT/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501590826000},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501590826000},{"_id":"themes/NexT/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501590826000},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501590826000},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501590826000},{"_id":"themes/NexT/source/images/alipay.jpg","hash":"e71e5a3c168a5f5227ed3dd159f5634847a7bfa5","modified":1501590825000},{"_id":"themes/NexT/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501590826000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"9fbffcdfd9b2fa9ae0e813ef01f02dea8d78271c","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1501590825000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501590825000},{"_id":"themes/NexT/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501590826000},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501590826000},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1501590826000},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501590826000},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1501590826000},{"_id":"themes/NexT/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1501590825000},{"_id":"themes/NexT/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1501590825000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501590826000},{"_id":"themes/NexT/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1501590825000},{"_id":"themes/NexT/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1501590825000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501590826000},{"_id":"source/_posts/crawler4j-jsoup/crawler.png","hash":"ce94d56f4d504b3831212edd4e15e6110509e409","modified":1501590824000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501590826000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501590826000},{"_id":"themes/NexT/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501590826000},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501590826000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1501590826000}],"Category":[{"name":"tools","_id":"cj5tkg7mo0004t8dmdspj4hj4"},{"name":"java","_id":"cj5tkg7mw000at8dmgltlfome"},{"name":"分布式","_id":"cj5tkg7n5000ot8dm224uctqr"},{"name":"高并发","_id":"cj5tkg7n8000vt8dmg738tpxg"},{"name":"Java","_id":"cj5tkg7n80011t8dmvriyagix"}],"Data":[],"Page":[{"title":"个人简介","date":"2017-02-13T13:49:11.000Z","type":"about","_content":"\n\n<img src=\"https://mioliver.github.io/images/avatar.gif\" align=\"left\"  alt=\"NutKernel\">\n\n### Oliver  \n- 目前在一家知名互联网公司搞事情；\n- Java后端攻城狮；\n**个人爱好** ：热爱篮球、喜欢登山、跑步、骑行、户外野营  ；\t\n\n### 联系方式\n- Email:tianxingzhe1990@gmail.com\n- QQ：1066114096\n\n\n","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2017-02-13 21:49:11\ntype: \"about\"\n---\n\n\n<img src=\"https://mioliver.github.io/images/avatar.gif\" align=\"left\"  alt=\"NutKernel\">\n\n### Oliver  \n- 目前在一家知名互联网公司搞事情；\n- Java后端攻城狮；\n**个人爱好** ：热爱篮球、喜欢登山、跑步、骑行、户外野营  ；\t\n\n### 联系方式\n- Email:tianxingzhe1990@gmail.com\n- QQ：1066114096\n\n\n","updated":"2017-08-01T12:33:44.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj5tkg7mg0001t8dmegyd5wfh","content":"<p><img src=\"https://mioliver.github.io/images/avatar.gif\" align=\"left\" alt=\"NutKernel\"></p>\n<h3 id=\"Oliver\"><a href=\"#Oliver\" class=\"headerlink\" title=\"Oliver\"></a>Oliver</h3><ul>\n<li>目前在一家知名互联网公司搞事情；</li>\n<li>Java后端攻城狮；<br><strong>个人爱好</strong> ：热爱篮球、喜欢登山、跑步、骑行、户外野营  ；    </li>\n</ul>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><ul>\n<li>Email:tianxingzhe1990@gmail.com</li>\n<li>QQ：1066114096</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://mioliver.github.io/images/avatar.gif\" align=\"left\"  alt=\"NutKernel\"></p>\n<h3 id=\"Oliver\"><a href=\"#Oliver\" class=\"headerlink\" title=\"Oliver\"></a>Oliver</h3><ul>\n<li>目前在一家知名互联网公司搞事情；</li>\n<li>Java后端攻城狮；<br><strong>个人爱好</strong> ：热爱篮球、喜欢登山、跑步、骑行、户外野营  ；    </li>\n</ul>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><ul>\n<li>Email:tianxingzhe1990@gmail.com</li>\n<li>QQ：1066114096</li>\n</ul>\n"},{"title":"文章分类","date":"2017-02-13T13:13:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2017-02-13 21:13:37\ntype: \"categories\"\n---\n","updated":"2017-08-01T12:33:44.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj5tkg7mm0003t8dmuq96oxuo","content":"","excerpt":"","more":""},{"title":"我的标签","date":"2017-02-13T13:09:48.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 我的标签\ndate: 2017-02-13 21:09:48\ntype: \"tags\"\n---\n","updated":"2017-08-01T12:33:44.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj5tkg7mr0007t8dmjemyul02","content":"","excerpt":"","more":""}],"Post":[{"title":"crawler4j+jsoup实现网页内容抓取","date":"2017-02-17T03:27:52.000Z","_content":"\n昨天花了一下午的时间，使用[Crawler4J](https://github.com/yasserg/crawler4j)+[Jsoup](https://jsoup.org/)完成了一个简单的数据抓取工作（其实楼主最近比较关注房源信息），效果见下图，废话不多说，看看怎么实现的。\n\n{% asset_img crawler.png 抓取到的数据 %}\n\n\n## 1.准备工作\n- 新建一个maven项目，或者使用已有的maven项目\n- pom.xml中添加Crawler4J\n```\n    <dependency>\n        <groupId>edu.uci.ics</groupId>\n        <artifactId>crawler4j</artifactId>\n        <version>4.2</version>\n    </dependency>\n```\n- pom.xml中添加Jsoup\n```\n    <dependency>\n        <groupId>org.jsoup</groupId>\n        <artifactId>jsoup</artifactId>\n        <version>1.7.2</version>\n    </dependency>\n```\n## 2.Crawler4J使用\n关键两步：  \n1.使用crawler4j，创建一个继承WebCrawler的爬虫类，具体的抓取逻辑在visit()方法中实现。  \n2.实现控制器类指定抓取的种子（seed）、中间数据存储的文件夹、并发线程的数目：\n\ngithub上给出了几个使用的例子，具体可以[参考](https://github.com/yasserg/crawler4j),此处不做赘述。\n\n- Basic crawler：上述例子的全部源码及细节。\n- Image crawler：一个简单的图片爬虫：从指定域下载图片并存在指定文件夹。这个例子演示了怎样用crawler4j抓取二进制内容。\n- Collecting data from threads：这个例子演示了控制器怎样从抓取线程中收集数据/统计\n- Multiple crawlers：这个例子演示了如何同时运行两个不同的爬虫。\n- Shutdown crawling：这个例子演示了可以通过向控制器发送“shutdown”命令优雅的关闭抓取过程。   \n\n## 3.JSoup使用\n可以直接参考官方的[cookbook](https://jsoup.org/cookbook/).API文档讲的都很详细。\n\n## 4.实例分享\n- Controller\n```\npublic class Controller {\n\n    public static void main(String[] args) throws Exception {\n        String crawlStorageFolder = \"/Users/oliver/test/crawler\";\n        //设置要使用的Crawler线程数量\n        int numberOfCrawlers = 1;\n\n        CrawlConfig config = new CrawlConfig();\n        config.setCrawlStorageFolder(crawlStorageFolder);\n\n        /*\n         * Instantiate the controller for this crawl.\n         */\n         \n        PageFetcher pageFetcher = new PageFetcher(config);\n        RobotstxtConfig robotstxtConfig = new RobotstxtConfig();\n        //禁用robot.txt检查\n        robotstxtConfig.setEnabled(false);\n        RobotstxtServer robotsServer = new RobotstxtServer(robotstxtConfig, pageFetcher);\n        \n        CrawlController controller = new CrawlController(config, pageFetcher, robotsServer);\n\n        //添加种子，你要扫描的网址\n        controller.addSeed(\"http://website.com/\");\n\n\n        /*\n         * Start the crawl. This is a blocking operation, meaning that your code\n         * will reach the line after this only when crawling is finished.\n         */\n       controller.start(LjCrawler.class, numberOfCrawlers);\n    }\n}\n```\n\n- 自定义Crawler类，继承WebCrawler\n```\npublic class LjCrawler extends WebCrawler {\n\n    private static final Logger logger= LoggerFactory.getLogger(LjCrawler.class);\n\n    private final static Pattern FILTERS = Pattern.compile(\".*(\\\\.(css|js|gif|jpg\"\n            + \"|png|mp3|mp3|zip|gz))$\");\n\n    @Autowired\n    private BlogCategoryMapper blogCategoryMapper;\n\n    private HouseRecordMapper houseRecordMapper;\n\n    public LjCrawler() {\n        houseRecordMapper =SpringBeanFactoryUtils.getApplicationContext().getBean(HouseRecordMapper.class);\n    }\n\n    @Override\n    public boolean shouldVisit(Page referringPage, WebURL url) {\n        String href = url.getURL().toLowerCase();\n        return !FILTERS.matcher(href).matches()\n                && href.startsWith(\"http://yourwebsite.com\");\n    }\n\n    @Override\n    public void visit(Page page) {\n        String url = page.getWebURL().getURL();\n        logger.info(\"URL: \" + url);\n        if (page.getParseData() instanceof HtmlParseData) {\n            HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();\n            String html = htmlParseData.getHtml();\n            Document document= Jsoup.parse(html);\n            Elements elements= document.body().getElementsByClass(\"sellListContent\");\n            for(Element e:elements){\n                HouseRecord record=new HouseRecord();\n                Elements info= e.getElementsByClass(\"clear\").get(1).getAllElements();\n            \n            //todo  your process \n            \n            }\n        }\n    }\n}\n```","source":"_posts/crawler4j-jsoup.md","raw":"---\ntitle: crawler4j+jsoup实现网页内容抓取\ndate: 2017-02-17 11:27:52\ntags: \n- Crawler4j\n- Jsoup\n- JDBC\n- 爬虫\ncategories: \n- tools\n---\n\n昨天花了一下午的时间，使用[Crawler4J](https://github.com/yasserg/crawler4j)+[Jsoup](https://jsoup.org/)完成了一个简单的数据抓取工作（其实楼主最近比较关注房源信息），效果见下图，废话不多说，看看怎么实现的。\n\n{% asset_img crawler.png 抓取到的数据 %}\n\n\n## 1.准备工作\n- 新建一个maven项目，或者使用已有的maven项目\n- pom.xml中添加Crawler4J\n```\n    <dependency>\n        <groupId>edu.uci.ics</groupId>\n        <artifactId>crawler4j</artifactId>\n        <version>4.2</version>\n    </dependency>\n```\n- pom.xml中添加Jsoup\n```\n    <dependency>\n        <groupId>org.jsoup</groupId>\n        <artifactId>jsoup</artifactId>\n        <version>1.7.2</version>\n    </dependency>\n```\n## 2.Crawler4J使用\n关键两步：  \n1.使用crawler4j，创建一个继承WebCrawler的爬虫类，具体的抓取逻辑在visit()方法中实现。  \n2.实现控制器类指定抓取的种子（seed）、中间数据存储的文件夹、并发线程的数目：\n\ngithub上给出了几个使用的例子，具体可以[参考](https://github.com/yasserg/crawler4j),此处不做赘述。\n\n- Basic crawler：上述例子的全部源码及细节。\n- Image crawler：一个简单的图片爬虫：从指定域下载图片并存在指定文件夹。这个例子演示了怎样用crawler4j抓取二进制内容。\n- Collecting data from threads：这个例子演示了控制器怎样从抓取线程中收集数据/统计\n- Multiple crawlers：这个例子演示了如何同时运行两个不同的爬虫。\n- Shutdown crawling：这个例子演示了可以通过向控制器发送“shutdown”命令优雅的关闭抓取过程。   \n\n## 3.JSoup使用\n可以直接参考官方的[cookbook](https://jsoup.org/cookbook/).API文档讲的都很详细。\n\n## 4.实例分享\n- Controller\n```\npublic class Controller {\n\n    public static void main(String[] args) throws Exception {\n        String crawlStorageFolder = \"/Users/oliver/test/crawler\";\n        //设置要使用的Crawler线程数量\n        int numberOfCrawlers = 1;\n\n        CrawlConfig config = new CrawlConfig();\n        config.setCrawlStorageFolder(crawlStorageFolder);\n\n        /*\n         * Instantiate the controller for this crawl.\n         */\n         \n        PageFetcher pageFetcher = new PageFetcher(config);\n        RobotstxtConfig robotstxtConfig = new RobotstxtConfig();\n        //禁用robot.txt检查\n        robotstxtConfig.setEnabled(false);\n        RobotstxtServer robotsServer = new RobotstxtServer(robotstxtConfig, pageFetcher);\n        \n        CrawlController controller = new CrawlController(config, pageFetcher, robotsServer);\n\n        //添加种子，你要扫描的网址\n        controller.addSeed(\"http://website.com/\");\n\n\n        /*\n         * Start the crawl. This is a blocking operation, meaning that your code\n         * will reach the line after this only when crawling is finished.\n         */\n       controller.start(LjCrawler.class, numberOfCrawlers);\n    }\n}\n```\n\n- 自定义Crawler类，继承WebCrawler\n```\npublic class LjCrawler extends WebCrawler {\n\n    private static final Logger logger= LoggerFactory.getLogger(LjCrawler.class);\n\n    private final static Pattern FILTERS = Pattern.compile(\".*(\\\\.(css|js|gif|jpg\"\n            + \"|png|mp3|mp3|zip|gz))$\");\n\n    @Autowired\n    private BlogCategoryMapper blogCategoryMapper;\n\n    private HouseRecordMapper houseRecordMapper;\n\n    public LjCrawler() {\n        houseRecordMapper =SpringBeanFactoryUtils.getApplicationContext().getBean(HouseRecordMapper.class);\n    }\n\n    @Override\n    public boolean shouldVisit(Page referringPage, WebURL url) {\n        String href = url.getURL().toLowerCase();\n        return !FILTERS.matcher(href).matches()\n                && href.startsWith(\"http://yourwebsite.com\");\n    }\n\n    @Override\n    public void visit(Page page) {\n        String url = page.getWebURL().getURL();\n        logger.info(\"URL: \" + url);\n        if (page.getParseData() instanceof HtmlParseData) {\n            HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();\n            String html = htmlParseData.getHtml();\n            Document document= Jsoup.parse(html);\n            Elements elements= document.body().getElementsByClass(\"sellListContent\");\n            for(Element e:elements){\n                HouseRecord record=new HouseRecord();\n                Elements info= e.getElementsByClass(\"clear\").get(1).getAllElements();\n            \n            //todo  your process \n            \n            }\n        }\n    }\n}\n```","slug":"crawler4j-jsoup","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7mc0000t8dmx65ngvt0","content":"<p>昨天花了一下午的时间，使用<a href=\"https://github.com/yasserg/crawler4j\" target=\"_blank\" rel=\"external\">Crawler4J</a>+<a href=\"https://jsoup.org/\" target=\"_blank\" rel=\"external\">Jsoup</a>完成了一个简单的数据抓取工作（其实楼主最近比较关注房源信息），效果见下图，废话不多说，看看怎么实现的。</p>\n<img src=\"/2017/02/17/crawler4j-jsoup/crawler.png\" alt=\"抓取到的数据\" title=\"抓取到的数据\">\n<h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h2><ul>\n<li>新建一个maven项目，或者使用已有的maven项目</li>\n<li><p>pom.xml中添加Crawler4J</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>edu.uci.ics<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>crawler4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>pom.xml中添加Jsoup</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jsoup<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsoup<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-Crawler4J使用\"><a href=\"#2-Crawler4J使用\" class=\"headerlink\" title=\"2.Crawler4J使用\"></a>2.Crawler4J使用</h2><p>关键两步：<br>1.使用crawler4j，创建一个继承WebCrawler的爬虫类，具体的抓取逻辑在visit()方法中实现。<br>2.实现控制器类指定抓取的种子（seed）、中间数据存储的文件夹、并发线程的数目：</p>\n<p>github上给出了几个使用的例子，具体可以<a href=\"https://github.com/yasserg/crawler4j\" target=\"_blank\" rel=\"external\">参考</a>,此处不做赘述。</p>\n<ul>\n<li>Basic crawler：上述例子的全部源码及细节。</li>\n<li>Image crawler：一个简单的图片爬虫：从指定域下载图片并存在指定文件夹。这个例子演示了怎样用crawler4j抓取二进制内容。</li>\n<li>Collecting data from threads：这个例子演示了控制器怎样从抓取线程中收集数据/统计</li>\n<li>Multiple crawlers：这个例子演示了如何同时运行两个不同的爬虫。</li>\n<li>Shutdown crawling：这个例子演示了可以通过向控制器发送“shutdown”命令优雅的关闭抓取过程。   </li>\n</ul>\n<h2 id=\"3-JSoup使用\"><a href=\"#3-JSoup使用\" class=\"headerlink\" title=\"3.JSoup使用\"></a>3.JSoup使用</h2><p>可以直接参考官方的<a href=\"https://jsoup.org/cookbook/\" target=\"_blank\" rel=\"external\">cookbook</a>.API文档讲的都很详细。</p>\n<h2 id=\"4-实例分享\"><a href=\"#4-实例分享\" class=\"headerlink\" title=\"4.实例分享\"></a>4.实例分享</h2><ul>\n<li><p>Controller</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Controller &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) throws Exception &#123;</div><div class=\"line\">        <span class=\"keyword\">String</span> crawlStorageFolder = <span class=\"string\">\"/Users/oliver/test/crawler\"</span>;</div><div class=\"line\">        <span class=\"comment\">//设置要使用的Crawler线程数量</span></div><div class=\"line\">        <span class=\"keyword\">int</span> numberOfCrawlers = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        CrawlConfig <span class=\"built_in\">config</span> = <span class=\"keyword\">new</span> CrawlConfig();</div><div class=\"line\">        <span class=\"built_in\">config</span>.setCrawlStorageFolder(crawlStorageFolder);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * Instantiate the controller for this crawl.</div><div class=\"line\">         */</div><div class=\"line\">         </div><div class=\"line\">        PageFetcher pageFetcher = <span class=\"keyword\">new</span> PageFetcher(<span class=\"built_in\">config</span>);</div><div class=\"line\">        RobotstxtConfig robotstxtConfig = <span class=\"keyword\">new</span> RobotstxtConfig();</div><div class=\"line\">        <span class=\"comment\">//禁用robot.txt检查</span></div><div class=\"line\">        robotstxtConfig.setEnabled(false);</div><div class=\"line\">        RobotstxtServer robotsServer = <span class=\"keyword\">new</span> RobotstxtServer(robotstxtConfig, pageFetcher);</div><div class=\"line\">        </div><div class=\"line\">        CrawlController controller = <span class=\"keyword\">new</span> CrawlController(<span class=\"built_in\">config</span>, pageFetcher, robotsServer);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//添加种子，你要扫描的网址</span></div><div class=\"line\">        controller.addSeed(<span class=\"string\">\"http://website.com/\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * Start the crawl. This is a blocking operation, meaning that your code</div><div class=\"line\">         * will reach the line after this only when crawling is finished.</div><div class=\"line\">         */</div><div class=\"line\">       controller.start(LjCrawler.<span class=\"keyword\">class</span>, numberOfCrawlers);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>自定义Crawler类，继承WebCrawler</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LjCrawler</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebCrawler</span> &#123;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger= LoggerFactory.getLogger(LjCrawler.<span class=\"keyword\">class</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Pattern FILTERS = Pattern.compile(<span class=\"string\">\".*(\\\\.(css|js|gif|jpg\"</span></div><div class=\"line\">            + <span class=\"string\">\"|png|mp3|mp3|zip|gz))$\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> BlogCategoryMapper blogCategoryMapper;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> HouseRecordMapper houseRecordMapper;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> LjCrawler() &#123;</div><div class=\"line\">        houseRecordMapper =SpringBeanFactoryUtils.getApplicationContext().getBean(HouseRecordMapper.<span class=\"keyword\">class</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> shouldVisit(Page referringPage, WebURL url) &#123;</div><div class=\"line\">        String href = url.getURL().toLowerCase();</div><div class=\"line\">        <span class=\"keyword\">return</span> !FILTERS.matcher(href).matches()</div><div class=\"line\">                &amp;&amp; href.startsWith(<span class=\"string\">\"http://yourwebsite.com\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> visit(Page page) &#123;</div><div class=\"line\">        String url = page.getWebURL().getURL();</div><div class=\"line\">        logger.info(<span class=\"string\">\"URL: \"</span> + url);</div><div class=\"line\">        <span class=\"keyword\">if</span> (page.getParseData() <span class=\"keyword\">instanceof</span> HtmlParseData) &#123;</div><div class=\"line\">            HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();</div><div class=\"line\">            String html = htmlParseData.getHtml();</div><div class=\"line\">            Document document= Jsoup.parse(html);</div><div class=\"line\">            Elements elements= document.body().getElementsByClass(<span class=\"string\">\"sellListContent\"</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span>(Element <span class=\"string\">e:</span>elements)&#123;</div><div class=\"line\">                HouseRecord record=<span class=\"keyword\">new</span> HouseRecord();</div><div class=\"line\">                Elements info= e.getElementsByClass(<span class=\"string\">\"clear\"</span>).get(<span class=\"number\">1</span>).getAllElements();</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">//todo  your process </span></div><div class=\"line\">            </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p>昨天花了一下午的时间，使用<a href=\"https://github.com/yasserg/crawler4j\">Crawler4J</a>+<a href=\"https://jsoup.org/\">Jsoup</a>完成了一个简单的数据抓取工作（其实楼主最近比较关注房源信息），效果见下图，废话不多说，看看怎么实现的。</p>\n<img src=\"/2017/02/17/crawler4j-jsoup/crawler.png\" alt=\"抓取到的数据\" title=\"抓取到的数据\">\n<h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h2><ul>\n<li>新建一个maven项目，或者使用已有的maven项目</li>\n<li><p>pom.xml中添加Crawler4J</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>edu.uci.ics<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>crawler4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>pom.xml中添加Jsoup</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jsoup<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsoup<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-Crawler4J使用\"><a href=\"#2-Crawler4J使用\" class=\"headerlink\" title=\"2.Crawler4J使用\"></a>2.Crawler4J使用</h2><p>关键两步：<br>1.使用crawler4j，创建一个继承WebCrawler的爬虫类，具体的抓取逻辑在visit()方法中实现。<br>2.实现控制器类指定抓取的种子（seed）、中间数据存储的文件夹、并发线程的数目：</p>\n<p>github上给出了几个使用的例子，具体可以<a href=\"https://github.com/yasserg/crawler4j\">参考</a>,此处不做赘述。</p>\n<ul>\n<li>Basic crawler：上述例子的全部源码及细节。</li>\n<li>Image crawler：一个简单的图片爬虫：从指定域下载图片并存在指定文件夹。这个例子演示了怎样用crawler4j抓取二进制内容。</li>\n<li>Collecting data from threads：这个例子演示了控制器怎样从抓取线程中收集数据/统计</li>\n<li>Multiple crawlers：这个例子演示了如何同时运行两个不同的爬虫。</li>\n<li>Shutdown crawling：这个例子演示了可以通过向控制器发送“shutdown”命令优雅的关闭抓取过程。   </li>\n</ul>\n<h2 id=\"3-JSoup使用\"><a href=\"#3-JSoup使用\" class=\"headerlink\" title=\"3.JSoup使用\"></a>3.JSoup使用</h2><p>可以直接参考官方的<a href=\"https://jsoup.org/cookbook/\">cookbook</a>.API文档讲的都很详细。</p>\n<h2 id=\"4-实例分享\"><a href=\"#4-实例分享\" class=\"headerlink\" title=\"4.实例分享\"></a>4.实例分享</h2><ul>\n<li><p>Controller</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Controller &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) throws Exception &#123;</div><div class=\"line\">        <span class=\"keyword\">String</span> crawlStorageFolder = <span class=\"string\">\"/Users/oliver/test/crawler\"</span>;</div><div class=\"line\">        <span class=\"comment\">//设置要使用的Crawler线程数量</span></div><div class=\"line\">        <span class=\"keyword\">int</span> numberOfCrawlers = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        CrawlConfig <span class=\"built_in\">config</span> = <span class=\"keyword\">new</span> CrawlConfig();</div><div class=\"line\">        <span class=\"built_in\">config</span>.setCrawlStorageFolder(crawlStorageFolder);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * Instantiate the controller for this crawl.</div><div class=\"line\">         */</span></div><div class=\"line\">         </div><div class=\"line\">        PageFetcher pageFetcher = <span class=\"keyword\">new</span> PageFetcher(<span class=\"built_in\">config</span>);</div><div class=\"line\">        RobotstxtConfig robotstxtConfig = <span class=\"keyword\">new</span> RobotstxtConfig();</div><div class=\"line\">        <span class=\"comment\">//禁用robot.txt检查</span></div><div class=\"line\">        robotstxtConfig.setEnabled(false);</div><div class=\"line\">        RobotstxtServer robotsServer = <span class=\"keyword\">new</span> RobotstxtServer(robotstxtConfig, pageFetcher);</div><div class=\"line\">        </div><div class=\"line\">        CrawlController controller = <span class=\"keyword\">new</span> CrawlController(<span class=\"built_in\">config</span>, pageFetcher, robotsServer);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//添加种子，你要扫描的网址</span></div><div class=\"line\">        controller.addSeed(<span class=\"string\">\"http://website.com/\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * Start the crawl. This is a blocking operation, meaning that your code</div><div class=\"line\">         * will reach the line after this only when crawling is finished.</div><div class=\"line\">         */</span></div><div class=\"line\">       controller.start(LjCrawler.<span class=\"keyword\">class</span>, numberOfCrawlers);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>自定义Crawler类，继承WebCrawler</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LjCrawler</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebCrawler</span> &#123;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger= LoggerFactory.getLogger(LjCrawler.<span class=\"keyword\">class</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Pattern FILTERS = Pattern.compile(<span class=\"string\">\".*(\\\\.(css|js|gif|jpg\"</span></div><div class=\"line\">            + <span class=\"string\">\"|png|mp3|mp3|zip|gz))$\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> BlogCategoryMapper blogCategoryMapper;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> HouseRecordMapper houseRecordMapper;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> LjCrawler() &#123;</div><div class=\"line\">        houseRecordMapper =SpringBeanFactoryUtils.getApplicationContext().getBean(HouseRecordMapper.<span class=\"keyword\">class</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> shouldVisit(Page referringPage, WebURL url) &#123;</div><div class=\"line\">        String href = url.getURL().toLowerCase();</div><div class=\"line\">        <span class=\"keyword\">return</span> !FILTERS.matcher(href).matches()</div><div class=\"line\">                &amp;&amp; href.startsWith(<span class=\"string\">\"http://yourwebsite.com\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> visit(Page page) &#123;</div><div class=\"line\">        String url = page.getWebURL().getURL();</div><div class=\"line\">        logger.info(<span class=\"string\">\"URL: \"</span> + url);</div><div class=\"line\">        <span class=\"keyword\">if</span> (page.getParseData() <span class=\"keyword\">instanceof</span> HtmlParseData) &#123;</div><div class=\"line\">            HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();</div><div class=\"line\">            String html = htmlParseData.getHtml();</div><div class=\"line\">            Document document= Jsoup.parse(html);</div><div class=\"line\">            Elements elements= document.body().getElementsByClass(<span class=\"string\">\"sellListContent\"</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span>(Element <span class=\"string\">e:</span>elements)&#123;</div><div class=\"line\">                HouseRecord record=<span class=\"keyword\">new</span> HouseRecord();</div><div class=\"line\">                Elements info= e.getElementsByClass(<span class=\"string\">\"clear\"</span>).get(<span class=\"number\">1</span>).getAllElements();</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">//todo  your process </span></div><div class=\"line\">            </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"AOP & java动态代理","date":"2017-05-11T03:21:20.000Z","_content":"\n面向切面的程序设计（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程、剖面导向程序设计）是计算机科学中的一个术语，指一种程序设计范型。该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点（crosscutting concern）。\n侧面的概念源于对面向对象的程序设计的改进，但并不只限于此，它还可以用来改进传统的函数。与侧面相关的编程概念还包括元对象协议、主题（subject）、混入（mixin）和委托。\n\n面向切面的程序设计主要是实现思想就是动态代理,了解动态代理之前先看一下代理模式:\n\n## 代理模式\n定义:代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。\n实现上是代理类中维护队原对象的应用(通过接口引用,面向接口编程)\n\n接口定义:\n```\npublic interface IHello {\n    /**\n     * 假设这是一个业务方法\n     * @param name\n     */\n    void sayHello(String name);\n}\n```\n\n被代理者实现接口:\n```\npublic class Hello implements IHello {\n\n    public void sayHello(String name) {\n        System.out.println(\"Hello \" + name);\n    }\n\n}\n```\n\n代理类维护代理者的引用,实现代理:\n\n```\npublic class HelloProxy implements IHello {\n     private IHello hello;  //接口引用被代理者\n\n     public HelloProxy(IHello hello) {\n         this.hello = hello;\n     }\n\n    public void sayHello(String name) {\n        Logger.logging(Level.DEBUGE, \"sayHello method start.\");\n        hello.sayHello(name);\n        Logger.logging(Level.INFO, \"sayHello method end!\");\n\n    }\n}\n```\n\n\n## 动态代理模式\n简单的说就是如何动态生成类似HelloProxy代理类:在java的动态代理机制中，有两个重要的类或接口，一个是 在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。\n1.InvocationHandler 唯一一个方法 invoke 方法,当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。\n2.Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法.利用java的反射原理生成代理者;\n\n## 实例解析\n\n1.接口定义\n```\npublic interface Calculator {\n\n    public int calculate( int a , int b);\n}\n```\n\n2.被代理者实现接口\n```\npublic class CalculatorImpl implements Calculator{\n\n    @Override\n    public int calculate(int a, int b) {\n        return a/b;\n    }\n}\n```\n3.动态代理生成\n```\npublic class ProxyFactory implements InvocationHandler {\n\n    private Object opt;\n\n    public  ProxyFactory(Object opt) {\n        this.opt = opt;\n    }\n\n    /**\n        * 要处理的对象中的每个方法会被此方法送去JVM调用,也就是说,要处理的对象的方法只能通过此方法调用\n        * 此方法是动态的,不是手动调用的\n        */\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        Object result = null;\n        try {\n            //JVM通过这条语句执行原来的方法(反射机制),可以在invoke前后做一些处理,就是代理的前后处理的事情.\n            result = method.invoke(this.opt, args);\n            //执行原来的方法之后记录日志\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //返回方法返回值给调用者\n        return result;\n    }\n}\n```\n4.测试运行\n```\npublic class AopTest {\n\n    public static void main(String[] args){\n\n        /**被代理的真实对象 */\n        CalculatorImpl calcImpl = new CalculatorImpl();\n\n        /** 实际调用方法的handler  实际上这貌似就是代理对象*/\n        InvocationHandler handler = new ProxyFactory(calcImpl);\n\n        /**\n         * 参数1 用来定义代理类的 loader\n         * 参数2 代理类要实现的接口\n         * 参数3 分发方法调用的handler*/\n        Calculator proxy =(Calculator) Proxy.newProxyInstance(handler.getClass().getClassLoader(),calcImpl.getClass().getInterfaces(),handler);\n\n        int result = proxy.calculate(20, 10);\n        System.out.print(\"FInal Result :::\" + result);\n    }\n\n}\n```\n\n\n\n\n\n","source":"_posts/dynamicProxy.md","raw":"---\ntitle: AOP & java动态代理\ndate: 2017-05-11 11:21:20\ntags:\n- 动态代理\n- 反射\n- 代理\n- AOP\n\ncategories:\n- java\n---\n\n面向切面的程序设计（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程、剖面导向程序设计）是计算机科学中的一个术语，指一种程序设计范型。该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点（crosscutting concern）。\n侧面的概念源于对面向对象的程序设计的改进，但并不只限于此，它还可以用来改进传统的函数。与侧面相关的编程概念还包括元对象协议、主题（subject）、混入（mixin）和委托。\n\n面向切面的程序设计主要是实现思想就是动态代理,了解动态代理之前先看一下代理模式:\n\n## 代理模式\n定义:代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。\n实现上是代理类中维护队原对象的应用(通过接口引用,面向接口编程)\n\n接口定义:\n```\npublic interface IHello {\n    /**\n     * 假设这是一个业务方法\n     * @param name\n     */\n    void sayHello(String name);\n}\n```\n\n被代理者实现接口:\n```\npublic class Hello implements IHello {\n\n    public void sayHello(String name) {\n        System.out.println(\"Hello \" + name);\n    }\n\n}\n```\n\n代理类维护代理者的引用,实现代理:\n\n```\npublic class HelloProxy implements IHello {\n     private IHello hello;  //接口引用被代理者\n\n     public HelloProxy(IHello hello) {\n         this.hello = hello;\n     }\n\n    public void sayHello(String name) {\n        Logger.logging(Level.DEBUGE, \"sayHello method start.\");\n        hello.sayHello(name);\n        Logger.logging(Level.INFO, \"sayHello method end!\");\n\n    }\n}\n```\n\n\n## 动态代理模式\n简单的说就是如何动态生成类似HelloProxy代理类:在java的动态代理机制中，有两个重要的类或接口，一个是 在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。\n1.InvocationHandler 唯一一个方法 invoke 方法,当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。\n2.Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法.利用java的反射原理生成代理者;\n\n## 实例解析\n\n1.接口定义\n```\npublic interface Calculator {\n\n    public int calculate( int a , int b);\n}\n```\n\n2.被代理者实现接口\n```\npublic class CalculatorImpl implements Calculator{\n\n    @Override\n    public int calculate(int a, int b) {\n        return a/b;\n    }\n}\n```\n3.动态代理生成\n```\npublic class ProxyFactory implements InvocationHandler {\n\n    private Object opt;\n\n    public  ProxyFactory(Object opt) {\n        this.opt = opt;\n    }\n\n    /**\n        * 要处理的对象中的每个方法会被此方法送去JVM调用,也就是说,要处理的对象的方法只能通过此方法调用\n        * 此方法是动态的,不是手动调用的\n        */\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        Object result = null;\n        try {\n            //JVM通过这条语句执行原来的方法(反射机制),可以在invoke前后做一些处理,就是代理的前后处理的事情.\n            result = method.invoke(this.opt, args);\n            //执行原来的方法之后记录日志\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //返回方法返回值给调用者\n        return result;\n    }\n}\n```\n4.测试运行\n```\npublic class AopTest {\n\n    public static void main(String[] args){\n\n        /**被代理的真实对象 */\n        CalculatorImpl calcImpl = new CalculatorImpl();\n\n        /** 实际调用方法的handler  实际上这貌似就是代理对象*/\n        InvocationHandler handler = new ProxyFactory(calcImpl);\n\n        /**\n         * 参数1 用来定义代理类的 loader\n         * 参数2 代理类要实现的接口\n         * 参数3 分发方法调用的handler*/\n        Calculator proxy =(Calculator) Proxy.newProxyInstance(handler.getClass().getClassLoader(),calcImpl.getClass().getInterfaces(),handler);\n\n        int result = proxy.calculate(20, 10);\n        System.out.print(\"FInal Result :::\" + result);\n    }\n\n}\n```\n\n\n\n\n\n","slug":"dynamicProxy","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7mj0002t8dm054zqytj","content":"<p>面向切面的程序设计（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程、剖面导向程序设计）是计算机科学中的一个术语，指一种程序设计范型。该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点（crosscutting concern）。<br>侧面的概念源于对面向对象的程序设计的改进，但并不只限于此，它还可以用来改进传统的函数。与侧面相关的编程概念还包括元对象协议、主题（subject）、混入（mixin）和委托。</p>\n<p>面向切面的程序设计主要是实现思想就是动态代理,了解动态代理之前先看一下代理模式:</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>定义:代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。<br>实现上是代理类中维护队原对象的应用(通过接口引用,面向接口编程)</p>\n<p>接口定义:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IHello</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 假设这是一个业务方法</div><div class=\"line\">     * @param name</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span>(<span class=\"params\">String name</span>)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>被代理者实现接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> <span class=\"keyword\">implements</span> <span class=\"title\">IHello</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Hello \"</span> + name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代理类维护代理者的引用,实现代理:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IHello</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">private</span> IHello hello;  <span class=\"comment\">//接口引用被代理者</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloProxy</span><span class=\"params\">(IHello hello)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">this</span>.hello = hello;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        Logger.logging(Level.DEBUGE, <span class=\"string\">\"sayHello method start.\"</span>);</div><div class=\"line\">        hello.sayHello(name);</div><div class=\"line\">        Logger.logging(Level.INFO, <span class=\"string\">\"sayHello method end!\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"动态代理模式\"><a href=\"#动态代理模式\" class=\"headerlink\" title=\"动态代理模式\"></a>动态代理模式</h2><p>简单的说就是如何动态生成类似HelloProxy代理类:在java的动态代理机制中，有两个重要的类或接口，一个是 在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。<br>1.InvocationHandler 唯一一个方法 invoke 方法,当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。<br>2.Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法.利用java的反射原理生成代理者;</p>\n<h2 id=\"实例解析\"><a href=\"#实例解析\" class=\"headerlink\" title=\"实例解析\"></a>实例解析</h2><p>1.接口定义<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">Calculator</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span>(<span class=\"params\"> <span class=\"keyword\">int</span> a , <span class=\"keyword\">int</span> b</span>)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.被代理者实现接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculatorImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Calculator</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a/b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.动态代理生成<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ProxyFactory <span class=\"keyword\">implements</span> InvocationHandler &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">Object</span> opt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span>  ProxyFactory(<span class=\"built_in\">Object</span> opt) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.opt = opt;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">        * 要处理的对象中的每个方法会被此方法送去JVM调用,也就是说,要处理的对象的方法只能通过此方法调用</div><div class=\"line\">        * 此方法是动态的,不是手动调用的</div><div class=\"line\">        */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">Object</span> invoke(<span class=\"built_in\">Object</span> proxy, Method method, <span class=\"built_in\">Object</span>[] args) throws Throwable &#123;</div><div class=\"line\">        <span class=\"built_in\">Object</span> result = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//JVM通过这条语句执行原来的方法(反射机制),可以在invoke前后做一些处理,就是代理的前后处理的事情.</span></div><div class=\"line\">            result = method.invoke(<span class=\"keyword\">this</span>.opt, args);</div><div class=\"line\">            <span class=\"comment\">//执行原来的方法之后记录日志</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//返回方法返回值给调用者</span></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.测试运行<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AopTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args)&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**被代理的真实对象 */</span></div><div class=\"line\">        CalculatorImpl calcImpl = <span class=\"keyword\">new</span> <span class=\"type\">CalculatorImpl</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/** 实际调用方法的handler  实际上这貌似就是代理对象*/</span></div><div class=\"line\">        InvocationHandler handler = <span class=\"keyword\">new</span> <span class=\"type\">ProxyFactory</span>(calcImpl);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 参数1 用来定义代理类的 loader</div><div class=\"line\">         * 参数2 代理类要实现的接口</div><div class=\"line\">         * 参数3 分发方法调用的handler*/</div><div class=\"line\">        Calculator proxy =(Calculator) Proxy.<span class=\"keyword\">new</span><span class=\"type\">ProxyInstance</span>(handler.getClass().getClassLoader(),calcImpl.getClass().getInterfaces(),handler);</div><div class=\"line\"></div><div class=\"line\">        int result = proxy.calculate(<span class=\"number\">20</span>, <span class=\"number\">10</span>);</div><div class=\"line\">        System.out.print(<span class=\"string\">\"FInal Result :::\"</span> + result);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>面向切面的程序设计（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程、剖面导向程序设计）是计算机科学中的一个术语，指一种程序设计范型。该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点（crosscutting concern）。<br>侧面的概念源于对面向对象的程序设计的改进，但并不只限于此，它还可以用来改进传统的函数。与侧面相关的编程概念还包括元对象协议、主题（subject）、混入（mixin）和委托。</p>\n<p>面向切面的程序设计主要是实现思想就是动态代理,了解动态代理之前先看一下代理模式:</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>定义:代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。<br>实现上是代理类中维护队原对象的应用(通过接口引用,面向接口编程)</p>\n<p>接口定义:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IHello</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 假设这是一个业务方法</div><div class=\"line\">     * @param name</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span>(<span class=\"params\">String name</span>)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>被代理者实现接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> <span class=\"keyword\">implements</span> <span class=\"title\">IHello</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Hello \"</span> + name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代理类维护代理者的引用,实现代理:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IHello</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">private</span> IHello hello;  <span class=\"comment\">//接口引用被代理者</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloProxy</span><span class=\"params\">(IHello hello)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">this</span>.hello = hello;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        Logger.logging(Level.DEBUGE, <span class=\"string\">\"sayHello method start.\"</span>);</div><div class=\"line\">        hello.sayHello(name);</div><div class=\"line\">        Logger.logging(Level.INFO, <span class=\"string\">\"sayHello method end!\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"动态代理模式\"><a href=\"#动态代理模式\" class=\"headerlink\" title=\"动态代理模式\"></a>动态代理模式</h2><p>简单的说就是如何动态生成类似HelloProxy代理类:在java的动态代理机制中，有两个重要的类或接口，一个是 在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。<br>1.InvocationHandler 唯一一个方法 invoke 方法,当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。<br>2.Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法.利用java的反射原理生成代理者;</p>\n<h2 id=\"实例解析\"><a href=\"#实例解析\" class=\"headerlink\" title=\"实例解析\"></a>实例解析</h2><p>1.接口定义<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">Calculator</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span>(<span class=\"params\"> <span class=\"keyword\">int</span> a , <span class=\"keyword\">int</span> b</span>)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.被代理者实现接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculatorImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Calculator</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a/b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.动态代理生成<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ProxyFactory <span class=\"keyword\">implements</span> InvocationHandler &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">Object</span> opt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span>  ProxyFactory(<span class=\"built_in\">Object</span> opt) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.opt = opt;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">        * 要处理的对象中的每个方法会被此方法送去JVM调用,也就是说,要处理的对象的方法只能通过此方法调用</div><div class=\"line\">        * 此方法是动态的,不是手动调用的</div><div class=\"line\">        */</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">Object</span> invoke(<span class=\"built_in\">Object</span> proxy, Method method, <span class=\"built_in\">Object</span>[] args) throws Throwable &#123;</div><div class=\"line\">        <span class=\"built_in\">Object</span> result = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//JVM通过这条语句执行原来的方法(反射机制),可以在invoke前后做一些处理,就是代理的前后处理的事情.</span></div><div class=\"line\">            result = method.invoke(<span class=\"keyword\">this</span>.opt, args);</div><div class=\"line\">            <span class=\"comment\">//执行原来的方法之后记录日志</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//返回方法返回值给调用者</span></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.测试运行<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AopTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args)&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**被代理的真实对象 */</span></div><div class=\"line\">        CalculatorImpl calcImpl = <span class=\"keyword\">new</span> <span class=\"type\">CalculatorImpl</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/** 实际调用方法的handler  实际上这貌似就是代理对象*/</span></div><div class=\"line\">        InvocationHandler handler = <span class=\"keyword\">new</span> <span class=\"type\">ProxyFactory</span>(calcImpl);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 参数1 用来定义代理类的 loader</div><div class=\"line\">         * 参数2 代理类要实现的接口</div><div class=\"line\">         * 参数3 分发方法调用的handler*/</span></div><div class=\"line\">        Calculator proxy =(Calculator) Proxy.<span class=\"keyword\">new</span><span class=\"type\">ProxyInstance</span>(handler.getClass().getClassLoader(),calcImpl.getClass().getInterfaces(),handler);</div><div class=\"line\"></div><div class=\"line\">        int result = proxy.calculate(<span class=\"number\">20</span>, <span class=\"number\">10</span>);</div><div class=\"line\">        System.out.print(<span class=\"string\">\"FInal Result :::\"</span> + result);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"hexo+github搭建个人博客","date":"2017-02-13T10:20:48.000Z","_content":"\n近来发现一种很方便的搭建个人博客的方法，不需要云服务器，使用**hexo**+**github**实现，完全免费，效果还不错。此站是博主搭建出来的效果。\n\n## 1.准备GitHub\n### 1.1 新建gitbub库\n如果没有，去[github](https://github.com)申请一个；然后新建一个Repository,名字为yourname.github.io; \n### 1.2 clone gitbub库\nclone 到本地机器\n```\ngit clone https://github.com/yourId/yourname.github.io.git\n```\n\n## 2.hexo使用\n### 2.1 hexo 安装\n使用前提，本机已经安装git 和 nodejs\n[教程参见](https://hexo.io/docs/)\n### 2.2 生成博客\n-  初始化目录\n```\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n- 新建文档\n```\n$ hexo new [layout] <title>\n```\n\n参数| 描述\n---|---\nlayout| 默认使用post，存放位置为：~/你的文档根目录/source/_posts\ntitle | 文档名\n\n- 编辑文档   \n文档编辑，编辑使用[markdown](http://wowubuntu.com/markdown/)语法,不赘述；\n需要注意，front-master一般采用这种格式：\n```\n---\ntitle: mvn tutorial\ndate: 2017-02-13 13:22:33\ntags: \n- maven \n- learn\ncategories:\n- tools\n---\n```\n参数| 描述\n---|---\ntags| 标签\ncategories | 文档分类\n- 生成网站\n```\n$ hexo generate\n```\n- 部署网站\n```\n$ hexo deploy\n```\n==注意：==\n部署前设置部署方式和目标url;  \n部署之前可以使用命令：**hexo server** 本地运行看一下。\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n```\n参数| 描述\n---|---\nrepo| 库（Repository）地址\nbranch | 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\nmessage |\t自定义提交信息 (默认为 update+提交时间)\n\n至此完成，你可以访问自己的github.io地址：yourGithubId.github.io\n\n### 2.3 主题使用\n好的博客需要一个好看的主题（楼主使用的是Next主题，**关于标签和分类的index.html文件生成问题**需要[参考](http://theme-next.iissnan.com/theme-settings.html)   ），[主题地址](https://hexo.io/themes/),如何装饰呢？\n\n点击相关主题，找到此主题相关的github地址，举例：某主题地址是\nhttps://github.com/levblanc/hexo-theme-aero-dual\n```\n$ git clone https://github.com/levblanc/hexo-theme-aero-dual.git themes/aero-dual\n```\nclone 主题项目到你的博客的themes目录下，便安装完成。\n更改你博客的目录下的  _config.yml 文件中theme的值为aero-dual；然后hexo server 查看是否已经装饰上主题。\n\n\n\n  \n\t\n\t\n\n \n \n\n\n\n\n\n\n\n  \n\t\n\t\n\n \n \n\n\n\n","source":"_posts/github-io-hexo.md","raw":"---\ntitle: hexo+github搭建个人博客\ndate: 2017-02-13 18:20:48\ntags: \n- github\n- github.io\n- hexo\ncategories: \n- tools\n---\n\n近来发现一种很方便的搭建个人博客的方法，不需要云服务器，使用**hexo**+**github**实现，完全免费，效果还不错。此站是博主搭建出来的效果。\n\n## 1.准备GitHub\n### 1.1 新建gitbub库\n如果没有，去[github](https://github.com)申请一个；然后新建一个Repository,名字为yourname.github.io; \n### 1.2 clone gitbub库\nclone 到本地机器\n```\ngit clone https://github.com/yourId/yourname.github.io.git\n```\n\n## 2.hexo使用\n### 2.1 hexo 安装\n使用前提，本机已经安装git 和 nodejs\n[教程参见](https://hexo.io/docs/)\n### 2.2 生成博客\n-  初始化目录\n```\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n- 新建文档\n```\n$ hexo new [layout] <title>\n```\n\n参数| 描述\n---|---\nlayout| 默认使用post，存放位置为：~/你的文档根目录/source/_posts\ntitle | 文档名\n\n- 编辑文档   \n文档编辑，编辑使用[markdown](http://wowubuntu.com/markdown/)语法,不赘述；\n需要注意，front-master一般采用这种格式：\n```\n---\ntitle: mvn tutorial\ndate: 2017-02-13 13:22:33\ntags: \n- maven \n- learn\ncategories:\n- tools\n---\n```\n参数| 描述\n---|---\ntags| 标签\ncategories | 文档分类\n- 生成网站\n```\n$ hexo generate\n```\n- 部署网站\n```\n$ hexo deploy\n```\n==注意：==\n部署前设置部署方式和目标url;  \n部署之前可以使用命令：**hexo server** 本地运行看一下。\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n```\n参数| 描述\n---|---\nrepo| 库（Repository）地址\nbranch | 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\nmessage |\t自定义提交信息 (默认为 update+提交时间)\n\n至此完成，你可以访问自己的github.io地址：yourGithubId.github.io\n\n### 2.3 主题使用\n好的博客需要一个好看的主题（楼主使用的是Next主题，**关于标签和分类的index.html文件生成问题**需要[参考](http://theme-next.iissnan.com/theme-settings.html)   ），[主题地址](https://hexo.io/themes/),如何装饰呢？\n\n点击相关主题，找到此主题相关的github地址，举例：某主题地址是\nhttps://github.com/levblanc/hexo-theme-aero-dual\n```\n$ git clone https://github.com/levblanc/hexo-theme-aero-dual.git themes/aero-dual\n```\nclone 主题项目到你的博客的themes目录下，便安装完成。\n更改你博客的目录下的  _config.yml 文件中theme的值为aero-dual；然后hexo server 查看是否已经装饰上主题。\n\n\n\n  \n\t\n\t\n\n \n \n\n\n\n\n\n\n\n  \n\t\n\t\n\n \n \n\n\n\n","slug":"github-io-hexo","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7mq0006t8dmiato63k6","content":"<p>近来发现一种很方便的搭建个人博客的方法，不需要云服务器，使用<strong>hexo</strong>+<strong>github</strong>实现，完全免费，效果还不错。此站是博主搭建出来的效果。</p>\n<h2 id=\"1-准备GitHub\"><a href=\"#1-准备GitHub\" class=\"headerlink\" title=\"1.准备GitHub\"></a>1.准备GitHub</h2><h3 id=\"1-1-新建gitbub库\"><a href=\"#1-1-新建gitbub库\" class=\"headerlink\" title=\"1.1 新建gitbub库\"></a>1.1 新建gitbub库</h3><p>如果没有，去<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">github</a>申请一个；然后新建一个Repository,名字为yourname.github.io; </p>\n<h3 id=\"1-2-clone-gitbub库\"><a href=\"#1-2-clone-gitbub库\" class=\"headerlink\" title=\"1.2 clone gitbub库\"></a>1.2 clone gitbub库</h3><p>clone 到本地机器<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/yourId/yourname.github.io.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-hexo使用\"><a href=\"#2-hexo使用\" class=\"headerlink\" title=\"2.hexo使用\"></a>2.hexo使用</h2><h3 id=\"2-1-hexo-安装\"><a href=\"#2-1-hexo-安装\" class=\"headerlink\" title=\"2.1 hexo 安装\"></a>2.1 hexo 安装</h3><p>使用前提，本机已经安装git 和 nodejs<br><a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">教程参见</a></p>\n<h3 id=\"2-2-生成博客\"><a href=\"#2-2-生成博客\" class=\"headerlink\" title=\"2.2 生成博客\"></a>2.2 生成博客</h3><ul>\n<li><p>初始化目录</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>hexo init &lt;folder&gt;</div><div class=\"line\"><span class=\"variable\">$ </span>cd &lt;folder&gt;</div><div class=\"line\"><span class=\"variable\">$ </span>npm install</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建文档</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo <span class=\"keyword\">new</span> [layout] &lt;<span class=\"built_in\">title</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>默认使用post，存放位置为：~/你的文档根目录/source/_posts</td>\n</tr>\n<tr>\n<td>title</td>\n<td>文档名</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>编辑文档<br>文档编辑，编辑使用<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">markdown</a>语法,不赘述；<br>需要注意，front-master一般采用这种格式：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"attr\">title:</span> mvn tutorial</div><div class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"bullet\">-02</span><span class=\"bullet\">-13</span> <span class=\"number\">13</span>:<span class=\"number\">22</span>:<span class=\"number\">33</span></div><div class=\"line\"><span class=\"attr\">tags:</span> </div><div class=\"line\"><span class=\"bullet\">-</span> maven </div><div class=\"line\"><span class=\"bullet\">-</span> learn</div><div class=\"line\"><span class=\"attr\">categories:</span></div><div class=\"line\"><span class=\"bullet\">-</span> tools</div><div class=\"line\"><span class=\"meta\">---</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tags</td>\n<td>标签</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>文档分类</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>生成网站</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo <span class=\"keyword\">generate</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>部署网站</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>hexo deploy</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>==注意：==<br>部署前设置部署方式和目标url;<br>部署之前可以使用命令：<strong>hexo server</strong> 本地运行看一下。<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">deploy:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> git</div><div class=\"line\"><span class=\"symbol\">  repo:</span> <span class=\"params\">&lt;repository url&gt;</span></div><div class=\"line\"><span class=\"symbol\">  branch:</span> [branch]</div><div class=\"line\"><span class=\"symbol\">  message:</span> [message]</div></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>repo</td>\n<td>库（Repository）地址</td>\n</tr>\n<tr>\n<td>branch</td>\n<td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td>\n</tr>\n<tr>\n<td>message</td>\n<td>自定义提交信息 (默认为 update+提交时间)</td>\n</tr>\n</tbody>\n</table>\n<p>至此完成，你可以访问自己的github.io地址：yourGithubId.github.io</p>\n<h3 id=\"2-3-主题使用\"><a href=\"#2-3-主题使用\" class=\"headerlink\" title=\"2.3 主题使用\"></a>2.3 主题使用</h3><p>好的博客需要一个好看的主题（楼主使用的是Next主题，<strong>关于标签和分类的index.html文件生成问题</strong>需要<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">参考</a>   ），<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">主题地址</a>,如何装饰呢？</p>\n<p>点击相关主题，找到此主题相关的github地址，举例：某主题地址是<br><a href=\"https://github.com/levblanc/hexo-theme-aero-dual\" target=\"_blank\" rel=\"external\">https://github.com/levblanc/hexo-theme-aero-dual</a><br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/levblanc/hexo-theme-aero-dual.git themes/aero-dual</div></pre></td></tr></table></figure></p>\n<p>clone 主题项目到你的博客的themes目录下，便安装完成。<br>更改你博客的目录下的  _config.yml 文件中theme的值为aero-dual；然后hexo server 查看是否已经装饰上主题。</p>\n","excerpt":"","more":"<p>近来发现一种很方便的搭建个人博客的方法，不需要云服务器，使用<strong>hexo</strong>+<strong>github</strong>实现，完全免费，效果还不错。此站是博主搭建出来的效果。</p>\n<h2 id=\"1-准备GitHub\"><a href=\"#1-准备GitHub\" class=\"headerlink\" title=\"1.准备GitHub\"></a>1.准备GitHub</h2><h3 id=\"1-1-新建gitbub库\"><a href=\"#1-1-新建gitbub库\" class=\"headerlink\" title=\"1.1 新建gitbub库\"></a>1.1 新建gitbub库</h3><p>如果没有，去<a href=\"https://github.com\">github</a>申请一个；然后新建一个Repository,名字为yourname.github.io; </p>\n<h3 id=\"1-2-clone-gitbub库\"><a href=\"#1-2-clone-gitbub库\" class=\"headerlink\" title=\"1.2 clone gitbub库\"></a>1.2 clone gitbub库</h3><p>clone 到本地机器<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/yourId/yourname.github.io.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-hexo使用\"><a href=\"#2-hexo使用\" class=\"headerlink\" title=\"2.hexo使用\"></a>2.hexo使用</h2><h3 id=\"2-1-hexo-安装\"><a href=\"#2-1-hexo-安装\" class=\"headerlink\" title=\"2.1 hexo 安装\"></a>2.1 hexo 安装</h3><p>使用前提，本机已经安装git 和 nodejs<br><a href=\"https://hexo.io/docs/\">教程参见</a></p>\n<h3 id=\"2-2-生成博客\"><a href=\"#2-2-生成博客\" class=\"headerlink\" title=\"2.2 生成博客\"></a>2.2 生成博客</h3><ul>\n<li><p>初始化目录</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>hexo init &lt;folder&gt;</div><div class=\"line\"><span class=\"variable\">$ </span>cd &lt;folder&gt;</div><div class=\"line\"><span class=\"variable\">$ </span>npm install</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建文档</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo <span class=\"keyword\">new</span> [layout] &lt;<span class=\"built_in\">title</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>默认使用post，存放位置为：~/你的文档根目录/source/_posts</td>\n</tr>\n<tr>\n<td>title</td>\n<td>文档名</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>编辑文档<br>文档编辑，编辑使用<a href=\"http://wowubuntu.com/markdown/\">markdown</a>语法,不赘述；<br>需要注意，front-master一般采用这种格式：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"attr\">title:</span> mvn tutorial</div><div class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"bullet\">-02</span><span class=\"bullet\">-13</span> <span class=\"number\">13</span>:<span class=\"number\">22</span>:<span class=\"number\">33</span></div><div class=\"line\"><span class=\"attr\">tags:</span> </div><div class=\"line\"><span class=\"bullet\">-</span> maven </div><div class=\"line\"><span class=\"bullet\">-</span> learn</div><div class=\"line\"><span class=\"attr\">categories:</span></div><div class=\"line\"><span class=\"bullet\">-</span> tools</div><div class=\"line\"><span class=\"meta\">---</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tags</td>\n<td>标签</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>文档分类</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>生成网站</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo <span class=\"keyword\">generate</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>部署网站</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>hexo deploy</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>==注意：==<br>部署前设置部署方式和目标url;<br>部署之前可以使用命令：<strong>hexo server</strong> 本地运行看一下。<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">deploy:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> git</div><div class=\"line\"><span class=\"symbol\">  repo:</span> <span class=\"params\">&lt;repository url&gt;</span></div><div class=\"line\"><span class=\"symbol\">  branch:</span> [branch]</div><div class=\"line\"><span class=\"symbol\">  message:</span> [message]</div></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>repo</td>\n<td>库（Repository）地址</td>\n</tr>\n<tr>\n<td>branch</td>\n<td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td>\n</tr>\n<tr>\n<td>message</td>\n<td>自定义提交信息 (默认为 update+提交时间)</td>\n</tr>\n</tbody>\n</table>\n<p>至此完成，你可以访问自己的github.io地址：yourGithubId.github.io</p>\n<h3 id=\"2-3-主题使用\"><a href=\"#2-3-主题使用\" class=\"headerlink\" title=\"2.3 主题使用\"></a>2.3 主题使用</h3><p>好的博客需要一个好看的主题（楼主使用的是Next主题，<strong>关于标签和分类的index.html文件生成问题</strong>需要<a href=\"http://theme-next.iissnan.com/theme-settings.html\">参考</a>   ），<a href=\"https://hexo.io/themes/\">主题地址</a>,如何装饰呢？</p>\n<p>点击相关主题，找到此主题相关的github地址，举例：某主题地址是<br><a href=\"https://github.com/levblanc/hexo-theme-aero-dual\">https://github.com/levblanc/hexo-theme-aero-dual</a><br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/levblanc/hexo-theme-aero-dual.git themes/aero-dual</div></pre></td></tr></table></figure></p>\n<p>clone 主题项目到你的博客的themes目录下，便安装完成。<br>更改你博客的目录下的  _config.yml 文件中theme的值为aero-dual；然后hexo server 查看是否已经装饰上主题。</p>\n"},{"title":"ELK 本地环境搭建","date":"2017-03-27T08:42:47.000Z","_content":"### 什么是ELK\nELK 其实并不是一款软件，而是一整套解决方案，是三个软件产品的首字母缩写，Elasticsearch，Logstash 和 Kibana。这三款软件都是开源软件，通常是配合使用，而且又先后归于 Elastic.co 公司名下，故被简称为 ELK 协议栈;\n\n日志主要包括系统日志、应用程序日志和安全日志。系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因。经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误  \n开源实时日志分析ELK平台能够完美的解决我们上述的问题，ELK由ElasticSearch、Logstash和Kiabana三个开源工具组成。官方网站： https://www.elastic.co/products\n\nElasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。\nLogstash是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。\nKibana 也是一个开源和免费的工具，它Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。\n\n关于此三者的介绍可以从参考IBM社区的文章：https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/\n介绍的算是比较具体了。\n\n笔者使用的系统是Mac OSX，版本选择是**elasticsearch-5.0.0**   +    **kibana-5.0.0-darwin-x86_64**   +   **logstash-5.2.2**\n\n### Elasticsearch Install\ndownload from  https://www.elastic.co/start\n\n下载->解压->修改config->运行测试\n\n```\n mv ~/Downloads/elasticsearch-5.0.0.tar.gz yourfolder\n\ntar -xzvf elasticsearch-5.0.0.tar.gz -C elk\n\ncd elk/elasticsearch-5.0.0/config\n\nvi  elasticsearch.yml\n\n```\n找到并修改此行：\nnetwork.host: localhost\n\n- 启动：\n\n```\ncd ../bin\n./elasticsearch\n```\n- 测试：\n\n```\ncurl 'localhost:9200/'\n{\n  \"name\" : \"rioHP-U\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"R-H7YYg_QLGO4zGmuKWnlA\",\n  \"version\" : {\n    \"number\" : \"5.0.0\",\n    \"build_hash\" : \"253032b\",\n    \"build_date\" : \"2016-10-26T04:37:51.531Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"6.2.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n此时，表示你的elasticsearch已经配置成功了。\n\n### Kibana install\ndownload from  https://www.elastic.co/start\n\n下载->解压->修改config->运行\n\n```\nmv ~/Downloads/kibana-5.0.0-darwin-x86_64.tar.gz yourfolder\n\ntar -xzvf kibana-5.0.0-darwin-x86_64.tar.gz -C elk\n\ncd elk/kibana-5.0.0-darwin-x86_64/config\n\nvi kibana.yml\n\n```\n更改 elasticsearch.url，指向你的Elasticsearch cluster的url,如果是本地，一般直接去掉注释符#即可\n\n```\n# elasticsearch.url: \"http://localhost:9200\"\n```\n- 启动\n\n```\ncd ../bin\n./kibana\n\n  log   [03:09:44.945] [info][listening] Server running at http://localhost:5601\n  log   [03:09:44.946] [info][status][ui settings] Status changed from uninitialized to yellow - Elasticsearch plugin is yellow\n  log   [03:09:49.957] [info][status][plugin:elasticsearch@5.0.0] Status changed from yellow to yellow - No existing Kibana index found\n  log   [03:09:50.648] [info][status][plugin:elasticsearch@5.0.0] Status changed from yellow to green - Kibana index ready\n  log   [03:09:50.648] [info][status][ui settings] Status changed from yellow to green - Ready\n  \n```\n\n此时，表示你的kibana已经启动成功了。\n\n可以打开http://localhost:5601； 查看一下\n\n### Logstash install\n\ndownload from  https://www.elastic.co/products\n\n下载->解压\n\n```\nmv ~/Downloads/logstash-5.2.2.tar.gz yourfolder\n\ntar -xzvf logstash-5.2.2.tar.gz -C elk\n\n```\n在对应的bin/目录创建一个配置文件logstash-simple.conf\n\n```\ntouch logstash-simple.conf\n```\n更改文件内容：\n```\ninput { stdin { } }\noutput {\n  elasticsearch { hosts => [\"localhost:9200\"] }\n  stdout { codec => rubydebug }\n}\n```\n运行logstash,-f 指定你的配置文件\n\n```\n./logstash -f logstash-simple.conf\n\n[2017-03-27T11:20:18,711][INFO ][logstash.pipeline        ] Pipeline main started\nThe stdin plugin is now waiting for input:\n```\n管道启动成功，等待用户输入，从 hello world 开始：\n```\nhello world\n{\n    \"@timestamp\" => 2017-03-27T03:23:35.374Z,\n      \"@version\" => \"1\",\n          \"host\" => \"Olivers-iMac.local\",\n       \"message\" => \"hello world\"\n}\n```\n此时在kibana中刷新一下，即可看到相关日志，见下图\n{% asset_img kibana.png kibana %}\n\n","source":"_posts/elk-mac.md","raw":"---\ntitle: ELK 本地环境搭建\ndate: 2017-03-27 16:42:47\ntags:\n- elasticsearch\n- kabana\n- logstash\ncategories:\n- tools\t\n---\n### 什么是ELK\nELK 其实并不是一款软件，而是一整套解决方案，是三个软件产品的首字母缩写，Elasticsearch，Logstash 和 Kibana。这三款软件都是开源软件，通常是配合使用，而且又先后归于 Elastic.co 公司名下，故被简称为 ELK 协议栈;\n\n日志主要包括系统日志、应用程序日志和安全日志。系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因。经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误  \n开源实时日志分析ELK平台能够完美的解决我们上述的问题，ELK由ElasticSearch、Logstash和Kiabana三个开源工具组成。官方网站： https://www.elastic.co/products\n\nElasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。\nLogstash是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。\nKibana 也是一个开源和免费的工具，它Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。\n\n关于此三者的介绍可以从参考IBM社区的文章：https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/\n介绍的算是比较具体了。\n\n笔者使用的系统是Mac OSX，版本选择是**elasticsearch-5.0.0**   +    **kibana-5.0.0-darwin-x86_64**   +   **logstash-5.2.2**\n\n### Elasticsearch Install\ndownload from  https://www.elastic.co/start\n\n下载->解压->修改config->运行测试\n\n```\n mv ~/Downloads/elasticsearch-5.0.0.tar.gz yourfolder\n\ntar -xzvf elasticsearch-5.0.0.tar.gz -C elk\n\ncd elk/elasticsearch-5.0.0/config\n\nvi  elasticsearch.yml\n\n```\n找到并修改此行：\nnetwork.host: localhost\n\n- 启动：\n\n```\ncd ../bin\n./elasticsearch\n```\n- 测试：\n\n```\ncurl 'localhost:9200/'\n{\n  \"name\" : \"rioHP-U\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"R-H7YYg_QLGO4zGmuKWnlA\",\n  \"version\" : {\n    \"number\" : \"5.0.0\",\n    \"build_hash\" : \"253032b\",\n    \"build_date\" : \"2016-10-26T04:37:51.531Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"6.2.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n此时，表示你的elasticsearch已经配置成功了。\n\n### Kibana install\ndownload from  https://www.elastic.co/start\n\n下载->解压->修改config->运行\n\n```\nmv ~/Downloads/kibana-5.0.0-darwin-x86_64.tar.gz yourfolder\n\ntar -xzvf kibana-5.0.0-darwin-x86_64.tar.gz -C elk\n\ncd elk/kibana-5.0.0-darwin-x86_64/config\n\nvi kibana.yml\n\n```\n更改 elasticsearch.url，指向你的Elasticsearch cluster的url,如果是本地，一般直接去掉注释符#即可\n\n```\n# elasticsearch.url: \"http://localhost:9200\"\n```\n- 启动\n\n```\ncd ../bin\n./kibana\n\n  log   [03:09:44.945] [info][listening] Server running at http://localhost:5601\n  log   [03:09:44.946] [info][status][ui settings] Status changed from uninitialized to yellow - Elasticsearch plugin is yellow\n  log   [03:09:49.957] [info][status][plugin:elasticsearch@5.0.0] Status changed from yellow to yellow - No existing Kibana index found\n  log   [03:09:50.648] [info][status][plugin:elasticsearch@5.0.0] Status changed from yellow to green - Kibana index ready\n  log   [03:09:50.648] [info][status][ui settings] Status changed from yellow to green - Ready\n  \n```\n\n此时，表示你的kibana已经启动成功了。\n\n可以打开http://localhost:5601； 查看一下\n\n### Logstash install\n\ndownload from  https://www.elastic.co/products\n\n下载->解压\n\n```\nmv ~/Downloads/logstash-5.2.2.tar.gz yourfolder\n\ntar -xzvf logstash-5.2.2.tar.gz -C elk\n\n```\n在对应的bin/目录创建一个配置文件logstash-simple.conf\n\n```\ntouch logstash-simple.conf\n```\n更改文件内容：\n```\ninput { stdin { } }\noutput {\n  elasticsearch { hosts => [\"localhost:9200\"] }\n  stdout { codec => rubydebug }\n}\n```\n运行logstash,-f 指定你的配置文件\n\n```\n./logstash -f logstash-simple.conf\n\n[2017-03-27T11:20:18,711][INFO ][logstash.pipeline        ] Pipeline main started\nThe stdin plugin is now waiting for input:\n```\n管道启动成功，等待用户输入，从 hello world 开始：\n```\nhello world\n{\n    \"@timestamp\" => 2017-03-27T03:23:35.374Z,\n      \"@version\" => \"1\",\n          \"host\" => \"Olivers-iMac.local\",\n       \"message\" => \"hello world\"\n}\n```\n此时在kibana中刷新一下，即可看到相关日志，见下图\n{% asset_img kibana.png kibana %}\n\n","slug":"elk-mac","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7mt0008t8dm8v9hfmwa","content":"<h3 id=\"什么是ELK\"><a href=\"#什么是ELK\" class=\"headerlink\" title=\"什么是ELK\"></a>什么是ELK</h3><p>ELK 其实并不是一款软件，而是一整套解决方案，是三个软件产品的首字母缩写，Elasticsearch，Logstash 和 Kibana。这三款软件都是开源软件，通常是配合使用，而且又先后归于 Elastic.co 公司名下，故被简称为 ELK 协议栈;</p>\n<p>日志主要包括系统日志、应用程序日志和安全日志。系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因。经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误<br>开源实时日志分析ELK平台能够完美的解决我们上述的问题，ELK由ElasticSearch、Logstash和Kiabana三个开源工具组成。官方网站： <a href=\"https://www.elastic.co/products\" target=\"_blank\" rel=\"external\">https://www.elastic.co/products</a></p>\n<p>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。<br>Logstash是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。<br>Kibana 也是一个开源和免费的工具，它Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。</p>\n<p>关于此三者的介绍可以从参考IBM社区的文章：<a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/\" target=\"_blank\" rel=\"external\">https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/</a><br>介绍的算是比较具体了。</p>\n<p>笔者使用的系统是Mac OSX，版本选择是<strong>elasticsearch-5.0.0</strong>   +    <strong>kibana-5.0.0-darwin-x86_64</strong>   +   <strong>logstash-5.2.2</strong></p>\n<h3 id=\"Elasticsearch-Install\"><a href=\"#Elasticsearch-Install\" class=\"headerlink\" title=\"Elasticsearch Install\"></a>Elasticsearch Install</h3><p>download from  <a href=\"https://www.elastic.co/start\" target=\"_blank\" rel=\"external\">https://www.elastic.co/start</a></p>\n<p>下载-&gt;解压-&gt;修改config-&gt;运行测试</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> mv ~/Downloads/elasticsearch<span class=\"number\">-5.0</span><span class=\"number\">.0</span>.tar.gz yourfolder</div><div class=\"line\"></div><div class=\"line\">tar -xzvf elasticsearch<span class=\"number\">-5.0</span><span class=\"number\">.0</span>.tar.gz -C elk</div><div class=\"line\"></div><div class=\"line\">cd elk/elasticsearch<span class=\"number\">-5.0</span><span class=\"number\">.0</span>/config</div><div class=\"line\"></div><div class=\"line\">vi  elasticsearch.yml</div></pre></td></tr></table></figure>\n<p>找到并修改此行：<br>network.host: localhost</p>\n<ul>\n<li>启动：</li>\n</ul>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">cd</span></span> ../bin</div><div class=\"line\">./elasticsearch</div></pre></td></tr></table></figure>\n<ul>\n<li>测试：</li>\n</ul>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">'localhost:9200/'</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span> : <span class=\"string\">\"rioHP-U\"</span>,</div><div class=\"line\">  <span class=\"string\">\"cluster_name\"</span> : <span class=\"string\">\"elasticsearch\"</span>,</div><div class=\"line\">  <span class=\"string\">\"cluster_uuid\"</span> : <span class=\"string\">\"R-H7YYg_QLGO4zGmuKWnlA\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span> : &#123;</div><div class=\"line\">    <span class=\"string\">\"number\"</span> : <span class=\"string\">\"5.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build_hash\"</span> : <span class=\"string\">\"253032b\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build_date\"</span> : <span class=\"string\">\"2016-10-26T04:37:51.531Z\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build_snapshot\"</span> : false,</div><div class=\"line\">    <span class=\"string\">\"lucene_version\"</span> : <span class=\"string\">\"6.2.0\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"tagline\"</span> : <span class=\"string\">\"You Know, for Search\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时，表示你的elasticsearch已经配置成功了。</p>\n<h3 id=\"Kibana-install\"><a href=\"#Kibana-install\" class=\"headerlink\" title=\"Kibana install\"></a>Kibana install</h3><p>download from  <a href=\"https://www.elastic.co/start\" target=\"_blank\" rel=\"external\">https://www.elastic.co/start</a></p>\n<p>下载-&gt;解压-&gt;修改config-&gt;运行</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv ~/Downloads/kibana<span class=\"number\">-5.0</span><span class=\"number\">.0</span>-darwin-x86_64.tar.gz yourfolder</div><div class=\"line\"></div><div class=\"line\">tar -xzvf kibana<span class=\"number\">-5.0</span><span class=\"number\">.0</span>-darwin-x86_64.tar.gz -C elk</div><div class=\"line\"></div><div class=\"line\">cd elk/kibana<span class=\"number\">-5.0</span><span class=\"number\">.0</span>-darwin-x86_64/config</div><div class=\"line\"></div><div class=\"line\">vi kibana.yml</div></pre></td></tr></table></figure>\n<p>更改 elasticsearch.url，指向你的Elasticsearch cluster的url,如果是本地，一般直接去掉注释符#即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># elasticsearch.url: <span class=\"meta-string\">\"http://localhost:9200\"</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>启动</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ../bin</div><div class=\"line\">./kibana</div><div class=\"line\"></div><div class=\"line\">  log   [<span class=\"string\">03:09:44.945</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">listening</span>] Server running at http://localhost:5601</div><div class=\"line\">  log   [<span class=\"string\">03:09:44.946</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">status</span>][<span class=\"string\">ui settings</span>] Status changed from uninitialized to yellow - Elasticsearch plugin is yellow</div><div class=\"line\">  log   [<span class=\"string\">03:09:49.957</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">status</span>][<span class=\"string\">plugin:elasticsearch@5.0.0</span>] Status changed from yellow to yellow - No existing Kibana index found</div><div class=\"line\">  log   [<span class=\"string\">03:09:50.648</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">status</span>][<span class=\"string\">plugin:elasticsearch@5.0.0</span>] Status changed from yellow to green - Kibana index ready</div><div class=\"line\">  log   [<span class=\"string\">03:09:50.648</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">status</span>][<span class=\"string\">ui settings</span>] Status changed from yellow to green - Ready</div></pre></td></tr></table></figure>\n<p>此时，表示你的kibana已经启动成功了。</p>\n<p>可以打开<a href=\"http://localhost:5601；\" target=\"_blank\" rel=\"external\">http://localhost:5601；</a> 查看一下</p>\n<h3 id=\"Logstash-install\"><a href=\"#Logstash-install\" class=\"headerlink\" title=\"Logstash install\"></a>Logstash install</h3><p>download from  <a href=\"https://www.elastic.co/products\" target=\"_blank\" rel=\"external\">https://www.elastic.co/products</a></p>\n<p>下载-&gt;解压</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv ~/Downloads/logstash-<span class=\"number\">5.2</span>.<span class=\"number\">2</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span> yourfolder</div><div class=\"line\"></div><div class=\"line\">tar -xzvf logstash-<span class=\"number\">5.2</span>.<span class=\"number\">2</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span> -C elk</div></pre></td></tr></table></figure>\n<p>在对应的bin/目录创建一个配置文件logstash-simple.conf</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch logstash-<span class=\"built_in\">simple</span>.conf</div></pre></td></tr></table></figure>\n<p>更改文件内容：<br><figure class=\"highlight puppet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">input</span> &#123; stdin &#123; &#125; &#125;</div><div class=\"line\"><span class=\"keyword\">output</span> &#123;</div><div class=\"line\">  elasticsearch &#123; <span class=\"attr\">hosts</span> =&gt; [<span class=\"string\">\"localhost:9200\"</span>] &#125;</div><div class=\"line\">  <span class=\"keyword\">stdout</span> &#123; <span class=\"attr\">codec</span> =&gt; rubydebug &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行logstash,-f 指定你的配置文件</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">./logstash -f logstash-simple.conf</div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">2017-03-27T11:20:18,711</span>][<span class=\"symbol\">INFO </span>][<span class=\"string\">logstash.pipeline        </span>] Pipeline main started</div><div class=\"line\">The stdin plugin is now waiting for input:</div></pre></td></tr></table></figure>\n<p>管道启动成功，等待用户输入，从 hello world 开始：<br><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello world</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"@timestamp\"</span> =&gt; <span class=\"number\">2017</span><span class=\"number\">-03</span><span class=\"number\">-27</span>T03:<span class=\"number\">23</span>:<span class=\"number\">35.374</span>Z,</div><div class=\"line\">      <span class=\"string\">\"@version\"</span> =&gt; <span class=\"string\">\"1\"</span>,</div><div class=\"line\">          <span class=\"string\">\"host\"</span> =&gt; <span class=\"string\">\"Olivers-iMac.local\"</span>,</div><div class=\"line\">       <span class=\"string\">\"message\"</span> =&gt; <span class=\"string\">\"hello world\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时在kibana中刷新一下，即可看到相关日志，见下图<br><img src=\"/2017/03/27/elk-mac/kibana.png\" alt=\"kibana\" title=\"kibana\"></p>\n","excerpt":"","more":"<h3 id=\"什么是ELK\"><a href=\"#什么是ELK\" class=\"headerlink\" title=\"什么是ELK\"></a>什么是ELK</h3><p>ELK 其实并不是一款软件，而是一整套解决方案，是三个软件产品的首字母缩写，Elasticsearch，Logstash 和 Kibana。这三款软件都是开源软件，通常是配合使用，而且又先后归于 Elastic.co 公司名下，故被简称为 ELK 协议栈;</p>\n<p>日志主要包括系统日志、应用程序日志和安全日志。系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因。经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误<br>开源实时日志分析ELK平台能够完美的解决我们上述的问题，ELK由ElasticSearch、Logstash和Kiabana三个开源工具组成。官方网站： <a href=\"https://www.elastic.co/products\">https://www.elastic.co/products</a></p>\n<p>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。<br>Logstash是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。<br>Kibana 也是一个开源和免费的工具，它Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。</p>\n<p>关于此三者的介绍可以从参考IBM社区的文章：<a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/\">https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/</a><br>介绍的算是比较具体了。</p>\n<p>笔者使用的系统是Mac OSX，版本选择是<strong>elasticsearch-5.0.0</strong>   +    <strong>kibana-5.0.0-darwin-x86_64</strong>   +   <strong>logstash-5.2.2</strong></p>\n<h3 id=\"Elasticsearch-Install\"><a href=\"#Elasticsearch-Install\" class=\"headerlink\" title=\"Elasticsearch Install\"></a>Elasticsearch Install</h3><p>download from  <a href=\"https://www.elastic.co/start\">https://www.elastic.co/start</a></p>\n<p>下载-&gt;解压-&gt;修改config-&gt;运行测试</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> mv ~/Downloads/elasticsearch<span class=\"number\">-5.0</span><span class=\"number\">.0</span>.tar.gz yourfolder</div><div class=\"line\"></div><div class=\"line\">tar -xzvf elasticsearch<span class=\"number\">-5.0</span><span class=\"number\">.0</span>.tar.gz -C elk</div><div class=\"line\"></div><div class=\"line\">cd elk/elasticsearch<span class=\"number\">-5.0</span><span class=\"number\">.0</span>/config</div><div class=\"line\"></div><div class=\"line\">vi  elasticsearch.yml</div></pre></td></tr></table></figure>\n<p>找到并修改此行：<br>network.host: localhost</p>\n<ul>\n<li>启动：</li>\n</ul>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">cd</span></span> ../bin</div><div class=\"line\">./elasticsearch</div></pre></td></tr></table></figure>\n<ul>\n<li>测试：</li>\n</ul>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">'localhost:9200/'</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span> : <span class=\"string\">\"rioHP-U\"</span>,</div><div class=\"line\">  <span class=\"string\">\"cluster_name\"</span> : <span class=\"string\">\"elasticsearch\"</span>,</div><div class=\"line\">  <span class=\"string\">\"cluster_uuid\"</span> : <span class=\"string\">\"R-H7YYg_QLGO4zGmuKWnlA\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span> : &#123;</div><div class=\"line\">    <span class=\"string\">\"number\"</span> : <span class=\"string\">\"5.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build_hash\"</span> : <span class=\"string\">\"253032b\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build_date\"</span> : <span class=\"string\">\"2016-10-26T04:37:51.531Z\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build_snapshot\"</span> : false,</div><div class=\"line\">    <span class=\"string\">\"lucene_version\"</span> : <span class=\"string\">\"6.2.0\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"tagline\"</span> : <span class=\"string\">\"You Know, for Search\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时，表示你的elasticsearch已经配置成功了。</p>\n<h3 id=\"Kibana-install\"><a href=\"#Kibana-install\" class=\"headerlink\" title=\"Kibana install\"></a>Kibana install</h3><p>download from  <a href=\"https://www.elastic.co/start\">https://www.elastic.co/start</a></p>\n<p>下载-&gt;解压-&gt;修改config-&gt;运行</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv ~/Downloads/kibana<span class=\"number\">-5.0</span><span class=\"number\">.0</span>-darwin-x86_64.tar.gz yourfolder</div><div class=\"line\"></div><div class=\"line\">tar -xzvf kibana<span class=\"number\">-5.0</span><span class=\"number\">.0</span>-darwin-x86_64.tar.gz -C elk</div><div class=\"line\"></div><div class=\"line\">cd elk/kibana<span class=\"number\">-5.0</span><span class=\"number\">.0</span>-darwin-x86_64/config</div><div class=\"line\"></div><div class=\"line\">vi kibana.yml</div></pre></td></tr></table></figure>\n<p>更改 elasticsearch.url，指向你的Elasticsearch cluster的url,如果是本地，一般直接去掉注释符#即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># elasticsearch.url: <span class=\"meta-string\">\"http://localhost:9200\"</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>启动</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ../bin</div><div class=\"line\">./kibana</div><div class=\"line\"></div><div class=\"line\">  log   [<span class=\"string\">03:09:44.945</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">listening</span>] Server running at http://localhost:5601</div><div class=\"line\">  log   [<span class=\"string\">03:09:44.946</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">status</span>][<span class=\"string\">ui settings</span>] Status changed from uninitialized to yellow - Elasticsearch plugin is yellow</div><div class=\"line\">  log   [<span class=\"string\">03:09:49.957</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">status</span>][<span class=\"string\">plugin:elasticsearch@5.0.0</span>] Status changed from yellow to yellow - No existing Kibana index found</div><div class=\"line\">  log   [<span class=\"string\">03:09:50.648</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">status</span>][<span class=\"string\">plugin:elasticsearch@5.0.0</span>] Status changed from yellow to green - Kibana index ready</div><div class=\"line\">  log   [<span class=\"string\">03:09:50.648</span>] [<span class=\"string\">info</span>][<span class=\"symbol\">status</span>][<span class=\"string\">ui settings</span>] Status changed from yellow to green - Ready</div></pre></td></tr></table></figure>\n<p>此时，表示你的kibana已经启动成功了。</p>\n<p>可以打开<a href=\"http://localhost:5601；\">http://localhost:5601；</a> 查看一下</p>\n<h3 id=\"Logstash-install\"><a href=\"#Logstash-install\" class=\"headerlink\" title=\"Logstash install\"></a>Logstash install</h3><p>download from  <a href=\"https://www.elastic.co/products\">https://www.elastic.co/products</a></p>\n<p>下载-&gt;解压</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv ~/Downloads/logstash-<span class=\"number\">5.2</span>.<span class=\"number\">2</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span> yourfolder</div><div class=\"line\"></div><div class=\"line\">tar -xzvf logstash-<span class=\"number\">5.2</span>.<span class=\"number\">2</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span> -C elk</div></pre></td></tr></table></figure>\n<p>在对应的bin/目录创建一个配置文件logstash-simple.conf</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch logstash-<span class=\"built_in\">simple</span>.conf</div></pre></td></tr></table></figure>\n<p>更改文件内容：<br><figure class=\"highlight puppet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">input</span> &#123; stdin &#123; &#125; &#125;</div><div class=\"line\"><span class=\"keyword\">output</span> &#123;</div><div class=\"line\">  elasticsearch &#123; <span class=\"attr\">hosts</span> =&gt; [<span class=\"string\">\"localhost:9200\"</span>] &#125;</div><div class=\"line\">  <span class=\"keyword\">stdout</span> &#123; <span class=\"attr\">codec</span> =&gt; rubydebug &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行logstash,-f 指定你的配置文件</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">./logstash -f logstash-simple.conf</div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">2017-03-27T11:20:18,711</span>][<span class=\"symbol\">INFO </span>][<span class=\"string\">logstash.pipeline        </span>] Pipeline main started</div><div class=\"line\">The stdin plugin is now waiting for input:</div></pre></td></tr></table></figure>\n<p>管道启动成功，等待用户输入，从 hello world 开始：<br><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello world</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"@timestamp\"</span> =&gt; <span class=\"number\">2017</span><span class=\"number\">-03</span><span class=\"number\">-27</span>T03:<span class=\"number\">23</span>:<span class=\"number\">35.374</span>Z,</div><div class=\"line\">      <span class=\"string\">\"@version\"</span> =&gt; <span class=\"string\">\"1\"</span>,</div><div class=\"line\">          <span class=\"string\">\"host\"</span> =&gt; <span class=\"string\">\"Olivers-iMac.local\"</span>,</div><div class=\"line\">       <span class=\"string\">\"message\"</span> =&gt; <span class=\"string\">\"hello world\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时在kibana中刷新一下，即可看到相关日志，见下图<br><img src=\"/2017/03/27/elk-mac/kibana.png\" alt=\"kibana\" title=\"kibana\"></p>\n"},{"title":"Hexo 图片引用解决方案","date":"2017-02-17T05:08:56.000Z","_content":"\n\n记录几种hexo使用图片的方式：\n## 传统方式\n采用html标签方式引用：\n```\n<img src=\"/2016/3/9/本地图片测试/logo.jpg\" alt=\"logo\">\n```\n或者使用markdown语法：\n```\n![image](/img/imageName.png)\n```\n## hexo 标签方式\n1.首先确认_config.yml 中有 post_asset_folder:true。  \nHexo 提供了一种更方便管理 Asset 的设定：post_asset_folder\n当您设置post_asset_folder为true参数后，在建立文件时，Hexo\n会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，可以更方便的使用资源。\n\n```\n{% asset_img test.png image_title %}\n```\nasset_img 表示要引用图片, test.png是资源名称, 后面的是图片显示的标题\n\n然后执行 **hexo generate** (或者hexo g)  \n就会将资源拷贝到和生成的文章相同的目录下,这样就可以了.在本地查看会显示不正常,但是部署到github上就显示正常了.\n\n## 插件推荐\n回到hexo的主目录下执行\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。\n```\n本地图片测试\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg\n本地图片测试.md\n```\n这样的目录结构（目录名和文章名一致），只要使用\n```\n![logo](本地图片测试/logo.jpg)\n```\n就可以插入图片。其中[]里面写相关图片标题。","source":"_posts/hexo-image.md","raw":"---\ntitle: Hexo 图片引用解决方案\ndate: 2017-02-17 13:08:56\ntags: \n- 图片引用\n- tags\n- plugin\n- hexo\ncategories: \n- tools\n---\n\n\n记录几种hexo使用图片的方式：\n## 传统方式\n采用html标签方式引用：\n```\n<img src=\"/2016/3/9/本地图片测试/logo.jpg\" alt=\"logo\">\n```\n或者使用markdown语法：\n```\n![image](/img/imageName.png)\n```\n## hexo 标签方式\n1.首先确认_config.yml 中有 post_asset_folder:true。  \nHexo 提供了一种更方便管理 Asset 的设定：post_asset_folder\n当您设置post_asset_folder为true参数后，在建立文件时，Hexo\n会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，可以更方便的使用资源。\n\n```\n{% asset_img test.png image_title %}\n```\nasset_img 表示要引用图片, test.png是资源名称, 后面的是图片显示的标题\n\n然后执行 **hexo generate** (或者hexo g)  \n就会将资源拷贝到和生成的文章相同的目录下,这样就可以了.在本地查看会显示不正常,但是部署到github上就显示正常了.\n\n## 插件推荐\n回到hexo的主目录下执行\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。\n```\n本地图片测试\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg\n本地图片测试.md\n```\n这样的目录结构（目录名和文章名一致），只要使用\n```\n![logo](本地图片测试/logo.jpg)\n```\n就可以插入图片。其中[]里面写相关图片标题。","slug":"hexo-image","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7mv0009t8dmg1kzham3","content":"<p>记录几种hexo使用图片的方式：</p>\n<h2 id=\"传统方式\"><a href=\"#传统方式\" class=\"headerlink\" title=\"传统方式\"></a>传统方式</h2><p>采用html标签方式引用：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">img</span> src=<span class=\"string\">\"/2016/3/9/本地图片测试/logo.jpg\"</span> alt=<span class=\"string\">\"logo\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>或者使用markdown语法：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">image</span>](<span class=\"link\">/img/imageName.png</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"hexo-标签方式\"><a href=\"#hexo-标签方式\" class=\"headerlink\" title=\"hexo 标签方式\"></a>hexo 标签方式</h2><p>1.首先确认_config.yml 中有 post_asset_folder:true。<br>Hexo 提供了一种更方便管理 Asset 的设定：post_asset_folder<br>当您设置post_asset_folder为true参数后，在建立文件时，Hexo<br>会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，可以更方便的使用资源。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">asset_img</span> test.png image_title %&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>asset_img 表示要引用图片, test.png是资源名称, 后面的是图片显示的标题</p>\n<p>然后执行 <strong>hexo generate</strong> (或者hexo g)<br>就会将资源拷贝到和生成的文章相同的目录下,这样就可以了.在本地查看会显示不正常,但是部署到github上就显示正常了.</p>\n<h2 id=\"插件推荐\"><a href=\"#插件推荐\" class=\"headerlink\" title=\"插件推荐\"></a>插件推荐</h2><p>回到hexo的主目录下执行<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/CodeFalling/</span>hexo-asset-image --save</div></pre></td></tr></table></figure></p>\n<p>完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">本地图片测试</div><div class=\"line\">├── apppicker<span class=\"selector-class\">.jpg</span></div><div class=\"line\">├── logo<span class=\"selector-class\">.jpg</span></div><div class=\"line\">└── rules<span class=\"selector-class\">.jpg</span></div><div class=\"line\">本地图片测试.md</div></pre></td></tr></table></figure></p>\n<p>这样的目录结构（目录名和文章名一致），只要使用<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">logo</span>](<span class=\"link\">本地图片测试/logo.jpg</span>)</div></pre></td></tr></table></figure></p>\n<p>就可以插入图片。其中[]里面写相关图片标题。</p>\n","excerpt":"","more":"<p>记录几种hexo使用图片的方式：</p>\n<h2 id=\"传统方式\"><a href=\"#传统方式\" class=\"headerlink\" title=\"传统方式\"></a>传统方式</h2><p>采用html标签方式引用：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">img</span> src=<span class=\"string\">\"/2016/3/9/本地图片测试/logo.jpg\"</span> alt=<span class=\"string\">\"logo\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>或者使用markdown语法：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">image</span>](<span class=\"link\">/img/imageName.png</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"hexo-标签方式\"><a href=\"#hexo-标签方式\" class=\"headerlink\" title=\"hexo 标签方式\"></a>hexo 标签方式</h2><p>1.首先确认_config.yml 中有 post_asset_folder:true。<br>Hexo 提供了一种更方便管理 Asset 的设定：post_asset_folder<br>当您设置post_asset_folder为true参数后，在建立文件时，Hexo<br>会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，可以更方便的使用资源。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">asset_img</span> test.png image_title %&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure>\n<p>asset_img 表示要引用图片, test.png是资源名称, 后面的是图片显示的标题</p>\n<p>然后执行 <strong>hexo generate</strong> (或者hexo g)<br>就会将资源拷贝到和生成的文章相同的目录下,这样就可以了.在本地查看会显示不正常,但是部署到github上就显示正常了.</p>\n<h2 id=\"插件推荐\"><a href=\"#插件推荐\" class=\"headerlink\" title=\"插件推荐\"></a>插件推荐</h2><p>回到hexo的主目录下执行<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/CodeFalling/</span>hexo-asset-image --save</div></pre></td></tr></table></figure></p>\n<p>完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">本地图片测试</div><div class=\"line\">├── apppicker<span class=\"selector-class\">.jpg</span></div><div class=\"line\">├── logo<span class=\"selector-class\">.jpg</span></div><div class=\"line\">└── rules<span class=\"selector-class\">.jpg</span></div><div class=\"line\">本地图片测试.md</div></pre></td></tr></table></figure></p>\n<p>这样的目录结构（目录名和文章名一致），只要使用<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">logo</span>](<span class=\"link\">本地图片测试/logo.jpg</span>)</div></pre></td></tr></table></figure></p>\n<p>就可以插入图片。其中[]里面写相关图片标题。</p>\n"},{"title":"Hbase常用命令","date":"2017-03-08T03:21:20.000Z","_content":"\n本文列出了hbase使用中用到的常用命令  \n### hbase 进入\n1.使用jsp查看是否hbase正常  \n2.进入hbase shell,找到hbase的bin目录\n```\nbin/hbase shell\n\n```\n### hbase 基本命令\n\n名称 |\t命令表达式\n--- |---\n创建表|\tcreate '表名称', '列名称1','列名称2','列名称N'\n添加记录 |\tput '表名称', '行名称', '列名称:xxx', '值'\n查看记录|\tget '表名称', '行名称'\n查看表中的记录总数|\tcount  '表名称'\n删除记录|\tdelete  '表名' ,'行名称' , '列名称'\n删除一张表|\t先要屏蔽该表，才能对该表进行删除，第一步 disable '表名称' 第二步 drop '表名称'\n查看所有记录|\tscan \"表名称\"  \n查看某个表某个列中数据|\tscan \"表名称\" , {COLUMNS => ['A'], LIMIT => 10}\n更新记录|\t就是重写一遍进行覆盖\n\n### 普通操作举例\n1.查询服务器状态：status\n```\nhbase(main):002:0> status\n1 active master, 0 backup masters, 1 servers, 0 dead, 3.0000 average load\n```\n\n2.查询Hbase版本：version\n```\nhbase(main):003:0> vesion\nNameError: undefined local variable or method `vesion' for #<Object:0x52ac9a2c>\n```\n3.查看表描述\n```\nhbase(main):006:0> describe 'table1'\nTable table1 is ENABLED                                                                                                  \ntable1                                                                                                                   \nCOLUMN FAMILIES DESCRIPTION                                                                                              \n{NAME => 't1', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESSIO\nN => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'fa\nlse', BLOCKCACHE => 'true'}                                                                                              \n1 row(s) in 0.0290 seconds\n```\n\n### 增删改操作\n\n1.创建一张表userinfo ：create 'userinfo','name','age'\n```\nhbase(main):011:0> create 'userinfo','name','age'\n0 row(s) in 1.3220 seconds\n\n=> Hbase::Table - userinfo\n```\n2.列出所有表：list\n```\nhbase(main):013:0> list\nTABLE                                                                                                                    \ntable1                                                                                                           \nuserinfo                                                         `                                                   \n2 row(s) in 0.0230 seconds\n\n=> [\"table1\", \"userinfo\"]\n```\n3.获得表的描述：describe\n```\nhbase(main):014:0> describe 'userinfo'\nTable userinfo is ENABLED                                                                                                \nuserinfo                                                                                                                 \nCOLUMN FAMILIES DESCRIPTION                                                                                              \n{NAME => 'age', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESSI\nON => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'f\nalse', BLOCKCACHE => 'true'}                                                                                             \n{NAME => 'name', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESS\nION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => '\nfalse', BLOCKCACHE => 'true'}                                                                                            \n2 row(s) in 0.0430 seconds\n```\n4.查看表是否存在：exists\n```\nhbase(main):017:0> exists 'table2'\nTable table2 does not exist                                                                                            \n0 row(s) in 0.0210 seconds\n```\n5.判断表是否为：‘enable’\n```\nhbase(main):018:0> is_enabled 'userinfo'\ntrue \n```\n6.判断表是否为：‘disable’\n```\nhbase(main):019:0> is_disabled 'userinfo'\nfalse  \n```\n7.删除一个列族  disable alter enable\n```\nhbase(main):003:0> disable 'table1'\n0 row(s) in 0.0230 seconds\n\nhbase(main):004:0> alter 'table1',{ NAME => 't2' , METHOD => 'delete'}\nUpdating all regions with the new schema...\n1/1 regions updated.\nDone.\n0 row(s) in 2.2240 seconds\n\nhbase(main):005:0> enable 'table1'\n0 row(s) in 1.2990 seconds\n```\n8.删除一个表：drop ， 删除表前，需要先屏蔽该表。\n```\nhbase(main):007:0> disable 'table1'\n0 row(s) in 2.2910 seconds\n\nhbase(main):008:0> drop 'table1'\n0 row(s) in 1.3030 seconds\n```\n\n9.往userinfo中插入几条记录：put ’表名‘，’行名‘，’列族名:xxx‘,'value'\n```\nhbase(main):016:0> put 'userinfo','row1','name:col1','Berg'\n0 row(s) in 0.0870 seconds\n\n```\n\n10.全表扫描：scan\n```\nhbase(main):001:0> scan 'userinfo'\nROW                             COLUMN+CELL                                             \nrow1                           column=name:col1, timestamp=1463066505217, value=Berg                                    \n ```\n 扫描部分数据:scan '表名称' , {COLUMNS => ['A'], LIMIT => 10}，扫描某列，10行数据\n \n ```\n scan 'tablename' , {COLUMNS => ['A'], LIMIT => 10}\n ```\n 扫描出错的时候会告诉你相关例子：\n ```\n hbase> scan 'hbase:meta'\n  hbase> scan 'hbase:meta', {COLUMNS => 'info:regioninfo'}\n  hbase> scan 'ns1:t1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}\n  hbase> scan 't1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}\n  hbase> scan 't1', {COLUMNS => 'c1', TIMERANGE => [1303668804, 1303668904]}\n  hbase> scan 't1', {REVERSED => true}\n  hbase> scan 't1', {DEBUG => true}\n  hbase> scan 't1', {FILTER => \"(PrefixFilter ('row2') AND\n    (QualifierFilter (>=, 'binary:xyz'))) AND (TimestampsFilter ( 123, 456))\"}\n ```\n \n11.获得某一行的所有数据，也是获得某一行名的所有数据\n```\nhbase(main):003:0> get 'userinfo', 'row1'\nCOLUMN                          CELL                                                                                     \n age:col2                       timestamp=1463066528653, value=22                                                        \n name:col1                      timestamp=1463066505217, value=Berg\n ```\n \n12.获得某行，某列族，某列的所有数据\n\n```\nhbase(main):004:0> get 'userinfo','row1','name:col1'\nCOLUMN                          CELL                                                                                     \n name:col1                      timestamp=1463066505217, value=Berg                                                      \n1 row(s) in 0.0190 seconds\n```\n13.更新一条记录 ： put（  name:col1的值更改为： BergBergBerg   ）\n```\nhbase(main):009:0> put 'userinfo','row2','name:col1','BergBergBerg'\n0 row(s) in 0.0720 seconds\n```\n获取更新后的值： \n\n```\nhbase(main):011:0> get 'userinfo','row2','name:col1'\nCOLUMN                          CELL                                                                                     \n name:col1                      timestamp=1463067259346, value=BergBergBerg                                              \n1 row(s) in 0.0280 seconds\n```\n14.查询表中有多少行：count\n```\nhbase(main):012:0> count 'userinfo'\n2 row(s) in 0.0450 seconds\n\n=> 2\n```\n15.删除 某行 某列族的值：delete\n\n```\nhbase(main):023:0> delete 'userinfo','row2','age:col2'\n0 row(s) in 0.0140 seconds\n\nhbase(main):024:0> scan 'userinfo'\nROW                             COLUMN+CELL                                                                              \n row1                           column=age:col2, timestamp=1463066528653, value=22                                       \n row1                           column=name:col1, timestamp=1463066505217, value=Berg                                    \n row2                           column=name:col1, timestamp=1463067259346, value=BergBergBerg                            \n2 row(s) in 0.0300 seconds\n```\n16.删除整行的值：deleteall\n```\nhbase(main):026:0> deleteall 'userinfo','row2'\n0 row(s) in 0.0190 seconds\n\nhbase(main):027:0> scan 'userinfo'\nROW                             COLUMN+CELL                                                                              \n row1                           column=age:col2, timestamp=1463066528653, value=22                                       \n row1                           column=name:col1, timestamp=1463066505217, value=Berg                                    \n1 row(s) in 0.0320 seconds\n```\n17.给 row1 这行 age列，并使用counter实现递增 ： incr \n```\nhbase(main):024:0> incr 'userinfo','row1','age:id'\nCOUNTER VALUE = 1\n0 row(s) in 0.0170 seconds\n\nhbase(main):025:0> incr 'userinfo','row1','age:id'\nCOUNTER VALUE = 2\n0 row(s) in 0.0210 seconds\n\nhbase(main):026:0> incr 'userinfo','row1','age:id'\nCOUNTER VALUE = 3\n0 row(s) in 0.1270 seconds\n```\n 获取当前counter的值：\n\n```\nhbase(main):027:0> get_\nget_auths     get_counter   get_splits    get_table\nhbase(main):027:0> get_counter 'userinfo','row1','age:id'\nCOUNTER VALUE = 3\n```\n18.将整个表清空：truncate\n```\nhbase(main):028:0> truncate 'userinfo'\nTruncating 'userinfo' table (it may take a while):\n - Disabling table...\n - Truncating table...\n0 row(s) in 4.3360 seconds\n\nhbase(main):029:0> scan 'userinfo'\nROW                             COLUMN+CELL                                                                              \n0 row(s) in 0.3490 seconds\n```\n","source":"_posts/hbase-use.md","raw":"---\ntitle: Hbase常用命令\ndate: 2017-03-08 11:21:20\ntags: \n- Hbase\n- Shell\n- 常用\ncategories: \n- tools\n---\n\n本文列出了hbase使用中用到的常用命令  \n### hbase 进入\n1.使用jsp查看是否hbase正常  \n2.进入hbase shell,找到hbase的bin目录\n```\nbin/hbase shell\n\n```\n### hbase 基本命令\n\n名称 |\t命令表达式\n--- |---\n创建表|\tcreate '表名称', '列名称1','列名称2','列名称N'\n添加记录 |\tput '表名称', '行名称', '列名称:xxx', '值'\n查看记录|\tget '表名称', '行名称'\n查看表中的记录总数|\tcount  '表名称'\n删除记录|\tdelete  '表名' ,'行名称' , '列名称'\n删除一张表|\t先要屏蔽该表，才能对该表进行删除，第一步 disable '表名称' 第二步 drop '表名称'\n查看所有记录|\tscan \"表名称\"  \n查看某个表某个列中数据|\tscan \"表名称\" , {COLUMNS => ['A'], LIMIT => 10}\n更新记录|\t就是重写一遍进行覆盖\n\n### 普通操作举例\n1.查询服务器状态：status\n```\nhbase(main):002:0> status\n1 active master, 0 backup masters, 1 servers, 0 dead, 3.0000 average load\n```\n\n2.查询Hbase版本：version\n```\nhbase(main):003:0> vesion\nNameError: undefined local variable or method `vesion' for #<Object:0x52ac9a2c>\n```\n3.查看表描述\n```\nhbase(main):006:0> describe 'table1'\nTable table1 is ENABLED                                                                                                  \ntable1                                                                                                                   \nCOLUMN FAMILIES DESCRIPTION                                                                                              \n{NAME => 't1', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESSIO\nN => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'fa\nlse', BLOCKCACHE => 'true'}                                                                                              \n1 row(s) in 0.0290 seconds\n```\n\n### 增删改操作\n\n1.创建一张表userinfo ：create 'userinfo','name','age'\n```\nhbase(main):011:0> create 'userinfo','name','age'\n0 row(s) in 1.3220 seconds\n\n=> Hbase::Table - userinfo\n```\n2.列出所有表：list\n```\nhbase(main):013:0> list\nTABLE                                                                                                                    \ntable1                                                                                                           \nuserinfo                                                         `                                                   \n2 row(s) in 0.0230 seconds\n\n=> [\"table1\", \"userinfo\"]\n```\n3.获得表的描述：describe\n```\nhbase(main):014:0> describe 'userinfo'\nTable userinfo is ENABLED                                                                                                \nuserinfo                                                                                                                 \nCOLUMN FAMILIES DESCRIPTION                                                                                              \n{NAME => 'age', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESSI\nON => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => 'f\nalse', BLOCKCACHE => 'true'}                                                                                             \n{NAME => 'name', DATA_BLOCK_ENCODING => 'NONE', BLOOMFILTER => 'ROW', REPLICATION_SCOPE => '0', VERSIONS => '1', COMPRESS\nION => 'NONE', MIN_VERSIONS => '0', TTL => 'FOREVER', KEEP_DELETED_CELLS => 'FALSE', BLOCKSIZE => '65536', IN_MEMORY => '\nfalse', BLOCKCACHE => 'true'}                                                                                            \n2 row(s) in 0.0430 seconds\n```\n4.查看表是否存在：exists\n```\nhbase(main):017:0> exists 'table2'\nTable table2 does not exist                                                                                            \n0 row(s) in 0.0210 seconds\n```\n5.判断表是否为：‘enable’\n```\nhbase(main):018:0> is_enabled 'userinfo'\ntrue \n```\n6.判断表是否为：‘disable’\n```\nhbase(main):019:0> is_disabled 'userinfo'\nfalse  \n```\n7.删除一个列族  disable alter enable\n```\nhbase(main):003:0> disable 'table1'\n0 row(s) in 0.0230 seconds\n\nhbase(main):004:0> alter 'table1',{ NAME => 't2' , METHOD => 'delete'}\nUpdating all regions with the new schema...\n1/1 regions updated.\nDone.\n0 row(s) in 2.2240 seconds\n\nhbase(main):005:0> enable 'table1'\n0 row(s) in 1.2990 seconds\n```\n8.删除一个表：drop ， 删除表前，需要先屏蔽该表。\n```\nhbase(main):007:0> disable 'table1'\n0 row(s) in 2.2910 seconds\n\nhbase(main):008:0> drop 'table1'\n0 row(s) in 1.3030 seconds\n```\n\n9.往userinfo中插入几条记录：put ’表名‘，’行名‘，’列族名:xxx‘,'value'\n```\nhbase(main):016:0> put 'userinfo','row1','name:col1','Berg'\n0 row(s) in 0.0870 seconds\n\n```\n\n10.全表扫描：scan\n```\nhbase(main):001:0> scan 'userinfo'\nROW                             COLUMN+CELL                                             \nrow1                           column=name:col1, timestamp=1463066505217, value=Berg                                    \n ```\n 扫描部分数据:scan '表名称' , {COLUMNS => ['A'], LIMIT => 10}，扫描某列，10行数据\n \n ```\n scan 'tablename' , {COLUMNS => ['A'], LIMIT => 10}\n ```\n 扫描出错的时候会告诉你相关例子：\n ```\n hbase> scan 'hbase:meta'\n  hbase> scan 'hbase:meta', {COLUMNS => 'info:regioninfo'}\n  hbase> scan 'ns1:t1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}\n  hbase> scan 't1', {COLUMNS => ['c1', 'c2'], LIMIT => 10, STARTROW => 'xyz'}\n  hbase> scan 't1', {COLUMNS => 'c1', TIMERANGE => [1303668804, 1303668904]}\n  hbase> scan 't1', {REVERSED => true}\n  hbase> scan 't1', {DEBUG => true}\n  hbase> scan 't1', {FILTER => \"(PrefixFilter ('row2') AND\n    (QualifierFilter (>=, 'binary:xyz'))) AND (TimestampsFilter ( 123, 456))\"}\n ```\n \n11.获得某一行的所有数据，也是获得某一行名的所有数据\n```\nhbase(main):003:0> get 'userinfo', 'row1'\nCOLUMN                          CELL                                                                                     \n age:col2                       timestamp=1463066528653, value=22                                                        \n name:col1                      timestamp=1463066505217, value=Berg\n ```\n \n12.获得某行，某列族，某列的所有数据\n\n```\nhbase(main):004:0> get 'userinfo','row1','name:col1'\nCOLUMN                          CELL                                                                                     \n name:col1                      timestamp=1463066505217, value=Berg                                                      \n1 row(s) in 0.0190 seconds\n```\n13.更新一条记录 ： put（  name:col1的值更改为： BergBergBerg   ）\n```\nhbase(main):009:0> put 'userinfo','row2','name:col1','BergBergBerg'\n0 row(s) in 0.0720 seconds\n```\n获取更新后的值： \n\n```\nhbase(main):011:0> get 'userinfo','row2','name:col1'\nCOLUMN                          CELL                                                                                     \n name:col1                      timestamp=1463067259346, value=BergBergBerg                                              \n1 row(s) in 0.0280 seconds\n```\n14.查询表中有多少行：count\n```\nhbase(main):012:0> count 'userinfo'\n2 row(s) in 0.0450 seconds\n\n=> 2\n```\n15.删除 某行 某列族的值：delete\n\n```\nhbase(main):023:0> delete 'userinfo','row2','age:col2'\n0 row(s) in 0.0140 seconds\n\nhbase(main):024:0> scan 'userinfo'\nROW                             COLUMN+CELL                                                                              \n row1                           column=age:col2, timestamp=1463066528653, value=22                                       \n row1                           column=name:col1, timestamp=1463066505217, value=Berg                                    \n row2                           column=name:col1, timestamp=1463067259346, value=BergBergBerg                            \n2 row(s) in 0.0300 seconds\n```\n16.删除整行的值：deleteall\n```\nhbase(main):026:0> deleteall 'userinfo','row2'\n0 row(s) in 0.0190 seconds\n\nhbase(main):027:0> scan 'userinfo'\nROW                             COLUMN+CELL                                                                              \n row1                           column=age:col2, timestamp=1463066528653, value=22                                       \n row1                           column=name:col1, timestamp=1463066505217, value=Berg                                    \n1 row(s) in 0.0320 seconds\n```\n17.给 row1 这行 age列，并使用counter实现递增 ： incr \n```\nhbase(main):024:0> incr 'userinfo','row1','age:id'\nCOUNTER VALUE = 1\n0 row(s) in 0.0170 seconds\n\nhbase(main):025:0> incr 'userinfo','row1','age:id'\nCOUNTER VALUE = 2\n0 row(s) in 0.0210 seconds\n\nhbase(main):026:0> incr 'userinfo','row1','age:id'\nCOUNTER VALUE = 3\n0 row(s) in 0.1270 seconds\n```\n 获取当前counter的值：\n\n```\nhbase(main):027:0> get_\nget_auths     get_counter   get_splits    get_table\nhbase(main):027:0> get_counter 'userinfo','row1','age:id'\nCOUNTER VALUE = 3\n```\n18.将整个表清空：truncate\n```\nhbase(main):028:0> truncate 'userinfo'\nTruncating 'userinfo' table (it may take a while):\n - Disabling table...\n - Truncating table...\n0 row(s) in 4.3360 seconds\n\nhbase(main):029:0> scan 'userinfo'\nROW                             COLUMN+CELL                                                                              \n0 row(s) in 0.3490 seconds\n```\n","slug":"hbase-use","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7mw000ct8dmln8yqb3k","content":"<p>本文列出了hbase使用中用到的常用命令  </p>\n<h3 id=\"hbase-进入\"><a href=\"#hbase-进入\" class=\"headerlink\" title=\"hbase 进入\"></a>hbase 进入</h3><p>1.使用jsp查看是否hbase正常<br>2.进入hbase shell,找到hbase的bin目录<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bin/hbase </span>shell</div></pre></td></tr></table></figure></p>\n<h3 id=\"hbase-基本命令\"><a href=\"#hbase-基本命令\" class=\"headerlink\" title=\"hbase 基本命令\"></a>hbase 基本命令</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>命令表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建表</td>\n<td>create ‘表名称’, ‘列名称1’,’列名称2’,’列名称N’</td>\n</tr>\n<tr>\n<td>添加记录</td>\n<td>put ‘表名称’, ‘行名称’, ‘列名称:xxx’, ‘值’</td>\n</tr>\n<tr>\n<td>查看记录</td>\n<td>get ‘表名称’, ‘行名称’</td>\n</tr>\n<tr>\n<td>查看表中的记录总数</td>\n<td>count  ‘表名称’</td>\n</tr>\n<tr>\n<td>删除记录</td>\n<td>delete  ‘表名’ ,’行名称’ , ‘列名称’</td>\n</tr>\n<tr>\n<td>删除一张表</td>\n<td>先要屏蔽该表，才能对该表进行删除，第一步 disable ‘表名称’ 第二步 drop ‘表名称’</td>\n</tr>\n<tr>\n<td>查看所有记录</td>\n<td>scan “表名称”  </td>\n</tr>\n<tr>\n<td>查看某个表某个列中数据</td>\n<td>scan “表名称” , {COLUMNS =&gt; [‘A’], LIMIT =&gt; 10}</td>\n</tr>\n<tr>\n<td>更新记录</td>\n<td>就是重写一遍进行覆盖</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"普通操作举例\"><a href=\"#普通操作举例\" class=\"headerlink\" title=\"普通操作举例\"></a>普通操作举例</h3><p>1.查询服务器状态：status<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">hbase</span>(<span class=\"selector-tag\">main</span>)<span class=\"selector-pseudo\">:002</span><span class=\"selector-pseudo\">:0</span>&gt; <span class=\"selector-tag\">status</span></div><div class=\"line\">1 <span class=\"selector-tag\">active</span> <span class=\"selector-tag\">master</span>, 0 <span class=\"selector-tag\">backup</span> <span class=\"selector-tag\">masters</span>, 1 <span class=\"selector-tag\">servers</span>, 0 <span class=\"selector-tag\">dead</span>, 3<span class=\"selector-class\">.0000</span> <span class=\"selector-tag\">average</span> <span class=\"selector-tag\">load</span></div></pre></td></tr></table></figure></p>\n<p>2.查询Hbase版本：version<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):<span class=\"number\">003</span>:<span class=\"number\">0</span>&gt; vesion</div><div class=\"line\">NameError: undefined local variable <span class=\"keyword\">or</span> <span class=\"function\"><span class=\"keyword\">method</span> `<span class=\"title\">vesion</span>' <span class=\"title\">for</span> #&lt;<span class=\"title\">Object</span>:</span><span class=\"number\">0</span>x52ac9a2c&gt;</div></pre></td></tr></table></figure></p>\n<p>3.查看表描述<br><figure class=\"highlight puppet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):006:0&gt; describe <span class=\"string\">'table1'</span></div><div class=\"line\">Table table1 is ENABLED                                                                                                  </div><div class=\"line\">table1                                                                                                                   </div><div class=\"line\">COLUMN FAMILIES <span class=\"keyword\">DESCRIPTION</span>                                                                                              </div><div class=\"line\">&#123;<span class=\"attr\">NAME</span> =&gt; <span class=\"string\">'t1'</span>, <span class=\"attr\">DATA_BLOCK_ENCODING</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">BLOOMFILTER</span> =&gt; <span class=\"string\">'ROW'</span>, <span class=\"attr\">REPLICATION_SCOPE</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">VERSIONS</span> =&gt; <span class=\"string\">'1'</span>, COMPRESSIO</div><div class=\"line\"><span class=\"attr\">N</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">MIN_VERSIONS</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">TTL</span> =&gt; <span class=\"string\">'FOREVER'</span>, <span class=\"attr\">KEEP_DELETED_CELLS</span> =&gt; <span class=\"string\">'FALSE'</span>, <span class=\"attr\">BLOCKSIZE</span> =&gt; <span class=\"string\">'65536'</span>, <span class=\"attr\">IN_MEMORY</span> =&gt; <span class=\"string\">'fa</span></div><div class=\"line\">lse', <span class=\"attr\">BLOCKCACHE</span> =&gt; <span class=\"string\">'true'</span>&#125;                                                                                              </div><div class=\"line\">1 row(s) in 0.0290 seconds</div></pre></td></tr></table></figure></p>\n<h3 id=\"增删改操作\"><a href=\"#增删改操作\" class=\"headerlink\" title=\"增删改操作\"></a>增删改操作</h3><p>1.创建一张表userinfo ：create ‘userinfo’,’name’,’age’<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:011</span><span class=\"symbol\">:0</span>&gt; create 'userinfo','name','age'</div><div class=\"line\"><span class=\"number\">0</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">1.3220</span> seconds</div><div class=\"line\"></div><div class=\"line\">=&gt; Hba<span class=\"symbol\">se:</span><span class=\"symbol\">:Ta</span>ble - userinfo</div></pre></td></tr></table></figure></p>\n<p>2.列出所有表：list<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:013</span><span class=\"symbol\">:0</span>&gt; list</div><div class=\"line\">TABLE                                                                                                                    </div><div class=\"line\">table1                                                                                                           </div><div class=\"line\">userinfo                                                         `                                                   </div><div class=\"line\"><span class=\"number\">2</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">0.0230</span> seconds</div><div class=\"line\"></div><div class=\"line\">=&gt; [<span class=\"string\">\"table1\"</span>, <span class=\"string\">\"userinfo\"</span>]</div></pre></td></tr></table></figure></p>\n<p>3.获得表的描述：describe<br><figure class=\"highlight puppet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):014:0&gt; describe <span class=\"string\">'userinfo'</span></div><div class=\"line\">Table userinfo is ENABLED                                                                                                </div><div class=\"line\">userinfo                                                                                                                 </div><div class=\"line\">COLUMN FAMILIES <span class=\"keyword\">DESCRIPTION</span>                                                                                              </div><div class=\"line\">&#123;<span class=\"attr\">NAME</span> =&gt; <span class=\"string\">'age'</span>, <span class=\"attr\">DATA_BLOCK_ENCODING</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">BLOOMFILTER</span> =&gt; <span class=\"string\">'ROW'</span>, <span class=\"attr\">REPLICATION_SCOPE</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">VERSIONS</span> =&gt; <span class=\"string\">'1'</span>, COMPRESSI</div><div class=\"line\"><span class=\"attr\">ON</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">MIN_VERSIONS</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">TTL</span> =&gt; <span class=\"string\">'FOREVER'</span>, <span class=\"attr\">KEEP_DELETED_CELLS</span> =&gt; <span class=\"string\">'FALSE'</span>, <span class=\"attr\">BLOCKSIZE</span> =&gt; <span class=\"string\">'65536'</span>, <span class=\"attr\">IN_MEMORY</span> =&gt; <span class=\"string\">'f</span></div><div class=\"line\">alse', <span class=\"attr\">BLOCKCACHE</span> =&gt; <span class=\"string\">'true'</span>&#125;                                                                                             </div><div class=\"line\">&#123;<span class=\"attr\">NAME</span> =&gt; <span class=\"string\">'name'</span>, <span class=\"attr\">DATA_BLOCK_ENCODING</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">BLOOMFILTER</span> =&gt; <span class=\"string\">'ROW'</span>, <span class=\"attr\">REPLICATION_SCOPE</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">VERSIONS</span> =&gt; <span class=\"string\">'1'</span>, COMPRESS</div><div class=\"line\"><span class=\"attr\">ION</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">MIN_VERSIONS</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">TTL</span> =&gt; <span class=\"string\">'FOREVER'</span>, <span class=\"attr\">KEEP_DELETED_CELLS</span> =&gt; <span class=\"string\">'FALSE'</span>, <span class=\"attr\">BLOCKSIZE</span> =&gt; <span class=\"string\">'65536'</span>, <span class=\"attr\">IN_MEMORY</span> =&gt; <span class=\"string\">'</span></div><div class=\"line\">false', <span class=\"attr\">BLOCKCACHE</span> =&gt; <span class=\"string\">'true'</span>&#125;                                                                                            </div><div class=\"line\">2 row(s) in 0.0430 seconds</div></pre></td></tr></table></figure></p>\n<p>4.查看表是否存在：exists<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">hbase(main):017:0&gt;</span> exists <span class=\"string\">'table2'</span></div><div class=\"line\">Table table2 does <span class=\"keyword\">not</span> exist                                                                                            </div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0</span>.<span class=\"number\">0210</span> seconds</div></pre></td></tr></table></figure></p>\n<p>5.判断表是否为：‘enable’<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">hbase(main):018:0&gt;</span> is_enabled <span class=\"string\">'userinfo'</span></div><div class=\"line\"><span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>6.判断表是否为：‘disable’<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">hbase(main):019:0&gt;</span> is_disabled <span class=\"string\">'userinfo'</span></div><div class=\"line\"><span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<p>7.删除一个列族  disable alter enable<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">003</span>:<span class=\"number\">0</span>&gt; disable <span class=\"string\">'table1'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0230</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">004</span>:<span class=\"number\">0</span>&gt; alter <span class=\"string\">'table1'</span>,&#123; NAME =&gt; <span class=\"string\">'t2'</span> , METHOD =&gt; <span class=\"string\">'delete'</span>&#125;</div><div class=\"line\">Updating all regions with the new schema...</div><div class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">1</span> regions updated.</div><div class=\"line\">Done.</div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">2.2240</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">005</span>:<span class=\"number\">0</span>&gt; enable <span class=\"string\">'table1'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">1.2990</span> seconds</div></pre></td></tr></table></figure></p>\n<p>8.删除一个表：drop ， 删除表前，需要先屏蔽该表。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">007</span>:<span class=\"number\">0</span>&gt; disable <span class=\"string\">'table1'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">2.2910</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">008</span>:<span class=\"number\">0</span>&gt; drop <span class=\"string\">'table1'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">1.3030</span> seconds</div></pre></td></tr></table></figure></p>\n<p>9.往userinfo中插入几条记录：put ’表名‘，’行名‘，’列族名:xxx‘,’value’<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">016</span>:<span class=\"number\">0</span>&gt; put <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'name:col1'</span>,<span class=\"string\">'Berg'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0870</span> seconds</div></pre></td></tr></table></figure></p>\n<p>10.全表扫描：scan<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; scan 'userinfo'</div><div class=\"line\"><span class=\"built_in\">ROW</span>                             <span class=\"built_in\">COLUMN</span>+<span class=\"built_in\">CELL</span>                                             </div><div class=\"line\">row1                           <span class=\"built_in\">column</span>=<span class=\"built_in\">na</span><span class=\"symbol\">me:co</span>l1, timestamp=<span class=\"number\">1463066505217</span>, <span class=\"built_in\">value</span>=Berg</div></pre></td></tr></table></figure></p>\n<p> 扫描部分数据:scan ‘表名称’ , {COLUMNS =&gt; [‘A’], LIMIT =&gt; 10}，扫描某列，10行数据</p>\n <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scan <span class=\"string\">'tablename'</span> , &#123;COLUMNS =&gt; [<span class=\"string\">'A'</span>], LIMIT =&gt; <span class=\"number\">10</span>&#125;</div></pre></td></tr></table></figure>\n<p> 扫描出错的时候会告诉你相关例子：<br> <figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase&gt; scan <span class=\"symbol\">'hbase</span>:meta'</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'hbase</span>:meta', &#123;<span class=\"type\">COLUMNS</span> =&gt; <span class=\"symbol\">'info</span>:regioninfo'&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'ns1</span>:t1', &#123;<span class=\"type\">COLUMNS</span> =&gt; [<span class=\"symbol\">'c1'</span>, <span class=\"symbol\">'c2'</span>], <span class=\"type\">LIMIT</span> =&gt; <span class=\"number\">10</span>, <span class=\"type\">STARTROW</span> =&gt; <span class=\"symbol\">'xyz'</span>&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">COLUMNS</span> =&gt; [<span class=\"symbol\">'c1'</span>, <span class=\"symbol\">'c2'</span>], <span class=\"type\">LIMIT</span> =&gt; <span class=\"number\">10</span>, <span class=\"type\">STARTROW</span> =&gt; <span class=\"symbol\">'xyz'</span>&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">COLUMNS</span> =&gt; <span class=\"symbol\">'c1'</span>, <span class=\"type\">TIMERANGE</span> =&gt; [<span class=\"number\">1303668804</span>, <span class=\"number\">1303668904</span>]&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">REVERSED</span> =&gt; <span class=\"literal\">true</span>&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">DEBUG</span> =&gt; <span class=\"literal\">true</span>&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">FILTER</span> =&gt; <span class=\"string\">\"(PrefixFilter ('row2') AND</span></div><div class=\"line\">   (QualifierFilter (&gt;=, 'binary:xyz'))) AND (TimestampsFilter ( 123, 456))\"&#125;</div></pre></td></tr></table></figure></p>\n<p>11.获得某一行的所有数据，也是获得某一行名的所有数据<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):<span class=\"number\">003</span>:<span class=\"number\">0</span>&gt; <span class=\"keyword\">get</span> <span class=\"string\">'userinfo'</span>, <span class=\"string\">'row1'</span></div><div class=\"line\">COLUMN                          CELL                                                                                     </div><div class=\"line\"> age:col2                       timestamp=<span class=\"number\">1463066528653</span>, <span class=\"keyword\">value</span>=<span class=\"number\">22</span>                                                        </div><div class=\"line\"> name:col1                      timestamp=<span class=\"number\">1463066505217</span>, <span class=\"keyword\">value</span>=Berg</div></pre></td></tr></table></figure></p>\n<p>12.获得某行，某列族，某列的所有数据</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):<span class=\"number\">004</span>:<span class=\"number\">0</span>&gt; <span class=\"built_in\">get</span> <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'name:col1'</span></div><div class=\"line\">COLUMN                          CELL                                                                                     </div><div class=\"line\"> name:col1                      timestamp=<span class=\"number\">1463066505217</span>, <span class=\"built_in\">value</span>=Berg                                                      </div><div class=\"line\"><span class=\"number\">1</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0190</span> <span class=\"built_in\">seconds</span></div></pre></td></tr></table></figure>\n<p>13.更新一条记录 ： put（  name:col1的值更改为： BergBergBerg   ）<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">009</span>:<span class=\"number\">0</span>&gt; put <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row2'</span>,<span class=\"string\">'name:col1'</span>,<span class=\"string\">'BergBergBerg'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0720</span> seconds</div></pre></td></tr></table></figure></p>\n<p>获取更新后的值： </p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):<span class=\"number\">011</span>:<span class=\"number\">0</span>&gt; <span class=\"built_in\">get</span> <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row2'</span>,<span class=\"string\">'name:col1'</span></div><div class=\"line\">COLUMN                          CELL                                                                                     </div><div class=\"line\"> name:col1                      timestamp=<span class=\"number\">1463067259346</span>, <span class=\"built_in\">value</span>=BergBergBerg                                              </div><div class=\"line\"><span class=\"number\">1</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0280</span> <span class=\"built_in\">seconds</span></div></pre></td></tr></table></figure>\n<p>14.查询表中有多少行：count<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:012</span><span class=\"symbol\">:0</span>&gt; <span class=\"built_in\">count</span> 'userinfo'</div><div class=\"line\"><span class=\"number\">2</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">0.0450</span> seconds</div><div class=\"line\"></div><div class=\"line\">=&gt; <span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>15.删除 某行 某列族的值：delete</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:023</span><span class=\"symbol\">:0</span>&gt; delete 'userinfo','row2','a<span class=\"symbol\">ge:co</span>l2'</div><div class=\"line\"><span class=\"number\">0</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">0.0140</span> seconds</div><div class=\"line\"></div><div class=\"line\">hbase(main)<span class=\"symbol\">:024</span><span class=\"symbol\">:0</span>&gt; scan 'userinfo'</div><div class=\"line\"><span class=\"built_in\">ROW</span>                             <span class=\"built_in\">COLUMN</span>+<span class=\"built_in\">CELL</span>                                                                              </div><div class=\"line\"> row1                           <span class=\"built_in\">column</span>=a<span class=\"symbol\">ge:co</span>l2, timestamp=<span class=\"number\">1463066528653</span>, <span class=\"built_in\">value</span>=<span class=\"number\">22</span>                                       </div><div class=\"line\"> row1                           <span class=\"built_in\">column</span>=<span class=\"built_in\">na</span><span class=\"symbol\">me:co</span>l1, timestamp=<span class=\"number\">1463066505217</span>, <span class=\"built_in\">value</span>=Berg                                    </div><div class=\"line\"> row2                           <span class=\"built_in\">column</span>=<span class=\"built_in\">na</span><span class=\"symbol\">me:co</span>l1, timestamp=<span class=\"number\">1463067259346</span>, <span class=\"built_in\">value</span>=BergBergBerg                            </div><div class=\"line\"><span class=\"number\">2</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">0.0300</span> seconds</div></pre></td></tr></table></figure>\n<p>16.删除整行的值：deleteall<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">026</span>:<span class=\"number\">0</span>&gt; deleteall <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row2'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0190</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">027</span>:<span class=\"number\">0</span>&gt; scan <span class=\"string\">'userinfo'</span></div><div class=\"line\">ROW                             COLUMN+CELL                                                                              </div><div class=\"line\"> row1                           column=age:col2, timestamp=<span class=\"number\">1463066528653</span>, value=<span class=\"number\">22</span>                                       </div><div class=\"line\"> row1                           column=name:col1, timestamp=<span class=\"number\">1463066505217</span>, value=Berg                                    </div><div class=\"line\"><span class=\"number\">1</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0320</span> seconds</div></pre></td></tr></table></figure></p>\n<p>17.给 row1 这行 age列，并使用counter实现递增 ： incr<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">024</span>:<span class=\"number\">0</span>&gt; incr <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'age:id'</span></div><div class=\"line\">COUNTER VALUE = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0170</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">025</span>:<span class=\"number\">0</span>&gt; incr <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'age:id'</span></div><div class=\"line\">COUNTER VALUE = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0210</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">026</span>:<span class=\"number\">0</span>&gt; incr <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'age:id'</span></div><div class=\"line\">COUNTER VALUE = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.1270</span> seconds</div></pre></td></tr></table></figure></p>\n<p> 获取当前counter的值：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">027</span>:<span class=\"number\">0</span>&gt; get_</div><div class=\"line\">get_auths     get_counter   get_splits    get_table</div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">027</span>:<span class=\"number\">0</span>&gt; get_counter <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'age:id'</span></div><div class=\"line\">COUNTER VALUE = <span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>18.将整个表清空：truncate<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">028</span>:<span class=\"number\">0</span>&gt; truncate <span class=\"string\">'userinfo'</span></div><div class=\"line\">Truncating <span class=\"string\">'userinfo'</span> <span class=\"selector-tag\">table</span> (it may take <span class=\"selector-tag\">a</span> while):</div><div class=\"line\"> - Disabling <span class=\"selector-tag\">table</span>...</div><div class=\"line\"> - Truncating <span class=\"selector-tag\">table</span>...</div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">4.3360</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">029</span>:<span class=\"number\">0</span>&gt; scan <span class=\"string\">'userinfo'</span></div><div class=\"line\">ROW                             COLUMN+CELL                                                                              </div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.3490</span> seconds</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>本文列出了hbase使用中用到的常用命令  </p>\n<h3 id=\"hbase-进入\"><a href=\"#hbase-进入\" class=\"headerlink\" title=\"hbase 进入\"></a>hbase 进入</h3><p>1.使用jsp查看是否hbase正常<br>2.进入hbase shell,找到hbase的bin目录<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bin/hbase </span>shell</div></pre></td></tr></table></figure></p>\n<h3 id=\"hbase-基本命令\"><a href=\"#hbase-基本命令\" class=\"headerlink\" title=\"hbase 基本命令\"></a>hbase 基本命令</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>命令表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建表</td>\n<td>create ‘表名称’, ‘列名称1’,’列名称2’,’列名称N’</td>\n</tr>\n<tr>\n<td>添加记录</td>\n<td>put ‘表名称’, ‘行名称’, ‘列名称:xxx’, ‘值’</td>\n</tr>\n<tr>\n<td>查看记录</td>\n<td>get ‘表名称’, ‘行名称’</td>\n</tr>\n<tr>\n<td>查看表中的记录总数</td>\n<td>count  ‘表名称’</td>\n</tr>\n<tr>\n<td>删除记录</td>\n<td>delete  ‘表名’ ,’行名称’ , ‘列名称’</td>\n</tr>\n<tr>\n<td>删除一张表</td>\n<td>先要屏蔽该表，才能对该表进行删除，第一步 disable ‘表名称’ 第二步 drop ‘表名称’</td>\n</tr>\n<tr>\n<td>查看所有记录</td>\n<td>scan “表名称”  </td>\n</tr>\n<tr>\n<td>查看某个表某个列中数据</td>\n<td>scan “表名称” , {COLUMNS =&gt; [‘A’], LIMIT =&gt; 10}</td>\n</tr>\n<tr>\n<td>更新记录</td>\n<td>就是重写一遍进行覆盖</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"普通操作举例\"><a href=\"#普通操作举例\" class=\"headerlink\" title=\"普通操作举例\"></a>普通操作举例</h3><p>1.查询服务器状态：status<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">hbase</span>(<span class=\"selector-tag\">main</span>)<span class=\"selector-pseudo\">:002</span><span class=\"selector-pseudo\">:0</span>&gt; <span class=\"selector-tag\">status</span></div><div class=\"line\">1 <span class=\"selector-tag\">active</span> <span class=\"selector-tag\">master</span>, 0 <span class=\"selector-tag\">backup</span> <span class=\"selector-tag\">masters</span>, 1 <span class=\"selector-tag\">servers</span>, 0 <span class=\"selector-tag\">dead</span>, 3<span class=\"selector-class\">.0000</span> <span class=\"selector-tag\">average</span> <span class=\"selector-tag\">load</span></div></pre></td></tr></table></figure></p>\n<p>2.查询Hbase版本：version<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):<span class=\"number\">003</span>:<span class=\"number\">0</span>&gt; vesion</div><div class=\"line\">NameError: undefined local variable <span class=\"keyword\">or</span> <span class=\"function\"><span class=\"keyword\">method</span> `<span class=\"title\">vesion</span>' <span class=\"title\">for</span> #&lt;<span class=\"title\">Object</span>:</span><span class=\"number\">0</span>x52ac9a2c&gt;</div></pre></td></tr></table></figure></p>\n<p>3.查看表描述<br><figure class=\"highlight puppet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):006:0&gt; describe <span class=\"string\">'table1'</span></div><div class=\"line\">Table table1 is ENABLED                                                                                                  </div><div class=\"line\">table1                                                                                                                   </div><div class=\"line\">COLUMN FAMILIES <span class=\"keyword\">DESCRIPTION</span>                                                                                              </div><div class=\"line\">&#123;<span class=\"attr\">NAME</span> =&gt; <span class=\"string\">'t1'</span>, <span class=\"attr\">DATA_BLOCK_ENCODING</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">BLOOMFILTER</span> =&gt; <span class=\"string\">'ROW'</span>, <span class=\"attr\">REPLICATION_SCOPE</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">VERSIONS</span> =&gt; <span class=\"string\">'1'</span>, COMPRESSIO</div><div class=\"line\"><span class=\"attr\">N</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">MIN_VERSIONS</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">TTL</span> =&gt; <span class=\"string\">'FOREVER'</span>, <span class=\"attr\">KEEP_DELETED_CELLS</span> =&gt; <span class=\"string\">'FALSE'</span>, <span class=\"attr\">BLOCKSIZE</span> =&gt; <span class=\"string\">'65536'</span>, <span class=\"attr\">IN_MEMORY</span> =&gt; <span class=\"string\">'fa</div><div class=\"line\">lse'</span>, <span class=\"attr\">BLOCKCACHE</span> =&gt; <span class=\"string\">'true'</span>&#125;                                                                                              </div><div class=\"line\">1 row(s) in 0.0290 seconds</div></pre></td></tr></table></figure></p>\n<h3 id=\"增删改操作\"><a href=\"#增删改操作\" class=\"headerlink\" title=\"增删改操作\"></a>增删改操作</h3><p>1.创建一张表userinfo ：create ‘userinfo’,’name’,’age’<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:011</span><span class=\"symbol\">:0</span>&gt; create 'userinfo','name','age'</div><div class=\"line\"><span class=\"number\">0</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">1.3220</span> seconds</div><div class=\"line\"></div><div class=\"line\">=&gt; Hba<span class=\"symbol\">se:</span><span class=\"symbol\">:Ta</span>ble - userinfo</div></pre></td></tr></table></figure></p>\n<p>2.列出所有表：list<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:013</span><span class=\"symbol\">:0</span>&gt; list</div><div class=\"line\">TABLE                                                                                                                    </div><div class=\"line\">table1                                                                                                           </div><div class=\"line\">userinfo                                                         `                                                   </div><div class=\"line\"><span class=\"number\">2</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">0.0230</span> seconds</div><div class=\"line\"></div><div class=\"line\">=&gt; [<span class=\"string\">\"table1\"</span>, <span class=\"string\">\"userinfo\"</span>]</div></pre></td></tr></table></figure></p>\n<p>3.获得表的描述：describe<br><figure class=\"highlight puppet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):014:0&gt; describe <span class=\"string\">'userinfo'</span></div><div class=\"line\">Table userinfo is ENABLED                                                                                                </div><div class=\"line\">userinfo                                                                                                                 </div><div class=\"line\">COLUMN FAMILIES <span class=\"keyword\">DESCRIPTION</span>                                                                                              </div><div class=\"line\">&#123;<span class=\"attr\">NAME</span> =&gt; <span class=\"string\">'age'</span>, <span class=\"attr\">DATA_BLOCK_ENCODING</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">BLOOMFILTER</span> =&gt; <span class=\"string\">'ROW'</span>, <span class=\"attr\">REPLICATION_SCOPE</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">VERSIONS</span> =&gt; <span class=\"string\">'1'</span>, COMPRESSI</div><div class=\"line\"><span class=\"attr\">ON</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">MIN_VERSIONS</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">TTL</span> =&gt; <span class=\"string\">'FOREVER'</span>, <span class=\"attr\">KEEP_DELETED_CELLS</span> =&gt; <span class=\"string\">'FALSE'</span>, <span class=\"attr\">BLOCKSIZE</span> =&gt; <span class=\"string\">'65536'</span>, <span class=\"attr\">IN_MEMORY</span> =&gt; <span class=\"string\">'f</div><div class=\"line\">alse'</span>, <span class=\"attr\">BLOCKCACHE</span> =&gt; <span class=\"string\">'true'</span>&#125;                                                                                             </div><div class=\"line\">&#123;<span class=\"attr\">NAME</span> =&gt; <span class=\"string\">'name'</span>, <span class=\"attr\">DATA_BLOCK_ENCODING</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">BLOOMFILTER</span> =&gt; <span class=\"string\">'ROW'</span>, <span class=\"attr\">REPLICATION_SCOPE</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">VERSIONS</span> =&gt; <span class=\"string\">'1'</span>, COMPRESS</div><div class=\"line\"><span class=\"attr\">ION</span> =&gt; <span class=\"string\">'NONE'</span>, <span class=\"attr\">MIN_VERSIONS</span> =&gt; <span class=\"string\">'0'</span>, <span class=\"attr\">TTL</span> =&gt; <span class=\"string\">'FOREVER'</span>, <span class=\"attr\">KEEP_DELETED_CELLS</span> =&gt; <span class=\"string\">'FALSE'</span>, <span class=\"attr\">BLOCKSIZE</span> =&gt; <span class=\"string\">'65536'</span>, <span class=\"attr\">IN_MEMORY</span> =&gt; <span class=\"string\">'</div><div class=\"line\">false'</span>, <span class=\"attr\">BLOCKCACHE</span> =&gt; <span class=\"string\">'true'</span>&#125;                                                                                            </div><div class=\"line\">2 row(s) in 0.0430 seconds</div></pre></td></tr></table></figure></p>\n<p>4.查看表是否存在：exists<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">hbase(main):017:0&gt;</span> exists <span class=\"string\">'table2'</span></div><div class=\"line\">Table table2 does <span class=\"keyword\">not</span> exist                                                                                            </div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0</span>.<span class=\"number\">0210</span> seconds</div></pre></td></tr></table></figure></p>\n<p>5.判断表是否为：‘enable’<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">hbase(main):018:0&gt;</span> is_enabled <span class=\"string\">'userinfo'</span></div><div class=\"line\"><span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>6.判断表是否为：‘disable’<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">hbase(main):019:0&gt;</span> is_disabled <span class=\"string\">'userinfo'</span></div><div class=\"line\"><span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<p>7.删除一个列族  disable alter enable<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">003</span>:<span class=\"number\">0</span>&gt; disable <span class=\"string\">'table1'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0230</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">004</span>:<span class=\"number\">0</span>&gt; alter <span class=\"string\">'table1'</span>,&#123; NAME =&gt; <span class=\"string\">'t2'</span> , METHOD =&gt; <span class=\"string\">'delete'</span>&#125;</div><div class=\"line\">Updating all regions with the new schema...</div><div class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">1</span> regions updated.</div><div class=\"line\">Done.</div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">2.2240</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">005</span>:<span class=\"number\">0</span>&gt; enable <span class=\"string\">'table1'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">1.2990</span> seconds</div></pre></td></tr></table></figure></p>\n<p>8.删除一个表：drop ， 删除表前，需要先屏蔽该表。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">007</span>:<span class=\"number\">0</span>&gt; disable <span class=\"string\">'table1'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">2.2910</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">008</span>:<span class=\"number\">0</span>&gt; drop <span class=\"string\">'table1'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">1.3030</span> seconds</div></pre></td></tr></table></figure></p>\n<p>9.往userinfo中插入几条记录：put ’表名‘，’行名‘，’列族名:xxx‘,’value’<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">016</span>:<span class=\"number\">0</span>&gt; put <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'name:col1'</span>,<span class=\"string\">'Berg'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0870</span> seconds</div></pre></td></tr></table></figure></p>\n<p>10.全表扫描：scan<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:001</span><span class=\"symbol\">:0</span>&gt; scan 'userinfo'</div><div class=\"line\"><span class=\"built_in\">ROW</span>                             <span class=\"built_in\">COLUMN</span>+<span class=\"built_in\">CELL</span>                                             </div><div class=\"line\">row1                           <span class=\"built_in\">column</span>=<span class=\"built_in\">na</span><span class=\"symbol\">me:co</span>l1, timestamp=<span class=\"number\">1463066505217</span>, <span class=\"built_in\">value</span>=Berg</div></pre></td></tr></table></figure></p>\n<p> 扫描部分数据:scan ‘表名称’ , {COLUMNS =&gt; [‘A’], LIMIT =&gt; 10}，扫描某列，10行数据</p>\n <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scan <span class=\"string\">'tablename'</span> , &#123;COLUMNS =&gt; [<span class=\"string\">'A'</span>], LIMIT =&gt; <span class=\"number\">10</span>&#125;</div></pre></td></tr></table></figure>\n<p> 扫描出错的时候会告诉你相关例子：<br> <figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase&gt; scan <span class=\"symbol\">'hbase</span>:meta'</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'hbase</span>:meta', &#123;<span class=\"type\">COLUMNS</span> =&gt; <span class=\"symbol\">'info</span>:regioninfo'&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'ns1</span>:t1', &#123;<span class=\"type\">COLUMNS</span> =&gt; [<span class=\"symbol\">'c1'</span>, <span class=\"symbol\">'c2'</span>], <span class=\"type\">LIMIT</span> =&gt; <span class=\"number\">10</span>, <span class=\"type\">STARTROW</span> =&gt; <span class=\"symbol\">'xyz'</span>&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">COLUMNS</span> =&gt; [<span class=\"symbol\">'c1'</span>, <span class=\"symbol\">'c2'</span>], <span class=\"type\">LIMIT</span> =&gt; <span class=\"number\">10</span>, <span class=\"type\">STARTROW</span> =&gt; <span class=\"symbol\">'xyz'</span>&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">COLUMNS</span> =&gt; <span class=\"symbol\">'c1'</span>, <span class=\"type\">TIMERANGE</span> =&gt; [<span class=\"number\">1303668804</span>, <span class=\"number\">1303668904</span>]&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">REVERSED</span> =&gt; <span class=\"literal\">true</span>&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">DEBUG</span> =&gt; <span class=\"literal\">true</span>&#125;</div><div class=\"line\"> hbase&gt; scan <span class=\"symbol\">'t1'</span>, &#123;<span class=\"type\">FILTER</span> =&gt; <span class=\"string\">\"(PrefixFilter ('row2') AND</div><div class=\"line\">   (QualifierFilter (&gt;=, 'binary:xyz'))) AND (TimestampsFilter ( 123, 456))\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>11.获得某一行的所有数据，也是获得某一行名的所有数据<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):<span class=\"number\">003</span>:<span class=\"number\">0</span>&gt; <span class=\"keyword\">get</span> <span class=\"string\">'userinfo'</span>, <span class=\"string\">'row1'</span></div><div class=\"line\">COLUMN                          CELL                                                                                     </div><div class=\"line\"> age:col2                       timestamp=<span class=\"number\">1463066528653</span>, <span class=\"keyword\">value</span>=<span class=\"number\">22</span>                                                        </div><div class=\"line\"> name:col1                      timestamp=<span class=\"number\">1463066505217</span>, <span class=\"keyword\">value</span>=Berg</div></pre></td></tr></table></figure></p>\n<p>12.获得某行，某列族，某列的所有数据</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):<span class=\"number\">004</span>:<span class=\"number\">0</span>&gt; <span class=\"built_in\">get</span> <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'name:col1'</span></div><div class=\"line\">COLUMN                          CELL                                                                                     </div><div class=\"line\"> name:col1                      timestamp=<span class=\"number\">1463066505217</span>, <span class=\"built_in\">value</span>=Berg                                                      </div><div class=\"line\"><span class=\"number\">1</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0190</span> <span class=\"built_in\">seconds</span></div></pre></td></tr></table></figure>\n<p>13.更新一条记录 ： put（  name:col1的值更改为： BergBergBerg   ）<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">009</span>:<span class=\"number\">0</span>&gt; put <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row2'</span>,<span class=\"string\">'name:col1'</span>,<span class=\"string\">'BergBergBerg'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0720</span> seconds</div></pre></td></tr></table></figure></p>\n<p>获取更新后的值： </p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main):<span class=\"number\">011</span>:<span class=\"number\">0</span>&gt; <span class=\"built_in\">get</span> <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row2'</span>,<span class=\"string\">'name:col1'</span></div><div class=\"line\">COLUMN                          CELL                                                                                     </div><div class=\"line\"> name:col1                      timestamp=<span class=\"number\">1463067259346</span>, <span class=\"built_in\">value</span>=BergBergBerg                                              </div><div class=\"line\"><span class=\"number\">1</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0280</span> <span class=\"built_in\">seconds</span></div></pre></td></tr></table></figure>\n<p>14.查询表中有多少行：count<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:012</span><span class=\"symbol\">:0</span>&gt; <span class=\"built_in\">count</span> 'userinfo'</div><div class=\"line\"><span class=\"number\">2</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">0.0450</span> seconds</div><div class=\"line\"></div><div class=\"line\">=&gt; <span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>15.删除 某行 某列族的值：delete</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)<span class=\"symbol\">:023</span><span class=\"symbol\">:0</span>&gt; delete 'userinfo','row2','a<span class=\"symbol\">ge:co</span>l2'</div><div class=\"line\"><span class=\"number\">0</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">0.0140</span> seconds</div><div class=\"line\"></div><div class=\"line\">hbase(main)<span class=\"symbol\">:024</span><span class=\"symbol\">:0</span>&gt; scan 'userinfo'</div><div class=\"line\"><span class=\"built_in\">ROW</span>                             <span class=\"built_in\">COLUMN</span>+<span class=\"built_in\">CELL</span>                                                                              </div><div class=\"line\"> row1                           <span class=\"built_in\">column</span>=a<span class=\"symbol\">ge:co</span>l2, timestamp=<span class=\"number\">1463066528653</span>, <span class=\"built_in\">value</span>=<span class=\"number\">22</span>                                       </div><div class=\"line\"> row1                           <span class=\"built_in\">column</span>=<span class=\"built_in\">na</span><span class=\"symbol\">me:co</span>l1, timestamp=<span class=\"number\">1463066505217</span>, <span class=\"built_in\">value</span>=Berg                                    </div><div class=\"line\"> row2                           <span class=\"built_in\">column</span>=<span class=\"built_in\">na</span><span class=\"symbol\">me:co</span>l1, timestamp=<span class=\"number\">1463067259346</span>, <span class=\"built_in\">value</span>=BergBergBerg                            </div><div class=\"line\"><span class=\"number\">2</span> <span class=\"built_in\">row</span>(s) in <span class=\"number\">0.0300</span> seconds</div></pre></td></tr></table></figure>\n<p>16.删除整行的值：deleteall<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">026</span>:<span class=\"number\">0</span>&gt; deleteall <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row2'</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0190</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">027</span>:<span class=\"number\">0</span>&gt; scan <span class=\"string\">'userinfo'</span></div><div class=\"line\">ROW                             COLUMN+CELL                                                                              </div><div class=\"line\"> row1                           column=age:col2, timestamp=<span class=\"number\">1463066528653</span>, value=<span class=\"number\">22</span>                                       </div><div class=\"line\"> row1                           column=name:col1, timestamp=<span class=\"number\">1463066505217</span>, value=Berg                                    </div><div class=\"line\"><span class=\"number\">1</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0320</span> seconds</div></pre></td></tr></table></figure></p>\n<p>17.给 row1 这行 age列，并使用counter实现递增 ： incr<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">024</span>:<span class=\"number\">0</span>&gt; incr <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'age:id'</span></div><div class=\"line\">COUNTER VALUE = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0170</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">025</span>:<span class=\"number\">0</span>&gt; incr <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'age:id'</span></div><div class=\"line\">COUNTER VALUE = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.0210</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">026</span>:<span class=\"number\">0</span>&gt; incr <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'age:id'</span></div><div class=\"line\">COUNTER VALUE = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.1270</span> seconds</div></pre></td></tr></table></figure></p>\n<p> 获取当前counter的值：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">027</span>:<span class=\"number\">0</span>&gt; get_</div><div class=\"line\">get_auths     get_counter   get_splits    get_table</div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">027</span>:<span class=\"number\">0</span>&gt; get_counter <span class=\"string\">'userinfo'</span>,<span class=\"string\">'row1'</span>,<span class=\"string\">'age:id'</span></div><div class=\"line\">COUNTER VALUE = <span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>18.将整个表清空：truncate<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">028</span>:<span class=\"number\">0</span>&gt; truncate <span class=\"string\">'userinfo'</span></div><div class=\"line\">Truncating <span class=\"string\">'userinfo'</span> <span class=\"selector-tag\">table</span> (it may take <span class=\"selector-tag\">a</span> while):</div><div class=\"line\"> - Disabling <span class=\"selector-tag\">table</span>...</div><div class=\"line\"> - Truncating <span class=\"selector-tag\">table</span>...</div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">4.3360</span> seconds</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">hbase</span><span class=\"params\">(main)</span></span>:<span class=\"number\">029</span>:<span class=\"number\">0</span>&gt; scan <span class=\"string\">'userinfo'</span></div><div class=\"line\">ROW                             COLUMN+CELL                                                                              </div><div class=\"line\"><span class=\"number\">0</span> row(s) <span class=\"keyword\">in</span> <span class=\"number\">0.3490</span> seconds</div></pre></td></tr></table></figure></p>\n"},{"title":"线上日志排查","date":"2017-03-09T09:08:56.000Z","_content":"\n\n\n\n### 线上问题排查\n\nssh登录相关server，然后你可以想干什么干什么了。。。\n\n查看谋渠道出现的问题,使用grep命令，相关参数可[参考](http://man.linuxde.net/grep)\n```\ncat  sec-adv.stdout.log |grep  \"08-0\"\n```\n-C 显示前后20行\n\n```\ncat  sec-adv.stdout.log |grep  \"08-0\" -C30\n```\n统计广告拉取错误次数   -c 计算符合范本样式的列数。\n\n```\ncat  sec-adv.stdout.log |grep  \"Fetch ad error\" -c\n```\n\n重定向到日志文件\n```\ncat  sec-adv.stdout.log |grep  \"Fetch ad error\" > exception.log\n```\n\n远程拷贝到本地\n```\nscp c3_fetchAdError.log oliver@ip:/Users/oliver/tem\n```\n","source":"_posts/log-grep.md","raw":"---\ntitle: 线上日志排查\ndate: 2017-03-09 17:08:56\ntags: \n- 线上\n- 日志\n- log\n- 问题排查\ncategories: \n- tools\n---\n\n\n\n\n### 线上问题排查\n\nssh登录相关server，然后你可以想干什么干什么了。。。\n\n查看谋渠道出现的问题,使用grep命令，相关参数可[参考](http://man.linuxde.net/grep)\n```\ncat  sec-adv.stdout.log |grep  \"08-0\"\n```\n-C 显示前后20行\n\n```\ncat  sec-adv.stdout.log |grep  \"08-0\" -C30\n```\n统计广告拉取错误次数   -c 计算符合范本样式的列数。\n\n```\ncat  sec-adv.stdout.log |grep  \"Fetch ad error\" -c\n```\n\n重定向到日志文件\n```\ncat  sec-adv.stdout.log |grep  \"Fetch ad error\" > exception.log\n```\n\n远程拷贝到本地\n```\nscp c3_fetchAdError.log oliver@ip:/Users/oliver/tem\n```\n","slug":"log-grep","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7mx000et8dmuphdyppa","content":"<h3 id=\"线上问题排查\"><a href=\"#线上问题排查\" class=\"headerlink\" title=\"线上问题排查\"></a>线上问题排查</h3><p>ssh登录相关server，然后你可以想干什么干什么了。。。</p>\n<p>查看谋渠道出现的问题,使用grep命令，相关参数可<a href=\"http://man.linuxde.net/grep\" target=\"_blank\" rel=\"external\">参考</a><br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  <span class=\"built_in\">sec</span>-adv.<span class=\"keyword\">stdout</span>.<span class=\"built_in\">log</span> |grep  <span class=\"string\">\"08-0\"</span></div></pre></td></tr></table></figure></p>\n<p>-C 显示前后20行</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  <span class=\"built_in\">sec</span>-adv.<span class=\"keyword\">stdout</span>.<span class=\"built_in\">log</span> |grep  <span class=\"string\">\"08-0\"</span> -C30</div></pre></td></tr></table></figure>\n<p>统计广告拉取错误次数   -c 计算符合范本样式的列数。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  <span class=\"built_in\">sec</span>-adv.<span class=\"keyword\">stdout</span>.<span class=\"built_in\">log</span> |grep  <span class=\"string\">\"Fetch ad error\"</span> -c</div></pre></td></tr></table></figure>\n<p>重定向到日志文件<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  <span class=\"built_in\">sec</span>-adv.<span class=\"keyword\">stdout</span>.<span class=\"built_in\">log</span> |grep  <span class=\"string\">\"Fetch ad error\"</span> &gt; exception.<span class=\"built_in\">log</span></div></pre></td></tr></table></figure></p>\n<p>远程拷贝到本地<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp c3_fetchAdError.log oliver<span class=\"variable\">@ip</span><span class=\"symbol\">:/Users/oliver/tem</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"线上问题排查\"><a href=\"#线上问题排查\" class=\"headerlink\" title=\"线上问题排查\"></a>线上问题排查</h3><p>ssh登录相关server，然后你可以想干什么干什么了。。。</p>\n<p>查看谋渠道出现的问题,使用grep命令，相关参数可<a href=\"http://man.linuxde.net/grep\">参考</a><br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  <span class=\"built_in\">sec</span>-adv.<span class=\"keyword\">stdout</span>.<span class=\"built_in\">log</span> |grep  <span class=\"string\">\"08-0\"</span></div></pre></td></tr></table></figure></p>\n<p>-C 显示前后20行</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  <span class=\"built_in\">sec</span>-adv.<span class=\"keyword\">stdout</span>.<span class=\"built_in\">log</span> |grep  <span class=\"string\">\"08-0\"</span> -C30</div></pre></td></tr></table></figure>\n<p>统计广告拉取错误次数   -c 计算符合范本样式的列数。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  <span class=\"built_in\">sec</span>-adv.<span class=\"keyword\">stdout</span>.<span class=\"built_in\">log</span> |grep  <span class=\"string\">\"Fetch ad error\"</span> -c</div></pre></td></tr></table></figure>\n<p>重定向到日志文件<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  <span class=\"built_in\">sec</span>-adv.<span class=\"keyword\">stdout</span>.<span class=\"built_in\">log</span> |grep  <span class=\"string\">\"Fetch ad error\"</span> &gt; exception.<span class=\"built_in\">log</span></div></pre></td></tr></table></figure></p>\n<p>远程拷贝到本地<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp c3_fetchAdError.log oliver<span class=\"variable\">@ip</span><span class=\"symbol\">:/Users/oliver/tem</span></div></pre></td></tr></table></figure></p>\n"},{"title":"redis数据导入导出","date":"2017-04-25T03:21:20.000Z","_content":"\n\n简单的数据导出导出方法:\n\n## redis数据导出\n导出数据到某个文件overseaimei中\n```\necho \"smembers universal.01-2.imei\" | redis-cluster >> overseaimei.raw\n```\n此处的redis-cluster重使用alias替换了\n```\nalias redis-cluster='redis-cli -h 10.*.*.* -p 6382 -c'\n```\n等同于\n```\necho \"smembers universal.01-2.imei\" | redis-cli -h 10.*.*.* -p 6382 -c >> overseaimei.raw\n```\n\n## redis数据导入\n上述方式导出的是原始数据,在导入数据之前做一下简单数据处理,原始数据格式是这样的:\n```\n5acac4d190c93efa38964a66d4e7d996\n3e6cba815feb7bc14019fd17806b42e4\n50fedc7fff6024a307d9459e93c66647\n148eb49a710b839ca78569767ddb11bb\n41e1ea70094bb91f583b05424521b047\n```\n开头每行加一下redis的add命令,使用sed命令,具体用法参考下面说明:\n```\nsed 's/^/sadd universal.01-2.imei /g' overseaimei.raw  >> backimei.txt\n```\n更改完后的数据:\n```\nsadd universal.01-2.imei a2e8abe1a087be26fc011db57a9e7b30\nsadd universal.01-2.imei fe99ee3d3d48f878666c5482d2310632\nsadd universal.01-2.imei 5acac4d190c93efa38964a66d4e7d996\nsadd universal.01-2.imei 3e6cba815feb7bc14019fd17806b42e4\nsadd universal.01-2.imei 50fedc7fff6024a307d9459e93c66647\nsadd universal.01-2.imei 148eb49a710b839ca78569767ddb11b\n```\n\n执行导入操作:\n```\ncat backimei.txt | redis-cli -h 10.38.*.* -p 6380 -c\n```\n\n至此完成导入操作,= O(∩_∩)O~\n\n## sed 简单用法\n详细可以参考陈浩老师的[博客](http://coolshell.cn/articles/9104.html)\n相关正则表达式\n```\n^ 表示一行的开头。如：/^#/ 以#开头的匹配。\n$ 表示一行的结尾。如：/}$/ 以}结尾的匹配。\n\\< 表示词首。 如 \\<abc 表示以 abc 为首的詞。\n\\> 表示词尾。 如 abc\\> 表示以 abc 結尾的詞。\n. 表示任何单个字符。\n* 表示某个字符出现了0次或多次。\n[ ] 字符集合。 如：[abc]表示匹配a或b或c，还有[a-zA-Z]表示匹配所有的26个字符。如果其中有^表示反，如[^a]表示非a的字符\n```\n例子:\n在每一行最前面加点东西：\n```\nsed 's/^/#/g' pets.txt\n```\ns表示替换命令，/^表示开头，/#表示把匹配替换成#，/g 表示一行上的替换所有的匹配,简单解释就是在行首添加#\n\n同样的在每一行尾加点东西：\n```\nsed 's/$/ --- /g' pets.txt\n```\n","source":"_posts/redis-export.md","raw":"---\ntitle: redis数据导入导出\ndate: 2017-04-25 11:21:20\ntags:\n- redis\n- sed\n- 导入\n- 导出\ncategories: \n- tools\n---\n\n\n简单的数据导出导出方法:\n\n## redis数据导出\n导出数据到某个文件overseaimei中\n```\necho \"smembers universal.01-2.imei\" | redis-cluster >> overseaimei.raw\n```\n此处的redis-cluster重使用alias替换了\n```\nalias redis-cluster='redis-cli -h 10.*.*.* -p 6382 -c'\n```\n等同于\n```\necho \"smembers universal.01-2.imei\" | redis-cli -h 10.*.*.* -p 6382 -c >> overseaimei.raw\n```\n\n## redis数据导入\n上述方式导出的是原始数据,在导入数据之前做一下简单数据处理,原始数据格式是这样的:\n```\n5acac4d190c93efa38964a66d4e7d996\n3e6cba815feb7bc14019fd17806b42e4\n50fedc7fff6024a307d9459e93c66647\n148eb49a710b839ca78569767ddb11bb\n41e1ea70094bb91f583b05424521b047\n```\n开头每行加一下redis的add命令,使用sed命令,具体用法参考下面说明:\n```\nsed 's/^/sadd universal.01-2.imei /g' overseaimei.raw  >> backimei.txt\n```\n更改完后的数据:\n```\nsadd universal.01-2.imei a2e8abe1a087be26fc011db57a9e7b30\nsadd universal.01-2.imei fe99ee3d3d48f878666c5482d2310632\nsadd universal.01-2.imei 5acac4d190c93efa38964a66d4e7d996\nsadd universal.01-2.imei 3e6cba815feb7bc14019fd17806b42e4\nsadd universal.01-2.imei 50fedc7fff6024a307d9459e93c66647\nsadd universal.01-2.imei 148eb49a710b839ca78569767ddb11b\n```\n\n执行导入操作:\n```\ncat backimei.txt | redis-cli -h 10.38.*.* -p 6380 -c\n```\n\n至此完成导入操作,= O(∩_∩)O~\n\n## sed 简单用法\n详细可以参考陈浩老师的[博客](http://coolshell.cn/articles/9104.html)\n相关正则表达式\n```\n^ 表示一行的开头。如：/^#/ 以#开头的匹配。\n$ 表示一行的结尾。如：/}$/ 以}结尾的匹配。\n\\< 表示词首。 如 \\<abc 表示以 abc 为首的詞。\n\\> 表示词尾。 如 abc\\> 表示以 abc 結尾的詞。\n. 表示任何单个字符。\n* 表示某个字符出现了0次或多次。\n[ ] 字符集合。 如：[abc]表示匹配a或b或c，还有[a-zA-Z]表示匹配所有的26个字符。如果其中有^表示反，如[^a]表示非a的字符\n```\n例子:\n在每一行最前面加点东西：\n```\nsed 's/^/#/g' pets.txt\n```\ns表示替换命令，/^表示开头，/#表示把匹配替换成#，/g 表示一行上的替换所有的匹配,简单解释就是在行首添加#\n\n同样的在每一行尾加点东西：\n```\nsed 's/$/ --- /g' pets.txt\n```\n","slug":"redis-export","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7n0000it8dm2p124p7w","content":"<p>简单的数据导出导出方法:</p>\n<h2 id=\"redis数据导出\"><a href=\"#redis数据导出\" class=\"headerlink\" title=\"redis数据导出\"></a>redis数据导出</h2><p>导出数据到某个文件overseaimei中<br><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo <span class=\"string\">\"smembers universal.01-2.imei\"</span> <span class=\"string\">| redis-cluster &gt;&gt; overseaimei.raw</span></div></pre></td></tr></table></figure></p>\n<p>此处的redis-cluster重使用alias替换了<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">alias</span> redis-<span class=\"keyword\">cluster</span>=<span class=\"string\">'redis-cli -h 10.*.*.* -p 6382 -c'</span></div></pre></td></tr></table></figure></p>\n<p>等同于<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo <span class=\"string\">\"smembers universal.01-2.imei\"</span> | redis-cli -h <span class=\"number\">10.</span>*.*.* -p <span class=\"number\">6382</span> -c &gt;&gt; overseaimei.raw</div></pre></td></tr></table></figure></p>\n<h2 id=\"redis数据导入\"><a href=\"#redis数据导入\" class=\"headerlink\" title=\"redis数据导入\"></a>redis数据导入</h2><p>上述方式导出的是原始数据,在导入数据之前做一下简单数据处理,原始数据格式是这样的:<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">5</span>acac4d190c93efa38964a66d4e7d996</div><div class=\"line\"><span class=\"number\">3e6</span>cba815feb7bc14019fd17806b42e4</div><div class=\"line\"><span class=\"number\">50</span>fedc7fff6024a307d9459e93c66647</div><div class=\"line\"><span class=\"number\">148</span>eb49a710b839ca78569767ddb11bb</div><div class=\"line\"><span class=\"number\">41e1</span>ea70094bb91f583b05424521b047</div></pre></td></tr></table></figure></p>\n<p>开头每行加一下redis的add命令,使用sed命令,具体用法参考下面说明:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sed <span class=\"string\">'s/^/sadd universal.01-2.imei /g'</span> overseaimei.raw  <span class=\"meta\">&gt;&gt; </span>backimei.txt</div></pre></td></tr></table></figure></p>\n<p>更改完后的数据:<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei a2e8abe1a087be26fc011db57a9e7b30</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei fe99ee3d3d48f878666c5482d2310632</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei <span class=\"number\">5</span>acac4d190c93efa38964a66d4e7d996</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei <span class=\"number\">3e6</span>cba815feb7bc14019fd17806b42e4</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei <span class=\"number\">50</span>fedc7fff6024a307d9459e93c66647</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei <span class=\"number\">148</span>eb49a710b839ca78569767ddb11b</div></pre></td></tr></table></figure></p>\n<p>执行导入操作:<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat backimei.txt | redis-cli -h <span class=\"number\">10.38</span>.*.* -p <span class=\"number\">6380</span> -c</div></pre></td></tr></table></figure></p>\n<p>至此完成导入操作,= O(∩_∩)O~</p>\n<h2 id=\"sed-简单用法\"><a href=\"#sed-简单用法\" class=\"headerlink\" title=\"sed 简单用法\"></a>sed 简单用法</h2><p>详细可以参考陈浩老师的<a href=\"http://coolshell.cn/articles/9104.html\" target=\"_blank\" rel=\"external\">博客</a><br>相关正则表达式<br><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">^ 表示一行的开头。如：<span class=\"regexp\">/^#/</span> 以<span class=\"comment\">#开头的匹配。</span></div><div class=\"line\">$ 表示一行的结尾。如：<span class=\"regexp\">/&#125;$/</span> 以&#125;结尾的匹配。</div><div class=\"line\"><span class=\"string\">\\&lt;</span> 表示词首。 如 <span class=\"string\">\\&lt;abc</span> 表示以 abc 为首的詞。</div><div class=\"line\"><span class=\"string\">\\&gt;</span> 表示词尾。 如 abc<span class=\"string\">\\&gt;</span> 表示以 abc 結尾的詞。</div><div class=\"line\">. 表示任何单个字符。</div><div class=\"line\">* 表示某个字符出现了<span class=\"number\">0</span>次或多次。</div><div class=\"line\">[ ] 字符集合。 如：[abc]表示匹配a或b或c，还有[a-zA-Z]表示匹配所有的<span class=\"number\">26</span>个字符。如果其中有^表示反，如[^a]表示非a的字符</div></pre></td></tr></table></figure></p>\n<p>例子:<br>在每一行最前面加点东西：<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">sed</span> <span class=\"string\">'s/^/#/g'</span> pets.txt</div></pre></td></tr></table></figure></p>\n<p>s表示替换命令，/^表示开头，/#表示把匹配替换成#，/g 表示一行上的替换所有的匹配,简单解释就是在行首添加#</p>\n<p>同样的在每一行尾加点东西：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sed <span class=\"symbol\">'s</span>/$/ <span class=\"comment\">--- /g' pets.txt</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>简单的数据导出导出方法:</p>\n<h2 id=\"redis数据导出\"><a href=\"#redis数据导出\" class=\"headerlink\" title=\"redis数据导出\"></a>redis数据导出</h2><p>导出数据到某个文件overseaimei中<br><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo <span class=\"string\">\"smembers universal.01-2.imei\"</span> <span class=\"string\">| redis-cluster &gt;&gt; overseaimei.raw</span></div></pre></td></tr></table></figure></p>\n<p>此处的redis-cluster重使用alias替换了<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">alias</span> redis-<span class=\"keyword\">cluster</span>=<span class=\"string\">'redis-cli -h 10.*.*.* -p 6382 -c'</span></div></pre></td></tr></table></figure></p>\n<p>等同于<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo <span class=\"string\">\"smembers universal.01-2.imei\"</span> | redis-cli -h <span class=\"number\">10.</span>*.*.* -p <span class=\"number\">6382</span> -c &gt;&gt; overseaimei.raw</div></pre></td></tr></table></figure></p>\n<h2 id=\"redis数据导入\"><a href=\"#redis数据导入\" class=\"headerlink\" title=\"redis数据导入\"></a>redis数据导入</h2><p>上述方式导出的是原始数据,在导入数据之前做一下简单数据处理,原始数据格式是这样的:<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">5</span>acac4d190c93efa38964a66d4e7d996</div><div class=\"line\"><span class=\"number\">3e6</span>cba815feb7bc14019fd17806b42e4</div><div class=\"line\"><span class=\"number\">50</span>fedc7fff6024a307d9459e93c66647</div><div class=\"line\"><span class=\"number\">148</span>eb49a710b839ca78569767ddb11bb</div><div class=\"line\"><span class=\"number\">41e1</span>ea70094bb91f583b05424521b047</div></pre></td></tr></table></figure></p>\n<p>开头每行加一下redis的add命令,使用sed命令,具体用法参考下面说明:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sed <span class=\"string\">'s/^/sadd universal.01-2.imei /g'</span> overseaimei.raw  <span class=\"meta\">&gt;&gt; </span>backimei.txt</div></pre></td></tr></table></figure></p>\n<p>更改完后的数据:<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei a2e8abe1a087be26fc011db57a9e7b30</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei fe99ee3d3d48f878666c5482d2310632</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei <span class=\"number\">5</span>acac4d190c93efa38964a66d4e7d996</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei <span class=\"number\">3e6</span>cba815feb7bc14019fd17806b42e4</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei <span class=\"number\">50</span>fedc7fff6024a307d9459e93c66647</div><div class=\"line\">sadd universal<span class=\"number\">.01</span><span class=\"number\">-2.</span>imei <span class=\"number\">148</span>eb49a710b839ca78569767ddb11b</div></pre></td></tr></table></figure></p>\n<p>执行导入操作:<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat backimei.txt | redis-cli -h <span class=\"number\">10.38</span>.*.* -p <span class=\"number\">6380</span> -c</div></pre></td></tr></table></figure></p>\n<p>至此完成导入操作,= O(∩_∩)O~</p>\n<h2 id=\"sed-简单用法\"><a href=\"#sed-简单用法\" class=\"headerlink\" title=\"sed 简单用法\"></a>sed 简单用法</h2><p>详细可以参考陈浩老师的<a href=\"http://coolshell.cn/articles/9104.html\">博客</a><br>相关正则表达式<br><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">^ 表示一行的开头。如：<span class=\"regexp\">/^#/</span> 以<span class=\"comment\">#开头的匹配。</span></div><div class=\"line\">$ 表示一行的结尾。如：<span class=\"regexp\">/&#125;$/</span> 以&#125;结尾的匹配。</div><div class=\"line\"><span class=\"string\">\\&lt;</span> 表示词首。 如 <span class=\"string\">\\&lt;abc</span> 表示以 abc 为首的詞。</div><div class=\"line\"><span class=\"string\">\\&gt;</span> 表示词尾。 如 abc<span class=\"string\">\\&gt;</span> 表示以 abc 結尾的詞。</div><div class=\"line\">. 表示任何单个字符。</div><div class=\"line\">* 表示某个字符出现了<span class=\"number\">0</span>次或多次。</div><div class=\"line\">[ ] 字符集合。 如：[abc]表示匹配a或b或c，还有[a-zA-Z]表示匹配所有的<span class=\"number\">26</span>个字符。如果其中有^表示反，如[^a]表示非a的字符</div></pre></td></tr></table></figure></p>\n<p>例子:<br>在每一行最前面加点东西：<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">sed</span> <span class=\"string\">'s/^/#/g'</span> pets.txt</div></pre></td></tr></table></figure></p>\n<p>s表示替换命令，/^表示开头，/#表示把匹配替换成#，/g 表示一行上的替换所有的匹配,简单解释就是在行首添加#</p>\n<p>同样的在每一行尾加点东西：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sed <span class=\"symbol\">'s</span>/$/ <span class=\"comment\">--- /g' pets.txt</span></div></pre></td></tr></table></figure></p>\n"},{"title":"分布式服务 —— redis和DB数据一致性","date":"2017-07-09T09:08:56.000Z","_content":"\n\n# 缓存和DB的数据一致性\nredis与Mysql的数据一致性问题,有时候我们为了提高系统的反应速度,减少IO频率,会选择减少db的读压力，使用cache做缓存,加快读速度.\n\n## 缓存的选择\n- 缓存:redis (redis-cluster) / memcache\n- JVM 堆内存: (server端的本地缓存) ,适合存放简短的数据,如果数据量较大会影响server的堆内存,影响GC,对于并发量比较高的可以选择使用ConcurrentHashMap;\n- 堆外缓存: 堆外内存就是把内存对象分配在Java虚拟机的堆以外的内存，这些内存直接受操作系统管理（而不是虚拟机），这样做的结果就是能够在一定程度上减少垃圾回收对应用程序造成的影响。\n\n**堆外缓存相关开源实现**  \n\n名称 | 介绍\n--- | ---\nEhcache | Ehcache 3.0：3.0基于其商业公司一个非开源的堆外组件的实现。\nChronical Map | OpenHFT包括很多类库，使用这些类库很少产生垃圾，并且应用程序使用这些类库后也很少发生Minor GC。类库主要包括：Chronicle Map，Chronicle Queue等等。\nOHC | 来源于Cassandra 3.0， Apache v2。\n\n\n\n会引起cache一致性问题。因为db会有事务性导致回滚，而cache无法回滚，会导致脏数据。\n\n## 缓存更新问题\n\n> 【推荐阅读】，缓存架构设计细节二三事：\n\nhttps://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=404087915&idx=1&sn=075664193f334874a3fc87fd4f712ebc&scene=21#wechat_redirect\n\n重点说下写：如果写db成功后，更新cache，会有事务性和并发性两方面问题。\n\n1. 事务性问题：\n一个事务包含多个db操作，操作一些db成功，写cache成功，操作二写db失败，事务回滚，db数据回滚，cache无法回滚，导致脏数据。\n\n2. 并发性问题：\n两个更新操作并发，如更新名字，并且cache中key以名字为关键字，更新一写db成功，写缓存XXXX_name1成功。更新二写db成功，写缓存XXXX_name2成功。导致cache脏数据。\n\n这里再说一下一般更新操作顺序是失效cache，写db，写cache。会有并发问题。\n\n两个并发操作，更新和读，左边写线程，右边为读线程\n\n①更新操作删除cache\n\n②读操作读cache，miss\n\n③读db，此时是旧数据 \n\n④写db，写cache\n\n⑤写cache 导致cache中脏数据。\n\n虽然写db成功后，失效cache也会有并发问题：更新和读并发   \n①查询cache，miss，读db\n\n②写db，失效cache\n\n③写chache\n\n导致cache中脏数据，但是概率极低，并且一般db中写时间长于读时间，并且写会锁表，读需要在写前进入，并且要晚于写操作更新缓存，所以发生概率极低。\n## 缓存更新推荐方式\n\n解决方法是 2PC （两阶段提交协议）或是Paxos协议，代价较大。\n\n所以我们采用的方式是：\n\n1. 写数据只写db\n2. 先失效cache，再更新数据更新db，（最好不逆序，具体可以参考推荐文章里的介绍）\n3. 读数据，先读cache，未命中读db，写入cache\n","source":"_posts/redisAndDB.md","raw":"---\ntitle: 分布式服务 —— redis和DB数据一致性\ndate: 2017-07-09 17:08:56\ntags:\n- 分布式数据一致性\n- redis\n- DB\ncategories:\n- 分布式\n---\n\n\n# 缓存和DB的数据一致性\nredis与Mysql的数据一致性问题,有时候我们为了提高系统的反应速度,减少IO频率,会选择减少db的读压力，使用cache做缓存,加快读速度.\n\n## 缓存的选择\n- 缓存:redis (redis-cluster) / memcache\n- JVM 堆内存: (server端的本地缓存) ,适合存放简短的数据,如果数据量较大会影响server的堆内存,影响GC,对于并发量比较高的可以选择使用ConcurrentHashMap;\n- 堆外缓存: 堆外内存就是把内存对象分配在Java虚拟机的堆以外的内存，这些内存直接受操作系统管理（而不是虚拟机），这样做的结果就是能够在一定程度上减少垃圾回收对应用程序造成的影响。\n\n**堆外缓存相关开源实现**  \n\n名称 | 介绍\n--- | ---\nEhcache | Ehcache 3.0：3.0基于其商业公司一个非开源的堆外组件的实现。\nChronical Map | OpenHFT包括很多类库，使用这些类库很少产生垃圾，并且应用程序使用这些类库后也很少发生Minor GC。类库主要包括：Chronicle Map，Chronicle Queue等等。\nOHC | 来源于Cassandra 3.0， Apache v2。\n\n\n\n会引起cache一致性问题。因为db会有事务性导致回滚，而cache无法回滚，会导致脏数据。\n\n## 缓存更新问题\n\n> 【推荐阅读】，缓存架构设计细节二三事：\n\nhttps://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=404087915&idx=1&sn=075664193f334874a3fc87fd4f712ebc&scene=21#wechat_redirect\n\n重点说下写：如果写db成功后，更新cache，会有事务性和并发性两方面问题。\n\n1. 事务性问题：\n一个事务包含多个db操作，操作一些db成功，写cache成功，操作二写db失败，事务回滚，db数据回滚，cache无法回滚，导致脏数据。\n\n2. 并发性问题：\n两个更新操作并发，如更新名字，并且cache中key以名字为关键字，更新一写db成功，写缓存XXXX_name1成功。更新二写db成功，写缓存XXXX_name2成功。导致cache脏数据。\n\n这里再说一下一般更新操作顺序是失效cache，写db，写cache。会有并发问题。\n\n两个并发操作，更新和读，左边写线程，右边为读线程\n\n①更新操作删除cache\n\n②读操作读cache，miss\n\n③读db，此时是旧数据 \n\n④写db，写cache\n\n⑤写cache 导致cache中脏数据。\n\n虽然写db成功后，失效cache也会有并发问题：更新和读并发   \n①查询cache，miss，读db\n\n②写db，失效cache\n\n③写chache\n\n导致cache中脏数据，但是概率极低，并且一般db中写时间长于读时间，并且写会锁表，读需要在写前进入，并且要晚于写操作更新缓存，所以发生概率极低。\n## 缓存更新推荐方式\n\n解决方法是 2PC （两阶段提交协议）或是Paxos协议，代价较大。\n\n所以我们采用的方式是：\n\n1. 写数据只写db\n2. 先失效cache，再更新数据更新db，（最好不逆序，具体可以参考推荐文章里的介绍）\n3. 读数据，先读cache，未命中读db，写入cache\n","slug":"redisAndDB","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7n1000kt8dm1na87emb","content":"<h1 id=\"缓存和DB的数据一致性\"><a href=\"#缓存和DB的数据一致性\" class=\"headerlink\" title=\"缓存和DB的数据一致性\"></a>缓存和DB的数据一致性</h1><p>redis与Mysql的数据一致性问题,有时候我们为了提高系统的反应速度,减少IO频率,会选择减少db的读压力，使用cache做缓存,加快读速度.</p>\n<h2 id=\"缓存的选择\"><a href=\"#缓存的选择\" class=\"headerlink\" title=\"缓存的选择\"></a>缓存的选择</h2><ul>\n<li>缓存:redis (redis-cluster) / memcache</li>\n<li>JVM 堆内存: (server端的本地缓存) ,适合存放简短的数据,如果数据量较大会影响server的堆内存,影响GC,对于并发量比较高的可以选择使用ConcurrentHashMap;</li>\n<li>堆外缓存: 堆外内存就是把内存对象分配在Java虚拟机的堆以外的内存，这些内存直接受操作系统管理（而不是虚拟机），这样做的结果就是能够在一定程度上减少垃圾回收对应用程序造成的影响。</li>\n</ul>\n<p><strong>堆外缓存相关开源实现</strong>  </p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ehcache</td>\n<td>Ehcache 3.0：3.0基于其商业公司一个非开源的堆外组件的实现。</td>\n</tr>\n<tr>\n<td>Chronical Map</td>\n<td>OpenHFT包括很多类库，使用这些类库很少产生垃圾，并且应用程序使用这些类库后也很少发生Minor GC。类库主要包括：Chronicle Map，Chronicle Queue等等。</td>\n</tr>\n<tr>\n<td>OHC</td>\n<td>来源于Cassandra 3.0， Apache v2。</td>\n</tr>\n</tbody>\n</table>\n<p>会引起cache一致性问题。因为db会有事务性导致回滚，而cache无法回滚，会导致脏数据。</p>\n<h2 id=\"缓存更新问题\"><a href=\"#缓存更新问题\" class=\"headerlink\" title=\"缓存更新问题\"></a>缓存更新问题</h2><blockquote>\n<p>【推荐阅读】，缓存架构设计细节二三事：</p>\n</blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=404087915&amp;idx=1&amp;sn=075664193f334874a3fc87fd4f712ebc&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=404087915&amp;idx=1&amp;sn=075664193f334874a3fc87fd4f712ebc&amp;scene=21#wechat_redirect</a></p>\n<p>重点说下写：如果写db成功后，更新cache，会有事务性和并发性两方面问题。</p>\n<ol>\n<li><p>事务性问题：<br>一个事务包含多个db操作，操作一些db成功，写cache成功，操作二写db失败，事务回滚，db数据回滚，cache无法回滚，导致脏数据。</p>\n</li>\n<li><p>并发性问题：<br>两个更新操作并发，如更新名字，并且cache中key以名字为关键字，更新一写db成功，写缓存XXXX_name1成功。更新二写db成功，写缓存XXXX_name2成功。导致cache脏数据。</p>\n</li>\n</ol>\n<p>这里再说一下一般更新操作顺序是失效cache，写db，写cache。会有并发问题。</p>\n<p>两个并发操作，更新和读，左边写线程，右边为读线程</p>\n<p>①更新操作删除cache</p>\n<p>②读操作读cache，miss</p>\n<p>③读db，此时是旧数据 </p>\n<p>④写db，写cache</p>\n<p>⑤写cache 导致cache中脏数据。</p>\n<p>虽然写db成功后，失效cache也会有并发问题：更新和读并发<br>①查询cache，miss，读db</p>\n<p>②写db，失效cache</p>\n<p>③写chache</p>\n<p>导致cache中脏数据，但是概率极低，并且一般db中写时间长于读时间，并且写会锁表，读需要在写前进入，并且要晚于写操作更新缓存，所以发生概率极低。</p>\n<h2 id=\"缓存更新推荐方式\"><a href=\"#缓存更新推荐方式\" class=\"headerlink\" title=\"缓存更新推荐方式\"></a>缓存更新推荐方式</h2><p>解决方法是 2PC （两阶段提交协议）或是Paxos协议，代价较大。</p>\n<p>所以我们采用的方式是：</p>\n<ol>\n<li>写数据只写db</li>\n<li>先失效cache，再更新数据更新db，（最好不逆序，具体可以参考推荐文章里的介绍）</li>\n<li>读数据，先读cache，未命中读db，写入cache</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"缓存和DB的数据一致性\"><a href=\"#缓存和DB的数据一致性\" class=\"headerlink\" title=\"缓存和DB的数据一致性\"></a>缓存和DB的数据一致性</h1><p>redis与Mysql的数据一致性问题,有时候我们为了提高系统的反应速度,减少IO频率,会选择减少db的读压力，使用cache做缓存,加快读速度.</p>\n<h2 id=\"缓存的选择\"><a href=\"#缓存的选择\" class=\"headerlink\" title=\"缓存的选择\"></a>缓存的选择</h2><ul>\n<li>缓存:redis (redis-cluster) / memcache</li>\n<li>JVM 堆内存: (server端的本地缓存) ,适合存放简短的数据,如果数据量较大会影响server的堆内存,影响GC,对于并发量比较高的可以选择使用ConcurrentHashMap;</li>\n<li>堆外缓存: 堆外内存就是把内存对象分配在Java虚拟机的堆以外的内存，这些内存直接受操作系统管理（而不是虚拟机），这样做的结果就是能够在一定程度上减少垃圾回收对应用程序造成的影响。</li>\n</ul>\n<p><strong>堆外缓存相关开源实现</strong>  </p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ehcache</td>\n<td>Ehcache 3.0：3.0基于其商业公司一个非开源的堆外组件的实现。</td>\n</tr>\n<tr>\n<td>Chronical Map</td>\n<td>OpenHFT包括很多类库，使用这些类库很少产生垃圾，并且应用程序使用这些类库后也很少发生Minor GC。类库主要包括：Chronicle Map，Chronicle Queue等等。</td>\n</tr>\n<tr>\n<td>OHC</td>\n<td>来源于Cassandra 3.0， Apache v2。</td>\n</tr>\n</tbody>\n</table>\n<p>会引起cache一致性问题。因为db会有事务性导致回滚，而cache无法回滚，会导致脏数据。</p>\n<h2 id=\"缓存更新问题\"><a href=\"#缓存更新问题\" class=\"headerlink\" title=\"缓存更新问题\"></a>缓存更新问题</h2><blockquote>\n<p>【推荐阅读】，缓存架构设计细节二三事：</p>\n</blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=404087915&amp;idx=1&amp;sn=075664193f334874a3fc87fd4f712ebc&amp;scene=21#wechat_redirect\">https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=404087915&amp;idx=1&amp;sn=075664193f334874a3fc87fd4f712ebc&amp;scene=21#wechat_redirect</a></p>\n<p>重点说下写：如果写db成功后，更新cache，会有事务性和并发性两方面问题。</p>\n<ol>\n<li><p>事务性问题：<br>一个事务包含多个db操作，操作一些db成功，写cache成功，操作二写db失败，事务回滚，db数据回滚，cache无法回滚，导致脏数据。</p>\n</li>\n<li><p>并发性问题：<br>两个更新操作并发，如更新名字，并且cache中key以名字为关键字，更新一写db成功，写缓存XXXX_name1成功。更新二写db成功，写缓存XXXX_name2成功。导致cache脏数据。</p>\n</li>\n</ol>\n<p>这里再说一下一般更新操作顺序是失效cache，写db，写cache。会有并发问题。</p>\n<p>两个并发操作，更新和读，左边写线程，右边为读线程</p>\n<p>①更新操作删除cache</p>\n<p>②读操作读cache，miss</p>\n<p>③读db，此时是旧数据 </p>\n<p>④写db，写cache</p>\n<p>⑤写cache 导致cache中脏数据。</p>\n<p>虽然写db成功后，失效cache也会有并发问题：更新和读并发<br>①查询cache，miss，读db</p>\n<p>②写db，失效cache</p>\n<p>③写chache</p>\n<p>导致cache中脏数据，但是概率极低，并且一般db中写时间长于读时间，并且写会锁表，读需要在写前进入，并且要晚于写操作更新缓存，所以发生概率极低。</p>\n<h2 id=\"缓存更新推荐方式\"><a href=\"#缓存更新推荐方式\" class=\"headerlink\" title=\"缓存更新推荐方式\"></a>缓存更新推荐方式</h2><p>解决方法是 2PC （两阶段提交协议）或是Paxos协议，代价较大。</p>\n<p>所以我们采用的方式是：</p>\n<ol>\n<li>写数据只写db</li>\n<li>先失效cache，再更新数据更新db，（最好不逆序，具体可以参考推荐文章里的介绍）</li>\n<li>读数据，先读cache，未命中读db，写入cache</li>\n</ol>\n"},{"title":"ReentrantLock你真的了解吗","date":"2017-07-01T07:57:25.000Z","_content":"\n你真的了解ReentrantLock吗？顾名思义，这是可重入锁的意思，废话不多说我们直接看源码：\n## 结构组成\n```\npublic class ReentrantLock implements Lock, java.io.Serializable {\n    private static final long serialVersionUID = 7373984872572414699L;\n    /** Synchronizer providing all implementation mechanics */\n    private final Sync sync;\n\n    /**\n     * Base of synchronization control for this lock. Subclassed\n     * into fair and nonfair versions below. Uses AQS state to\n     * represent the number of holds on the lock.\n     */\n    abstract static class Sync extends AbstractQueuedSynchronizer {\n    ...\n    }\n    static final class NonfairSync extends Sync {\n        private static final long serialVersionUID = 7316153563782823691L;\n\n        \n    }\n\n    /**\n     * Sync object for fair locks\n     */\n    static final class FairSync extends Sync {\n    }\n    \n```\n世人都知道这个是基于AQS实现的，AQS具体是什么，不是本文重点，后续解释；\n1. ReentrantLock 有个抽象内部类，Sync 继承了AQS  \n2. 有两个静态内部类，FairSync 用与公平锁，NonFairSync用与非公平锁.  \n\n## 初始化\n1. 默认初始化\n```\n    public ReentrantLock() {\n        sync = new NonfairSync();\n    }\n```\n默认初始化生成了一个非公平锁；\n\n## 加锁操作\n```\n final void lock() {\n            if (compareAndSetState(0, 1))\n                setExclusiveOwnerThread(Thread.currentThread());\n            else\n                acquire(1);\n        }\n\n        protected final boolean tryAcquire(int acquires) {\n            return nonfairTryAcquire(acquires);\n        }\n```\ncompareAndSetState（）方法，设置当前的锁占用状态；实际上是设置了AQS的state的状态，由0设置为1，unsafe是native实现。（并发包里有好多工具类的实现，最后的落脚点在unsafe的native方法上）。  \n- 如果设置成功，表示线程获初次取锁成功，然后设置当前的线程为锁的独占线程（setExclusiveOwnerThread（））。\n```\n    protected final boolean compareAndSetState(int expect, int update) {\n        // See below for intrinsics setup to support this\n        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n    }\n```\n- 如果失败，表示已经有线程获得了锁，做可重入的处理。\nacquire(1),此方法是AQS的final方法：\n```\n    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n```\ntryAcquire是抽象方法，在NonSync中overwrite了，这个源码上面已经提到了，NonSync中此方法调用了nonfairTryAcquire（），我们看一下做了什么操作：\n```\n/**\n         * Performs non-fair tryLock.  tryAcquire is implemented in\n         * subclasses, but both need nonfair try for trylock method.\n         */\n        final boolean nonfairTryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                if (compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0) // overflow\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n```\ngetState()是获取state的数值，此值是个volatile变量（主要是保持内存可见性）,用来标记重入锁的重入次数\n```\n    /**\n     * The synchronization state.\n     */\n    private volatile int state;\n```\n- 如果c==0 表示初次获取锁，此时set  state=1 ,然后设置独占锁的线程为当前线程；\n- 如果c !=0 表示锁已被获取，判读是否加锁操作是已经占领锁的线程发起的，如果是，就对state+1 操作，重入次数+1； （nextc<0 属于加锁次数达到int最大值溢出所致）\n- 如果非当前线程尝试加锁，就返回false了\n\n回到上述的acquire方法，判读条件：\n```\n    if (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n      selfInterrupt();\n    \n    static void selfInterrupt() {\n        Thread.currentThread().interrupt();\n    }\n```\n不满足条件重入锁的条件，做入队操作（这里的入队实际上是入链表操作）,入队成功，调用thread的中断方法（具体中断机制这里不描述，感兴趣的可以自行学习），继续深入源码，入队部分：\n```\n    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n第二个if： 获取锁失败，park 并检查中断标志位，然后设置中断标志位为true；\n```\n    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        if (ws == Node.SIGNAL)\n            /*\n             * This node has already set status asking a release\n             * to signal it, so it can safely park.\n             */\n            return true;\n        if (ws > 0) {\n            /*\n             * Predecessor was cancelled. Skip over predecessors and\n             * indicate retry.\n             */\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /*\n             * waitStatus must be 0 or PROPAGATE.  Indicate that we\n             * need a signal, but don't park yet.  Caller will need to\n             * retry to make sure it cannot acquire before parking.\n             */\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n关键的线程阻塞代码；park操作\n```\n    private final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);\n        return Thread.interrupted();\n    }\n```\n我们看下park方法源码：\n```\n    public static void park(Object blocker) {\n        Thread t = Thread.currentThread();\n        setBlocker(t, blocker);\n        UNSAFE.park(false, 0L);\n        setBlocker(t, null);\n    }\n```\n调用了unsafe的park方法：最终把线程交给系统（linux）内核进行阻塞；\n\n落实到unsafe方法的时候，好多 CAS（compare and set），太常见了，O(∩_∩)O~，\n```\n    /**\n     * CAS waitStatus field of a node.\n     */\n    private static final boolean compareAndSetWaitStatus(Node node,\n                                                         int expect,\n                                                         int update) {\n        return unsafe.compareAndSwapInt(node, waitStatusOffset,\n                                        expect, update);\n    }\n```\n\n## 解锁部分\n此部分略过...\n\n## Lock VS Synchronized\nAbstractQueuedSynchronizer通过构造一个基于阻塞的CLH队列容纳所有的阻塞线程，而对该队列的操作均通过Lock-Free（CAS）操作，但对已经获得锁的线程而言，ReentrantLock实现了偏向锁的功能。\nsynchronized的底层也是一个基于CAS操作的等待队列，但JVM实现的更精细，把等待队列分为ContentionList和EntryList，目的是为了降低线程的出列速度；当然也实现了偏向锁，从数据结构来说二者设计没有本质区别。但synchronized还实现了自旋锁，并针对不同的系统和硬件体系进行了优化，而Lock则完全依靠系统阻塞挂起等待线程。\n当然Lock比synchronized更适合在应用层扩展，可以继承AbstractQueuedSynchronizer定义各种实现，比如实现读写锁（ReadWriteLock），公平或不公平锁；同时，Lock对应的Condition也比wait/notify要方便的多、灵活的多。\n\n> 参考链接：  \nhttp://blog.csdn.net/chen77716/article/details/6641477\nhttp://www.cnblogs.com/timlearn/p/4008783.html\n","source":"_posts/reentrantlock.md","raw":"---\ntitle: ReentrantLock你真的了解吗\ndate: 2017-07-01 15:57:25\ntags:\n- JDK源码\n- Lock\n- ReentrantLock\ncategories:\n- 高并发\n---\n\n你真的了解ReentrantLock吗？顾名思义，这是可重入锁的意思，废话不多说我们直接看源码：\n## 结构组成\n```\npublic class ReentrantLock implements Lock, java.io.Serializable {\n    private static final long serialVersionUID = 7373984872572414699L;\n    /** Synchronizer providing all implementation mechanics */\n    private final Sync sync;\n\n    /**\n     * Base of synchronization control for this lock. Subclassed\n     * into fair and nonfair versions below. Uses AQS state to\n     * represent the number of holds on the lock.\n     */\n    abstract static class Sync extends AbstractQueuedSynchronizer {\n    ...\n    }\n    static final class NonfairSync extends Sync {\n        private static final long serialVersionUID = 7316153563782823691L;\n\n        \n    }\n\n    /**\n     * Sync object for fair locks\n     */\n    static final class FairSync extends Sync {\n    }\n    \n```\n世人都知道这个是基于AQS实现的，AQS具体是什么，不是本文重点，后续解释；\n1. ReentrantLock 有个抽象内部类，Sync 继承了AQS  \n2. 有两个静态内部类，FairSync 用与公平锁，NonFairSync用与非公平锁.  \n\n## 初始化\n1. 默认初始化\n```\n    public ReentrantLock() {\n        sync = new NonfairSync();\n    }\n```\n默认初始化生成了一个非公平锁；\n\n## 加锁操作\n```\n final void lock() {\n            if (compareAndSetState(0, 1))\n                setExclusiveOwnerThread(Thread.currentThread());\n            else\n                acquire(1);\n        }\n\n        protected final boolean tryAcquire(int acquires) {\n            return nonfairTryAcquire(acquires);\n        }\n```\ncompareAndSetState（）方法，设置当前的锁占用状态；实际上是设置了AQS的state的状态，由0设置为1，unsafe是native实现。（并发包里有好多工具类的实现，最后的落脚点在unsafe的native方法上）。  \n- 如果设置成功，表示线程获初次取锁成功，然后设置当前的线程为锁的独占线程（setExclusiveOwnerThread（））。\n```\n    protected final boolean compareAndSetState(int expect, int update) {\n        // See below for intrinsics setup to support this\n        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n    }\n```\n- 如果失败，表示已经有线程获得了锁，做可重入的处理。\nacquire(1),此方法是AQS的final方法：\n```\n    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n```\ntryAcquire是抽象方法，在NonSync中overwrite了，这个源码上面已经提到了，NonSync中此方法调用了nonfairTryAcquire（），我们看一下做了什么操作：\n```\n/**\n         * Performs non-fair tryLock.  tryAcquire is implemented in\n         * subclasses, but both need nonfair try for trylock method.\n         */\n        final boolean nonfairTryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                if (compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0) // overflow\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n```\ngetState()是获取state的数值，此值是个volatile变量（主要是保持内存可见性）,用来标记重入锁的重入次数\n```\n    /**\n     * The synchronization state.\n     */\n    private volatile int state;\n```\n- 如果c==0 表示初次获取锁，此时set  state=1 ,然后设置独占锁的线程为当前线程；\n- 如果c !=0 表示锁已被获取，判读是否加锁操作是已经占领锁的线程发起的，如果是，就对state+1 操作，重入次数+1； （nextc<0 属于加锁次数达到int最大值溢出所致）\n- 如果非当前线程尝试加锁，就返回false了\n\n回到上述的acquire方法，判读条件：\n```\n    if (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n      selfInterrupt();\n    \n    static void selfInterrupt() {\n        Thread.currentThread().interrupt();\n    }\n```\n不满足条件重入锁的条件，做入队操作（这里的入队实际上是入链表操作）,入队成功，调用thread的中断方法（具体中断机制这里不描述，感兴趣的可以自行学习），继续深入源码，入队部分：\n```\n    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n第二个if： 获取锁失败，park 并检查中断标志位，然后设置中断标志位为true；\n```\n    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        if (ws == Node.SIGNAL)\n            /*\n             * This node has already set status asking a release\n             * to signal it, so it can safely park.\n             */\n            return true;\n        if (ws > 0) {\n            /*\n             * Predecessor was cancelled. Skip over predecessors and\n             * indicate retry.\n             */\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /*\n             * waitStatus must be 0 or PROPAGATE.  Indicate that we\n             * need a signal, but don't park yet.  Caller will need to\n             * retry to make sure it cannot acquire before parking.\n             */\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n关键的线程阻塞代码；park操作\n```\n    private final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);\n        return Thread.interrupted();\n    }\n```\n我们看下park方法源码：\n```\n    public static void park(Object blocker) {\n        Thread t = Thread.currentThread();\n        setBlocker(t, blocker);\n        UNSAFE.park(false, 0L);\n        setBlocker(t, null);\n    }\n```\n调用了unsafe的park方法：最终把线程交给系统（linux）内核进行阻塞；\n\n落实到unsafe方法的时候，好多 CAS（compare and set），太常见了，O(∩_∩)O~，\n```\n    /**\n     * CAS waitStatus field of a node.\n     */\n    private static final boolean compareAndSetWaitStatus(Node node,\n                                                         int expect,\n                                                         int update) {\n        return unsafe.compareAndSwapInt(node, waitStatusOffset,\n                                        expect, update);\n    }\n```\n\n## 解锁部分\n此部分略过...\n\n## Lock VS Synchronized\nAbstractQueuedSynchronizer通过构造一个基于阻塞的CLH队列容纳所有的阻塞线程，而对该队列的操作均通过Lock-Free（CAS）操作，但对已经获得锁的线程而言，ReentrantLock实现了偏向锁的功能。\nsynchronized的底层也是一个基于CAS操作的等待队列，但JVM实现的更精细，把等待队列分为ContentionList和EntryList，目的是为了降低线程的出列速度；当然也实现了偏向锁，从数据结构来说二者设计没有本质区别。但synchronized还实现了自旋锁，并针对不同的系统和硬件体系进行了优化，而Lock则完全依靠系统阻塞挂起等待线程。\n当然Lock比synchronized更适合在应用层扩展，可以继承AbstractQueuedSynchronizer定义各种实现，比如实现读写锁（ReadWriteLock），公平或不公平锁；同时，Lock对应的Condition也比wait/notify要方便的多、灵活的多。\n\n> 参考链接：  \nhttp://blog.csdn.net/chen77716/article/details/6641477\nhttp://www.cnblogs.com/timlearn/p/4008783.html\n","slug":"reentrantlock","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7n3000nt8dmrrvzhl6g","content":"<p>你真的了解ReentrantLock吗？顾名思义，这是可重入锁的意思，废话不多说我们直接看源码：</p>\n<h2 id=\"结构组成\"><a href=\"#结构组成\" class=\"headerlink\" title=\"结构组成\"></a>结构组成</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantLock</span> <span class=\"title\">implements</span> <span class=\"title\">Lock</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> long serialVersionUID = <span class=\"number\">7373984872572414699</span>L;</div><div class=\"line\">    <span class=\"comment\">/** Synchronizer providing all implementation mechanics */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Sync</span> sync;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Base of synchronization control for this lock. Subclassed</div><div class=\"line\">     * into fair and nonfair versions below. Uses AQS state to</div><div class=\"line\">     * represent the number of holds on the lock.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">abstract</span> static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    static <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonfairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> long serialVersionUID = <span class=\"number\">7316153563782823691</span>L;</div><div class=\"line\"></div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Sync object for fair locks</div><div class=\"line\">     */</div><div class=\"line\">    static <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>世人都知道这个是基于AQS实现的，AQS具体是什么，不是本文重点，后续解释；</p>\n<ol>\n<li>ReentrantLock 有个抽象内部类，Sync 继承了AQS  </li>\n<li>有两个静态内部类，FairSync 用与公平锁，NonFairSync用与非公平锁.  </li>\n</ol>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><ol>\n<li>默认初始化<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    sync = <span class=\"keyword\">new</span> NonfairSync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>默认初始化生成了一个非公平锁；</p>\n<h2 id=\"加锁操作\"><a href=\"#加锁操作\" class=\"headerlink\" title=\"加锁操作\"></a>加锁操作</h2><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">               setExclusiveOwnerThread(Thread.currentThread());</div><div class=\"line\">           <span class=\"keyword\">else</span></div><div class=\"line\">               acquire(<span class=\"number\">1</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">nonfairTryAcquire</span><span class=\"params\">(acquires)</span></span>;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>compareAndSetState（）方法，设置当前的锁占用状态；实际上是设置了AQS的state的状态，由0设置为1，unsafe是native实现。（并发包里有好多工具类的实现，最后的落脚点在unsafe的native方法上）。  </p>\n<ul>\n<li><p>如果设置成功，表示线程获初次取锁成功，然后设置当前的线程为锁的独占线程（setExclusiveOwnerThread（））。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSetState</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// See below for intrinsics setup to support this</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> unsafe.<span class=\"title\">compareAndSwapInt</span><span class=\"params\">(<span class=\"keyword\">this</span>, stateOffset, expect, update)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果失败，表示已经有线程获得了锁，做可重入的处理。<br>acquire(1),此方法是AQS的final方法：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class=\"line\">        selfInterrupt();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>tryAcquire是抽象方法，在NonSync中overwrite了，这个源码上面已经提到了，NonSync中此方法调用了nonfairTryAcquire（），我们看一下做了什么操作：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">         * Performs non-fair tryLock.  tryAcquire is implemented in</div><div class=\"line\">         * subclasses, but both need nonfair try for trylock method.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</div><div class=\"line\">            <span class=\"keyword\">int</span> c = getState();</div><div class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</div><div class=\"line\">                    setExclusiveOwnerThread(current);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nextc = c + acquires;</div><div class=\"line\">                <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</div><div class=\"line\">                setState(nextc);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>getState()是获取state的数值，此值是个volatile变量（主要是保持内存可见性）,用来标记重入锁的重入次数<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * The synchronization <span class=\"keyword\">state</span>.</div><div class=\"line\"> */</div><div class=\"line\">private volatile int <span class=\"keyword\">state</span>;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>如果c==0 表示初次获取锁，此时set  state=1 ,然后设置独占锁的线程为当前线程；</li>\n<li>如果c !=0 表示锁已被获取，判读是否加锁操作是已经占领锁的线程发起的，如果是，就对state+1 操作，重入次数+1； （nextc&lt;0 属于加锁次数达到int最大值溢出所致）</li>\n<li>如果非当前线程尝试加锁，就返回false了</li>\n</ul>\n<p>回到上述的acquire方法，判读条件：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class=\"line\">  <span class=\"selector-tag\">selfInterrupt</span>();</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">static</span> <span class=\"selector-tag\">void</span> <span class=\"selector-tag\">selfInterrupt</span>() &#123;</div><div class=\"line\">    <span class=\"selector-tag\">Thread</span><span class=\"selector-class\">.currentThread</span>()<span class=\"selector-class\">.interrupt</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不满足条件重入锁的条件，做入队操作（这里的入队实际上是入链表操作）,入队成功，调用thread的中断方法（具体中断机制这里不描述，感兴趣的可以自行学习），继续深入源码，入队部分：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean acquireQueued(final <span class=\"keyword\">Node</span> <span class=\"title\">node</span>, int arg) &#123;</div><div class=\"line\">    boolean failed = <span class=\"literal\">true</span>;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        boolean interrupted = <span class=\"literal\">false</span>;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            final <span class=\"keyword\">Node</span> <span class=\"title\">p</span> = <span class=\"keyword\">node</span>.<span class=\"title\">predecessor</span>();</div><div class=\"line\">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class=\"line\">                setHead(<span class=\"keyword\">node</span><span class=\"title\">);</span></div><div class=\"line\">                p.next = null; // help GC</div><div class=\"line\">                failed = <span class=\"literal\">false</span>;</div><div class=\"line\">                return interrupted;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (shouldParkAfterFailedAcquire(p, <span class=\"keyword\">node</span><span class=\"title\">) &amp;&amp;</span></div><div class=\"line\">                parkAndCheckInterrupt())</div><div class=\"line\">                interrupted = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (failed)</div><div class=\"line\">            cancelAcquire(<span class=\"keyword\">node</span><span class=\"title\">);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第二个if： 获取锁失败，park 并检查中断标志位，然后设置中断标志位为true；<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static boolean shouldParkAfterFailedAcquire(<span class=\"keyword\">Node</span> <span class=\"title\">pred</span>, <span class=\"keyword\">Node</span> <span class=\"title\">node</span>) &#123;</div><div class=\"line\">    int ws = pred.waitStatus;</div><div class=\"line\">    if (ws == <span class=\"keyword\">Node</span>.<span class=\"title\">SIGNAL</span>)</div><div class=\"line\">        /*</div><div class=\"line\">         * This <span class=\"keyword\">node</span> <span class=\"title\">has</span> already set status asking a release</div><div class=\"line\">         * to signal it, so it can safely park.</div><div class=\"line\">         */</div><div class=\"line\">        return <span class=\"literal\">true</span>;</div><div class=\"line\">    if (ws &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        /*</div><div class=\"line\">         * Predecessor was cancelled. Skip over predecessors <span class=\"keyword\">and</span></div><div class=\"line\">         * indicate retry.</div><div class=\"line\">         */</div><div class=\"line\">        do &#123;</div><div class=\"line\">            <span class=\"keyword\">node</span>.<span class=\"title\">prev</span> = pred = pred.prev;</div><div class=\"line\">        &#125; while (pred.waitStatus &gt; <span class=\"number\">0</span>);</div><div class=\"line\">        pred.next = <span class=\"keyword\">node</span><span class=\"title\">;</span></div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        /*</div><div class=\"line\">         * waitStatus must be <span class=\"number\">0</span> <span class=\"keyword\">or</span> PROPAGATE.  Indicate that we</div><div class=\"line\">         * need a signal, but don't park yet.  Caller will need to</div><div class=\"line\">         * retry to make sure it cannot acquire before parking.</div><div class=\"line\">         */</div><div class=\"line\">        compareAndSetWaitStatus(pred, ws, <span class=\"keyword\">Node</span>.<span class=\"title\">SIGNAL</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关键的线程阻塞代码；park操作<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">parkAndCheckInterrupt</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    LockSupport.park(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> Thread.<span class=\"title\">interrupted</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们看下park方法源码：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">(Object blocker)</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    setBlocker(t, blocker);</div><div class=\"line\">    UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0</span>L);</div><div class=\"line\">    setBlocker(t, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用了unsafe的park方法：最终把线程交给系统（linux）内核进行阻塞；</p>\n<p>落实到unsafe方法的时候，好多 CAS（compare and set），太常见了，O(∩_∩)O~，<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * CAS waitStatus field of a <span class=\"keyword\">node</span>.</div><div class=\"line\"> <span class=\"title\">*/</span></div><div class=\"line\">private static final boolean compareAndSetWaitStatus(<span class=\"keyword\">Node</span> <span class=\"title\">node</span>,</div><div class=\"line\">                                                     int expect,</div><div class=\"line\">                                                     int update) &#123;</div><div class=\"line\">    return unsafe.compareAndSwapInt(<span class=\"keyword\">node</span><span class=\"title\">, waitStatusOffset</span>,</div><div class=\"line\">                                    expect, update);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"解锁部分\"><a href=\"#解锁部分\" class=\"headerlink\" title=\"解锁部分\"></a>解锁部分</h2><p>此部分略过…</p>\n<h2 id=\"Lock-VS-Synchronized\"><a href=\"#Lock-VS-Synchronized\" class=\"headerlink\" title=\"Lock VS Synchronized\"></a>Lock VS Synchronized</h2><p>AbstractQueuedSynchronizer通过构造一个基于阻塞的CLH队列容纳所有的阻塞线程，而对该队列的操作均通过Lock-Free（CAS）操作，但对已经获得锁的线程而言，ReentrantLock实现了偏向锁的功能。<br>synchronized的底层也是一个基于CAS操作的等待队列，但JVM实现的更精细，把等待队列分为ContentionList和EntryList，目的是为了降低线程的出列速度；当然也实现了偏向锁，从数据结构来说二者设计没有本质区别。但synchronized还实现了自旋锁，并针对不同的系统和硬件体系进行了优化，而Lock则完全依靠系统阻塞挂起等待线程。<br>当然Lock比synchronized更适合在应用层扩展，可以继承AbstractQueuedSynchronizer定义各种实现，比如实现读写锁（ReadWriteLock），公平或不公平锁；同时，Lock对应的Condition也比wait/notify要方便的多、灵活的多。</p>\n<blockquote>\n<p>参考链接：<br><a href=\"http://blog.csdn.net/chen77716/article/details/6641477\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/chen77716/article/details/6641477</a><br><a href=\"http://www.cnblogs.com/timlearn/p/4008783.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/timlearn/p/4008783.html</a></p>\n</blockquote>\n","excerpt":"","more":"<p>你真的了解ReentrantLock吗？顾名思义，这是可重入锁的意思，废话不多说我们直接看源码：</p>\n<h2 id=\"结构组成\"><a href=\"#结构组成\" class=\"headerlink\" title=\"结构组成\"></a>结构组成</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantLock</span> <span class=\"title\">implements</span> <span class=\"title\">Lock</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> long serialVersionUID = <span class=\"number\">7373984872572414699</span>L;</div><div class=\"line\">    <span class=\"comment\">/** Synchronizer providing all implementation mechanics */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Sync</span> sync;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Base of synchronization control for this lock. Subclassed</div><div class=\"line\">     * into fair and nonfair versions below. Uses AQS state to</div><div class=\"line\">     * represent the number of holds on the lock.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">abstract</span> static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    static <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonfairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> long serialVersionUID = <span class=\"number\">7316153563782823691</span>L;</div><div class=\"line\"></div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Sync object for fair locks</div><div class=\"line\">     */</span></div><div class=\"line\">    static <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>世人都知道这个是基于AQS实现的，AQS具体是什么，不是本文重点，后续解释；</p>\n<ol>\n<li>ReentrantLock 有个抽象内部类，Sync 继承了AQS  </li>\n<li>有两个静态内部类，FairSync 用与公平锁，NonFairSync用与非公平锁.  </li>\n</ol>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><ol>\n<li>默认初始化<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    sync = <span class=\"keyword\">new</span> NonfairSync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>默认初始化生成了一个非公平锁；</p>\n<h2 id=\"加锁操作\"><a href=\"#加锁操作\" class=\"headerlink\" title=\"加锁操作\"></a>加锁操作</h2><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">               setExclusiveOwnerThread(Thread.currentThread());</div><div class=\"line\">           <span class=\"keyword\">else</span></div><div class=\"line\">               acquire(<span class=\"number\">1</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">nonfairTryAcquire</span><span class=\"params\">(acquires)</span></span>;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>compareAndSetState（）方法，设置当前的锁占用状态；实际上是设置了AQS的state的状态，由0设置为1，unsafe是native实现。（并发包里有好多工具类的实现，最后的落脚点在unsafe的native方法上）。  </p>\n<ul>\n<li><p>如果设置成功，表示线程获初次取锁成功，然后设置当前的线程为锁的独占线程（setExclusiveOwnerThread（））。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSetState</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// See below for intrinsics setup to support this</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> unsafe.<span class=\"title\">compareAndSwapInt</span><span class=\"params\">(<span class=\"keyword\">this</span>, stateOffset, expect, update)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果失败，表示已经有线程获得了锁，做可重入的处理。<br>acquire(1),此方法是AQS的final方法：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class=\"line\">        selfInterrupt();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>tryAcquire是抽象方法，在NonSync中overwrite了，这个源码上面已经提到了，NonSync中此方法调用了nonfairTryAcquire（），我们看一下做了什么操作：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">         * Performs non-fair tryLock.  tryAcquire is implemented in</div><div class=\"line\">         * subclasses, but both need nonfair try for trylock method.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</div><div class=\"line\">            <span class=\"keyword\">int</span> c = getState();</div><div class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</div><div class=\"line\">                    setExclusiveOwnerThread(current);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nextc = c + acquires;</div><div class=\"line\">                <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</div><div class=\"line\">                setState(nextc);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>getState()是获取state的数值，此值是个volatile变量（主要是保持内存可见性）,用来标记重入锁的重入次数<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * The synchronization <span class=\"keyword\">state</span>.</div><div class=\"line\"> */</div><div class=\"line\">private volatile int <span class=\"keyword\">state</span>;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>如果c==0 表示初次获取锁，此时set  state=1 ,然后设置独占锁的线程为当前线程；</li>\n<li>如果c !=0 表示锁已被获取，判读是否加锁操作是已经占领锁的线程发起的，如果是，就对state+1 操作，重入次数+1； （nextc&lt;0 属于加锁次数达到int最大值溢出所致）</li>\n<li>如果非当前线程尝试加锁，就返回false了</li>\n</ul>\n<p>回到上述的acquire方法，判读条件：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class=\"line\">  <span class=\"selector-tag\">selfInterrupt</span>();</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">static</span> <span class=\"selector-tag\">void</span> <span class=\"selector-tag\">selfInterrupt</span>() &#123;</div><div class=\"line\">    <span class=\"selector-tag\">Thread</span><span class=\"selector-class\">.currentThread</span>()<span class=\"selector-class\">.interrupt</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不满足条件重入锁的条件，做入队操作（这里的入队实际上是入链表操作）,入队成功，调用thread的中断方法（具体中断机制这里不描述，感兴趣的可以自行学习），继续深入源码，入队部分：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean acquireQueued(final <span class=\"keyword\">Node</span> <span class=\"title\">node</span>, int arg) &#123;</div><div class=\"line\">    boolean failed = <span class=\"literal\">true</span>;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        boolean interrupted = <span class=\"literal\">false</span>;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            final <span class=\"keyword\">Node</span> <span class=\"title\">p</span> = <span class=\"keyword\">node</span>.<span class=\"title\">predecessor</span>();</div><div class=\"line\">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class=\"line\">                setHead(<span class=\"keyword\">node</span><span class=\"title\">);</div><div class=\"line\">                p</span>.next = null; // help GC</div><div class=\"line\">                failed = <span class=\"literal\">false</span>;</div><div class=\"line\">                return interrupted;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (shouldParkAfterFailedAcquire(p, <span class=\"keyword\">node</span><span class=\"title\">) &amp;&amp;</div><div class=\"line\">                parkAndCheckInterrupt</span>())</div><div class=\"line\">                interrupted = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (failed)</div><div class=\"line\">            cancelAcquire(<span class=\"keyword\">node</span><span class=\"title\">);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>第二个if： 获取锁失败，park 并检查中断标志位，然后设置中断标志位为true；<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static boolean shouldParkAfterFailedAcquire(<span class=\"keyword\">Node</span> <span class=\"title\">pred</span>, <span class=\"keyword\">Node</span> <span class=\"title\">node</span>) &#123;</div><div class=\"line\">    int ws = pred.waitStatus;</div><div class=\"line\">    if (ws == <span class=\"keyword\">Node</span>.<span class=\"title\">SIGNAL</span>)</div><div class=\"line\">        /*</div><div class=\"line\">         * This <span class=\"keyword\">node</span> <span class=\"title\">has</span> already set status asking a release</div><div class=\"line\">         * to signal it, so it can safely park.</div><div class=\"line\">         */</div><div class=\"line\">        return <span class=\"literal\">true</span>;</div><div class=\"line\">    if (ws &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        /*</div><div class=\"line\">         * Predecessor was cancelled. Skip over predecessors <span class=\"keyword\">and</span></div><div class=\"line\">         * indicate retry.</div><div class=\"line\">         */</div><div class=\"line\">        do &#123;</div><div class=\"line\">            <span class=\"keyword\">node</span>.<span class=\"title\">prev</span> = pred = pred.prev;</div><div class=\"line\">        &#125; while (pred.waitStatus &gt; <span class=\"number\">0</span>);</div><div class=\"line\">        pred.next = <span class=\"keyword\">node</span><span class=\"title\">;</div><div class=\"line\">    &#125; else</span> &#123;</div><div class=\"line\">        /*</div><div class=\"line\">         * waitStatus must be <span class=\"number\">0</span> <span class=\"keyword\">or</span> PROPAGATE.  Indicate that we</div><div class=\"line\">         * need a signal, but don't park yet.  Caller will need to</div><div class=\"line\">         * retry to make sure it cannot acquire before parking.</div><div class=\"line\">         */</div><div class=\"line\">        compareAndSetWaitStatus(pred, ws, <span class=\"keyword\">Node</span>.<span class=\"title\">SIGNAL</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关键的线程阻塞代码；park操作<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">parkAndCheckInterrupt</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    LockSupport.park(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> Thread.<span class=\"title\">interrupted</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们看下park方法源码：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">(Object blocker)</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    setBlocker(t, blocker);</div><div class=\"line\">    UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0</span>L);</div><div class=\"line\">    setBlocker(t, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用了unsafe的park方法：最终把线程交给系统（linux）内核进行阻塞；</p>\n<p>落实到unsafe方法的时候，好多 CAS（compare and set），太常见了，O(∩_∩)O~，<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * CAS waitStatus field of a <span class=\"keyword\">node</span>.</div><div class=\"line\"> <span class=\"title\">*/</div><div class=\"line\">private</span> static final boolean compareAndSetWaitStatus(<span class=\"keyword\">Node</span> <span class=\"title\">node</span>,</div><div class=\"line\">                                                     int expect,</div><div class=\"line\">                                                     int update) &#123;</div><div class=\"line\">    return unsafe.compareAndSwapInt(<span class=\"keyword\">node</span><span class=\"title\">, waitStatusOffset</span>,</div><div class=\"line\">                                    expect, update);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"解锁部分\"><a href=\"#解锁部分\" class=\"headerlink\" title=\"解锁部分\"></a>解锁部分</h2><p>此部分略过…</p>\n<h2 id=\"Lock-VS-Synchronized\"><a href=\"#Lock-VS-Synchronized\" class=\"headerlink\" title=\"Lock VS Synchronized\"></a>Lock VS Synchronized</h2><p>AbstractQueuedSynchronizer通过构造一个基于阻塞的CLH队列容纳所有的阻塞线程，而对该队列的操作均通过Lock-Free（CAS）操作，但对已经获得锁的线程而言，ReentrantLock实现了偏向锁的功能。<br>synchronized的底层也是一个基于CAS操作的等待队列，但JVM实现的更精细，把等待队列分为ContentionList和EntryList，目的是为了降低线程的出列速度；当然也实现了偏向锁，从数据结构来说二者设计没有本质区别。但synchronized还实现了自旋锁，并针对不同的系统和硬件体系进行了优化，而Lock则完全依靠系统阻塞挂起等待线程。<br>当然Lock比synchronized更适合在应用层扩展，可以继承AbstractQueuedSynchronizer定义各种实现，比如实现读写锁（ReadWriteLock），公平或不公平锁；同时，Lock对应的Condition也比wait/notify要方便的多、灵活的多。</p>\n<blockquote>\n<p>参考链接：<br><a href=\"http://blog.csdn.net/chen77716/article/details/6641477\">http://blog.csdn.net/chen77716/article/details/6641477</a><br><a href=\"http://www.cnblogs.com/timlearn/p/4008783.html\">http://www.cnblogs.com/timlearn/p/4008783.html</a></p>\n</blockquote>\n"},{"title":"Java 泛型","date":"2017-03-22T03:21:20.000Z","_content":"\n### 为什么要使用泛型程序设计\n泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用.\n在Java中增加泛型类之前, 泛型程序设计是用继承实现的. 例如ArrayList类只维护一个Object引用的数组:\n```\npublic class ArrayList {\n  private Object[] elementData;\n  public Object get(int i) {...}\n  public void add(Object o) {...}\n}\n```\n这样实现有两个问题.\n\n1. 当获取一个值时必须进行强制类型转换.\n```\nArrayList first = new ArrayList();\n...;\nString filename = (String) files.get(0);\n```\n\n2. 没有进行错误检查, 可以向数组列表中添加任何类的对象.\n```\nfiles.add(new file(\"...\"));\n```\n而泛型提供了一个更好的解决方案: 类型参数:\n```\nArrayList<String> files = new ArrayList<String>();\n```\n备注:\n\n问题1: 为什么针对files.get(0), 强制转换为String可以成功?\n答: 虽然ArrayList存储的是Object, 但它也会存储额外的信息, 用来确定所存储的元素类型, 所以才能保证强制转换的正确性.\n\n问题2: 为什么是以Object为引用?\n答: 因为Object是Java中的最原始的类型, 除了基本数据类型外, 所有的对象均派生于Object, 即所有的对象都可向上转型为Object.\n\n\n\n### 定义简单泛型类\n\n```\npublic class Pair<T> {\n  private T first;\n  private T second;\n\n  public Pair() { first = null; second = null;}\n  public Pair(T first, T second) {this.first = first; this.second = second;}\n\n  public T getFirst() {return first;}\n  public T getSecond() {return second;}\n\n  public void setFirst(T newValue) {first = newValue;}\n  public void setSecond(T newValue) {second = newValue;}\n}\n```\n 在Java中使用:\n 变量E表示集合的元素类型;\n  K和V分别表示表的关键字与值的类型;\n  T, U和S表示任意类型;\n\n\n\n### 定义泛型方法\n```\nclass ArrayAlg {\n  public static <T> T getMiddle(T... a) {\n    return a[a.length / 2];\n  }\n}\n```\n然后, 我们可以这样进行调用:\n```\nString middle = ArrayAlg.<String>getMiddle(\"hello\", \"world\", \"Java\");\n```\n备注:\n\n1. 泛型方法既可以定义在普通类中, 也可以定义在泛型类中.\n2. 如果泛型方法的参数类型可以推导出来, 则可省略, 如\n```\nString middle = ArrayAlg.getMiddle(\"John\", \"Q.\", \"Public\");\n```\n但是在无法推导出来时候, 例如double和int, 则还是需要类型参数.\n```\n// ERROR\ndouble middle = ArrayAlg.getMiddle(3.14, 1729, 0);\n```\n类型变量的限定\n\n有时, 类或方法需要对类型变量加以约束. 例如我们计算数组中的最小元素:\n```\nclass ArrayAlg {\n  public static <T> T min(T[] a) {\n    if (a == null || a.length == 0) return null;\n    T smallest = a[0];\n    for (int i = 1; i < a.length; i++) {\n      if (smallest.compareTo(a[i]) > 0) smallest = a[i];\n    }\n    return smallest;\n  }\n}\n```\n这里存在一个问题在于: 调用compareTo方法的对象必须实现了Comparable接口才行, 而T类型并不确定是否实现了Comparable接口.\n\n我们需要扩展T类型:\n```\npublic static <T extends Comparable> T min(T[] a) {...}\n```\n而一个类型变量或通配符可以有多个限定:\n```\nT extends Comparable & Serializable\n```\n一个实际的例子:\n```\npublic class PairTest2 {\n  public static void main(String[] args) {\n    String[] strs = new String[]{\"hello\", \"world\", \"i\", \"love\", \"coding\"};\n    Pair<String> mm = ArrayAlg.minmax(strs);\n    System.out.println(\"min=\" + mm.getFirst());\n    System.out.println(\"max=\" + mm.getSecond());\n  }\n}\n\nclass ArrayAlg {\n  public static <T extends Comparable> Pair<T> minmax(T[] a) {\n    if (a == null || a.length == 0) return null;\n    T min = a[0];\n    T max = a[0];\n    for (int i = 1; i < a.length; i++) {\n      if (min.compareTo(a[i]) > 0) min = a[i];\n      if (max.compareTo(a[i]) < 0) max = a[i];\n    }\n    return new Pair<>(min, max);\n  }\n}\n```\n\n### 泛型代码和虚拟机\n\n虚拟机没有泛型类型对象--所有对象都属于普通类.\n\n无论何时定义一个泛型类型, 都自动提供了一个相应的原始类型. 原始类型的名字就是删去类型参数后的泛型类型名. 擦除类型变量, 并替换为限定类型.\n\n如Pair<T>的原始类型如下:\n```\npublic class Pair {\n  private Object first;\n  private Object second;\n  ......\n}\n```\n而假定对T进行了扩展, 则为扩展的类型:\n```\npublic class Interval<T extends Comparable & Serializable> implements Serializable {}\n```\n其中原始类型为: Comparable\n\n但如果某些变量的类型为Serializable, 则编译器在必要时候进行强制转换(Comparable --> Serializable)\n\n翻译泛型表达式\n```\nPair<Employee> buddies = ...;\nEmployee buddy = buddies.getFirst();\n```\n擦除getFirst的返回类型后将返回Object类型. 编译器自动插入Employee的强制类型转换. 即编译器把这个方法调用翻译为两条虚拟机指令:\n\n1. 对原始方法Pair.getFirst的调用.\n\n2. 将返回的Object类型强制转换为Employee类型.\n\n由于对象buddies会存储实际类型的信息(Employee), 所以可以保证强制类型转换成功.\n\n翻译泛型方法\n\n类型擦除也会出现在泛型方法中:\npublic static <T extends Comparable> T min(T[] a);\n经过类型擦除后变成:\npublic static Comparable min(Comparable[] a);\n但方法的擦除带来两个复杂的问题, 例如:\nclass DateInterval extends Pair<Date> {\n  public void setSecond(Date second) {...}\n}\n这里由于Pair也有setSecond(Date d)方法, 所以它们为同样的方法, 动态运行时候可以绑定变量的类型, 决定调用哪个方法(多态).\n\n但是由于类型擦除后:\n\nclass DateInterval extends Pair {\n  public void setSecond(Date second) {...}\n}\nPair中的setSecond为: public void setSecond(Object second) {...}, 所以无法进行动态绑定(Date和Object为不同的类型, 即此时两个setSecond为不同的方法).\n\n由于类型擦除导致多态失效. 所以我们需要用桥方法将两个setSecond方法\"多态\"起来:\n\nclass DateInterval extends Pair {\n  public void setSecond(Date second) {...}\n  public void setSecond(Object second) {\n    setSecond((Date) second);\n  }\n}\n编译器生成了第二个setSecond方法, 从而解决了擦除导致多态失效的问题.\n\n总结如下:\n\n1. 虚拟机中没有泛型, 只有普通的类和方法.\n\n2. 所有的类型参数都用它们的限定类型替换.\n\n3. 桥方法被合成保持多态.\n\n4. 为保持类型安全性, 必要时插入强制类型转换.\n\n\n\n### 约束与局限性\n\n1. 不能用基本类型实例化类型参数\n\n例如没有Pair<double>, 只有Pair<Double>, 因为擦除后只有Object, 而Object不能存储double类型.\n\n运行时类型查询只适用于原始类型\n\n由于存在类型擦除, 所以泛型类型实际上存储的是原始类型. 所以:\n\nif (a instanceof Pair<String>)\n是语法错误的.\n\nif (a instanceof Pair<Object>)\n也是语法错误的. 因为a被当做Pair类型, 而元素类型被擦除为Object而已, 它本身为一个普通的类, 不存在任何的泛型信息.\n\n所以\n\nif (a instanceof Pair)\n是正确的.\n\n同理, 任何Pair的getClass肯定都等于Pair.class:\n\nPair<String> strPair = ...;\nPair<Employee> empPair = ...;\nstrPair.getClass() == empPair.getClass();\n\n2. 不能创建参数化类型的数组\n\n之所以不能实例化参数类型的数组, 是因为数组会记住它元素的类型, 例如字符串的数组是不能存储浮点数的.\n\n而如果对泛型数组进行实例化, 由于擦除的存在, 导致数组的类型为Object, 则可以存储任何的类型, 这跟数组的语法相冲突, 所以在语法层面上, 参数化类型的数组本身是不允许的. 如:\n\nPair<String>[] table = new Pair<String>[10]; //ERROR\nVarargs警告\n\n假设我们编写如下的代码:\n\npublic static <T> void addAll(Collection<T> coll, T... ts) {\n  for (t: ts) coll.add(t);\n}\nCollection<Pair<String>> table = ...;\nPair<String> pair1 = ...;\nPair<String> pair2 = ...;\naddAll(table, pair1, pair2);\n这在语法层面是没有问题的, 运行起来是存在警告的, 是因为虚拟机会建立一个Pair<String>数组, 而这违反了\"不能创建参数化类型的数组\".\n\n这里之所以正确是因为: 1. 数组的存储空间在编译时期确定的, 所以需要确定数组元素的类型. 2. 而针对集合Collection来说, 它的存储空间是动态递增的, 所以无需考虑元素的类型.\n\n这可以增加@SafeVarargs来抑制这个警告.\n\n@SafeVarargs\npublic static <T> void addAll(Collection<T> coll, T... ts){}\n不能实例化类型变量\n\n不能使用像new T(...), new T[...]或T.class这样的表达式中的类型变量, 例如下例的Pair<T>构造器是非法的:\n\npublic Pair() {first = new T(); second = new T();}\n因为类型擦除将T改变为Object, 而new Object()肯定不是代码的本意.\n\n同理, 我们也不能使用:\n\nfirst = T.class.newInstance();\n因为类型擦除的存在, T.class无法明确其Class类型. 所以我们需要显式的指明其Class类型:\n\npublic static <T> Pair<T> makePair(Class<T> c1) {\n  try {return new Pair<>(c1.newInstance(), c1.newInstance());}\n  catch (Exception ex) {return null;}\n}\n我们可以这样调用:\n\nPair<String> p = Pair.makePair(String.class);\n而new T[...]着实让人头疼, 因为类型擦除的原因导致无法确切知道数组的原始类型(语法层面上数组必须知道其元素类型, 才能判断出String[]存储double时候会报错), 则我们需要反射的机制(在运行时获取其class的信息, 从而获取其具体的类型, 则可进行new的操作)动态获取其数据类型, 来进行new T[...].\n\npublic static <T extends Comparable> T[] minmax(T... a) {\n  T[] mm = (T[])Array.newInstance(a.getClass().getComponentType(), 2);\n}\n\n3. 泛型类的静态上下文中类型变量无效\n\n静态的方法或变量是跟具体的类实例无关的, 而泛型的存在本身就跟具体的类实例有关, 两者冲突导致静态域或方法中引用类型变量是无效的.\n\npublic class Singleton<T> {\n  private static T singleInstance; //ERROR\n  public static T getSingleInstance() {} //ERROR\n}\n\n4. 不能抛出或捕获泛型类的实例\n\n因为一旦类型擦除, 根本就不确定其具体的异常类型.\n```\npublic static <T extends Throwable> void doWork(Class<T> t) {\n  try {\n\n  } catch (Throwable e) { //OK\n\n  } catch (T e) { //ERROR\n\n  }\n}\n```\n由于不能抛出或捕获泛型类, 所以也不能对泛型类进行扩展Exception:\n\npublic class Problem<T> extends Exception {} // ERROR\n备注: 对\"可以消除已检查异常的检查\", 不太理解(书章节12.6.7, p543)\n\n擦除后的冲突\n\n例如我们编写如下的代码:\n\npublic class Pair<T> {\n  public boolean equals(T value) {return first.equals(value) && second.equals(value);}\n}\n由于擦除的存在, 导致Pair<String>实际上有两个equals:\n\nboolean equals(String) //defined in Pair<T>\nboolean equals(Object) //inherited from Objects\n要么使用\"桥方法\", 要么重命名函数进行修复.\n\n备注: 泛型规范的原则之一: 要想支持擦除的转换, 就需要强行限制一个类或类型变量不能同时成为两个接口类型的子类, 而这两个接口是同一个接口的不同参数化.\n\n\n\n### 泛型类型的继承规则\n\n无论S与T有什么联系(例如子类和父类的关系), Pair<S>和Pair<T>均没有任何关系. 因为Pair<S>和Pair<T>的本质类型都是Pair.\n\n```\n\nclass A {\n  private String s;\n  A(String s) {\n    this.s = s;\n  }\n  public String show() {\n    return s;\n  }\n}\nclass B extends A {\n  B(String s) {\n    super(s);\n  }\n}\npublic class PairTest1 {\n  public static void main(String[] args) {\n    Pair<B> b = new Pair<>(new B(\"hello\"), new B(\"world\"));\n//    Pair<A> a = b; // ERROR, Pair<B>无法转换为Pair<A>\n    Pair c = b;\n    c.setFirst(new B(\"java\"));\n    System.out.println(((B)c.getFirst()).show());\n  }\n}\n\n```\n### 通配符类型\n\nPair<? extends Employee>表示任何泛型Pair类型, 它的类型参数是Employee的子类, 如Pair<Manager>, 但不是Pair<String>.\n\n所以, 如果我们要打印出所有雇员的信息, 不能定义:\n\npublic static void printBuddies(Pair<Employee> p);\n而应该定义:\n\npublic static void printBuddies(Pair<? extends Employee> p);\n备注:\n\n1. 针对语法糖extends, 它往往表示扩展某个接口,类型或者继承了某个类. 例如interface A extends B, 则说明接口A扩展了接口B, class A extends B, 代表A继承B.\n\n所以** A extends B, 则类型为B.\n\n2. 针对A extends B来说, 只适合get的操作, 因为明确知道其基本类型为B, 但不能执行set操作, 因为不知道具体类型是什么.\n\n通配符的超类型限定\n\n与\"? extends Employee\"相反, \"? super Manager\"限制为Manager的所有超类型.\n\nvoid setFirst(? super Manager);\n? extends Employee getFirst();\n备注: 针对? super Manager, 只适合set的操作, 因为知道具体类型为Manager, 但不能执行get操作, 因为不知道其基本类型.\n\n无限定通配符\n\n对于Pair<?>的方法:\n\n? getFirst()\nvoid setFirst(?)\ngetFirst的返回值只能赋给一个Object. setFirst方法不能被调用, 甚至不能用Object调用. Pair<?>和Pair本质的不同在于: 可以用任意Object对象调用原始的Pair类的setObject方法.\n\n备注: 这里setObject泛指一切set的方法.\n\n所以如果我们要测试一个Pair是否包含一个null引用, 则可以这样定义:\n\npublic static boolean hasNulls(Pair<?> p) {\n  return p.getFirst() == null || p.getSecond() == null;\n}\n而无需定义成:\n\npublic static <T> boolean hasNulls(Pair<T> p){}\n","source":"_posts/java-generic.md","raw":"---\ntitle: Java 泛型\ndate: 2017-03-22 11:21:20\ntags:\n- java\n- generic\n- 泛型\ncategories:\n- Java\n---\n\n### 为什么要使用泛型程序设计\n泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用.\n在Java中增加泛型类之前, 泛型程序设计是用继承实现的. 例如ArrayList类只维护一个Object引用的数组:\n```\npublic class ArrayList {\n  private Object[] elementData;\n  public Object get(int i) {...}\n  public void add(Object o) {...}\n}\n```\n这样实现有两个问题.\n\n1. 当获取一个值时必须进行强制类型转换.\n```\nArrayList first = new ArrayList();\n...;\nString filename = (String) files.get(0);\n```\n\n2. 没有进行错误检查, 可以向数组列表中添加任何类的对象.\n```\nfiles.add(new file(\"...\"));\n```\n而泛型提供了一个更好的解决方案: 类型参数:\n```\nArrayList<String> files = new ArrayList<String>();\n```\n备注:\n\n问题1: 为什么针对files.get(0), 强制转换为String可以成功?\n答: 虽然ArrayList存储的是Object, 但它也会存储额外的信息, 用来确定所存储的元素类型, 所以才能保证强制转换的正确性.\n\n问题2: 为什么是以Object为引用?\n答: 因为Object是Java中的最原始的类型, 除了基本数据类型外, 所有的对象均派生于Object, 即所有的对象都可向上转型为Object.\n\n\n\n### 定义简单泛型类\n\n```\npublic class Pair<T> {\n  private T first;\n  private T second;\n\n  public Pair() { first = null; second = null;}\n  public Pair(T first, T second) {this.first = first; this.second = second;}\n\n  public T getFirst() {return first;}\n  public T getSecond() {return second;}\n\n  public void setFirst(T newValue) {first = newValue;}\n  public void setSecond(T newValue) {second = newValue;}\n}\n```\n 在Java中使用:\n 变量E表示集合的元素类型;\n  K和V分别表示表的关键字与值的类型;\n  T, U和S表示任意类型;\n\n\n\n### 定义泛型方法\n```\nclass ArrayAlg {\n  public static <T> T getMiddle(T... a) {\n    return a[a.length / 2];\n  }\n}\n```\n然后, 我们可以这样进行调用:\n```\nString middle = ArrayAlg.<String>getMiddle(\"hello\", \"world\", \"Java\");\n```\n备注:\n\n1. 泛型方法既可以定义在普通类中, 也可以定义在泛型类中.\n2. 如果泛型方法的参数类型可以推导出来, 则可省略, 如\n```\nString middle = ArrayAlg.getMiddle(\"John\", \"Q.\", \"Public\");\n```\n但是在无法推导出来时候, 例如double和int, 则还是需要类型参数.\n```\n// ERROR\ndouble middle = ArrayAlg.getMiddle(3.14, 1729, 0);\n```\n类型变量的限定\n\n有时, 类或方法需要对类型变量加以约束. 例如我们计算数组中的最小元素:\n```\nclass ArrayAlg {\n  public static <T> T min(T[] a) {\n    if (a == null || a.length == 0) return null;\n    T smallest = a[0];\n    for (int i = 1; i < a.length; i++) {\n      if (smallest.compareTo(a[i]) > 0) smallest = a[i];\n    }\n    return smallest;\n  }\n}\n```\n这里存在一个问题在于: 调用compareTo方法的对象必须实现了Comparable接口才行, 而T类型并不确定是否实现了Comparable接口.\n\n我们需要扩展T类型:\n```\npublic static <T extends Comparable> T min(T[] a) {...}\n```\n而一个类型变量或通配符可以有多个限定:\n```\nT extends Comparable & Serializable\n```\n一个实际的例子:\n```\npublic class PairTest2 {\n  public static void main(String[] args) {\n    String[] strs = new String[]{\"hello\", \"world\", \"i\", \"love\", \"coding\"};\n    Pair<String> mm = ArrayAlg.minmax(strs);\n    System.out.println(\"min=\" + mm.getFirst());\n    System.out.println(\"max=\" + mm.getSecond());\n  }\n}\n\nclass ArrayAlg {\n  public static <T extends Comparable> Pair<T> minmax(T[] a) {\n    if (a == null || a.length == 0) return null;\n    T min = a[0];\n    T max = a[0];\n    for (int i = 1; i < a.length; i++) {\n      if (min.compareTo(a[i]) > 0) min = a[i];\n      if (max.compareTo(a[i]) < 0) max = a[i];\n    }\n    return new Pair<>(min, max);\n  }\n}\n```\n\n### 泛型代码和虚拟机\n\n虚拟机没有泛型类型对象--所有对象都属于普通类.\n\n无论何时定义一个泛型类型, 都自动提供了一个相应的原始类型. 原始类型的名字就是删去类型参数后的泛型类型名. 擦除类型变量, 并替换为限定类型.\n\n如Pair<T>的原始类型如下:\n```\npublic class Pair {\n  private Object first;\n  private Object second;\n  ......\n}\n```\n而假定对T进行了扩展, 则为扩展的类型:\n```\npublic class Interval<T extends Comparable & Serializable> implements Serializable {}\n```\n其中原始类型为: Comparable\n\n但如果某些变量的类型为Serializable, 则编译器在必要时候进行强制转换(Comparable --> Serializable)\n\n翻译泛型表达式\n```\nPair<Employee> buddies = ...;\nEmployee buddy = buddies.getFirst();\n```\n擦除getFirst的返回类型后将返回Object类型. 编译器自动插入Employee的强制类型转换. 即编译器把这个方法调用翻译为两条虚拟机指令:\n\n1. 对原始方法Pair.getFirst的调用.\n\n2. 将返回的Object类型强制转换为Employee类型.\n\n由于对象buddies会存储实际类型的信息(Employee), 所以可以保证强制类型转换成功.\n\n翻译泛型方法\n\n类型擦除也会出现在泛型方法中:\npublic static <T extends Comparable> T min(T[] a);\n经过类型擦除后变成:\npublic static Comparable min(Comparable[] a);\n但方法的擦除带来两个复杂的问题, 例如:\nclass DateInterval extends Pair<Date> {\n  public void setSecond(Date second) {...}\n}\n这里由于Pair也有setSecond(Date d)方法, 所以它们为同样的方法, 动态运行时候可以绑定变量的类型, 决定调用哪个方法(多态).\n\n但是由于类型擦除后:\n\nclass DateInterval extends Pair {\n  public void setSecond(Date second) {...}\n}\nPair中的setSecond为: public void setSecond(Object second) {...}, 所以无法进行动态绑定(Date和Object为不同的类型, 即此时两个setSecond为不同的方法).\n\n由于类型擦除导致多态失效. 所以我们需要用桥方法将两个setSecond方法\"多态\"起来:\n\nclass DateInterval extends Pair {\n  public void setSecond(Date second) {...}\n  public void setSecond(Object second) {\n    setSecond((Date) second);\n  }\n}\n编译器生成了第二个setSecond方法, 从而解决了擦除导致多态失效的问题.\n\n总结如下:\n\n1. 虚拟机中没有泛型, 只有普通的类和方法.\n\n2. 所有的类型参数都用它们的限定类型替换.\n\n3. 桥方法被合成保持多态.\n\n4. 为保持类型安全性, 必要时插入强制类型转换.\n\n\n\n### 约束与局限性\n\n1. 不能用基本类型实例化类型参数\n\n例如没有Pair<double>, 只有Pair<Double>, 因为擦除后只有Object, 而Object不能存储double类型.\n\n运行时类型查询只适用于原始类型\n\n由于存在类型擦除, 所以泛型类型实际上存储的是原始类型. 所以:\n\nif (a instanceof Pair<String>)\n是语法错误的.\n\nif (a instanceof Pair<Object>)\n也是语法错误的. 因为a被当做Pair类型, 而元素类型被擦除为Object而已, 它本身为一个普通的类, 不存在任何的泛型信息.\n\n所以\n\nif (a instanceof Pair)\n是正确的.\n\n同理, 任何Pair的getClass肯定都等于Pair.class:\n\nPair<String> strPair = ...;\nPair<Employee> empPair = ...;\nstrPair.getClass() == empPair.getClass();\n\n2. 不能创建参数化类型的数组\n\n之所以不能实例化参数类型的数组, 是因为数组会记住它元素的类型, 例如字符串的数组是不能存储浮点数的.\n\n而如果对泛型数组进行实例化, 由于擦除的存在, 导致数组的类型为Object, 则可以存储任何的类型, 这跟数组的语法相冲突, 所以在语法层面上, 参数化类型的数组本身是不允许的. 如:\n\nPair<String>[] table = new Pair<String>[10]; //ERROR\nVarargs警告\n\n假设我们编写如下的代码:\n\npublic static <T> void addAll(Collection<T> coll, T... ts) {\n  for (t: ts) coll.add(t);\n}\nCollection<Pair<String>> table = ...;\nPair<String> pair1 = ...;\nPair<String> pair2 = ...;\naddAll(table, pair1, pair2);\n这在语法层面是没有问题的, 运行起来是存在警告的, 是因为虚拟机会建立一个Pair<String>数组, 而这违反了\"不能创建参数化类型的数组\".\n\n这里之所以正确是因为: 1. 数组的存储空间在编译时期确定的, 所以需要确定数组元素的类型. 2. 而针对集合Collection来说, 它的存储空间是动态递增的, 所以无需考虑元素的类型.\n\n这可以增加@SafeVarargs来抑制这个警告.\n\n@SafeVarargs\npublic static <T> void addAll(Collection<T> coll, T... ts){}\n不能实例化类型变量\n\n不能使用像new T(...), new T[...]或T.class这样的表达式中的类型变量, 例如下例的Pair<T>构造器是非法的:\n\npublic Pair() {first = new T(); second = new T();}\n因为类型擦除将T改变为Object, 而new Object()肯定不是代码的本意.\n\n同理, 我们也不能使用:\n\nfirst = T.class.newInstance();\n因为类型擦除的存在, T.class无法明确其Class类型. 所以我们需要显式的指明其Class类型:\n\npublic static <T> Pair<T> makePair(Class<T> c1) {\n  try {return new Pair<>(c1.newInstance(), c1.newInstance());}\n  catch (Exception ex) {return null;}\n}\n我们可以这样调用:\n\nPair<String> p = Pair.makePair(String.class);\n而new T[...]着实让人头疼, 因为类型擦除的原因导致无法确切知道数组的原始类型(语法层面上数组必须知道其元素类型, 才能判断出String[]存储double时候会报错), 则我们需要反射的机制(在运行时获取其class的信息, 从而获取其具体的类型, 则可进行new的操作)动态获取其数据类型, 来进行new T[...].\n\npublic static <T extends Comparable> T[] minmax(T... a) {\n  T[] mm = (T[])Array.newInstance(a.getClass().getComponentType(), 2);\n}\n\n3. 泛型类的静态上下文中类型变量无效\n\n静态的方法或变量是跟具体的类实例无关的, 而泛型的存在本身就跟具体的类实例有关, 两者冲突导致静态域或方法中引用类型变量是无效的.\n\npublic class Singleton<T> {\n  private static T singleInstance; //ERROR\n  public static T getSingleInstance() {} //ERROR\n}\n\n4. 不能抛出或捕获泛型类的实例\n\n因为一旦类型擦除, 根本就不确定其具体的异常类型.\n```\npublic static <T extends Throwable> void doWork(Class<T> t) {\n  try {\n\n  } catch (Throwable e) { //OK\n\n  } catch (T e) { //ERROR\n\n  }\n}\n```\n由于不能抛出或捕获泛型类, 所以也不能对泛型类进行扩展Exception:\n\npublic class Problem<T> extends Exception {} // ERROR\n备注: 对\"可以消除已检查异常的检查\", 不太理解(书章节12.6.7, p543)\n\n擦除后的冲突\n\n例如我们编写如下的代码:\n\npublic class Pair<T> {\n  public boolean equals(T value) {return first.equals(value) && second.equals(value);}\n}\n由于擦除的存在, 导致Pair<String>实际上有两个equals:\n\nboolean equals(String) //defined in Pair<T>\nboolean equals(Object) //inherited from Objects\n要么使用\"桥方法\", 要么重命名函数进行修复.\n\n备注: 泛型规范的原则之一: 要想支持擦除的转换, 就需要强行限制一个类或类型变量不能同时成为两个接口类型的子类, 而这两个接口是同一个接口的不同参数化.\n\n\n\n### 泛型类型的继承规则\n\n无论S与T有什么联系(例如子类和父类的关系), Pair<S>和Pair<T>均没有任何关系. 因为Pair<S>和Pair<T>的本质类型都是Pair.\n\n```\n\nclass A {\n  private String s;\n  A(String s) {\n    this.s = s;\n  }\n  public String show() {\n    return s;\n  }\n}\nclass B extends A {\n  B(String s) {\n    super(s);\n  }\n}\npublic class PairTest1 {\n  public static void main(String[] args) {\n    Pair<B> b = new Pair<>(new B(\"hello\"), new B(\"world\"));\n//    Pair<A> a = b; // ERROR, Pair<B>无法转换为Pair<A>\n    Pair c = b;\n    c.setFirst(new B(\"java\"));\n    System.out.println(((B)c.getFirst()).show());\n  }\n}\n\n```\n### 通配符类型\n\nPair<? extends Employee>表示任何泛型Pair类型, 它的类型参数是Employee的子类, 如Pair<Manager>, 但不是Pair<String>.\n\n所以, 如果我们要打印出所有雇员的信息, 不能定义:\n\npublic static void printBuddies(Pair<Employee> p);\n而应该定义:\n\npublic static void printBuddies(Pair<? extends Employee> p);\n备注:\n\n1. 针对语法糖extends, 它往往表示扩展某个接口,类型或者继承了某个类. 例如interface A extends B, 则说明接口A扩展了接口B, class A extends B, 代表A继承B.\n\n所以** A extends B, 则类型为B.\n\n2. 针对A extends B来说, 只适合get的操作, 因为明确知道其基本类型为B, 但不能执行set操作, 因为不知道具体类型是什么.\n\n通配符的超类型限定\n\n与\"? extends Employee\"相反, \"? super Manager\"限制为Manager的所有超类型.\n\nvoid setFirst(? super Manager);\n? extends Employee getFirst();\n备注: 针对? super Manager, 只适合set的操作, 因为知道具体类型为Manager, 但不能执行get操作, 因为不知道其基本类型.\n\n无限定通配符\n\n对于Pair<?>的方法:\n\n? getFirst()\nvoid setFirst(?)\ngetFirst的返回值只能赋给一个Object. setFirst方法不能被调用, 甚至不能用Object调用. Pair<?>和Pair本质的不同在于: 可以用任意Object对象调用原始的Pair类的setObject方法.\n\n备注: 这里setObject泛指一切set的方法.\n\n所以如果我们要测试一个Pair是否包含一个null引用, 则可以这样定义:\n\npublic static boolean hasNulls(Pair<?> p) {\n  return p.getFirst() == null || p.getSecond() == null;\n}\n而无需定义成:\n\npublic static <T> boolean hasNulls(Pair<T> p){}\n","slug":"java-generic","published":1,"updated":"2017-08-01T12:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5tkg7n5000qt8dm55vzf7jm","content":"<h3 id=\"为什么要使用泛型程序设计\"><a href=\"#为什么要使用泛型程序设计\" class=\"headerlink\" title=\"为什么要使用泛型程序设计\"></a>为什么要使用泛型程序设计</h3><p>泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用.<br>在Java中增加泛型类之前, 泛型程序设计是用继承实现的. 例如ArrayList类只维护一个Object引用的数组:<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class <span class=\"type\">ArrayList</span> &#123;</div><div class=\"line\">  private <span class=\"type\">Object</span>[] elementData;</div><div class=\"line\">  public <span class=\"type\">Object</span> get(<span class=\"built_in\">int</span> i) <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">  public <span class=\"built_in\">void</span> add(<span class=\"type\">Object</span> o) <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样实现有两个问题.</p>\n<ol>\n<li><p>当获取一个值时必须进行强制类型转换.</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList first = <span class=\"keyword\">new</span> <span class=\"type\">ArrayList</span>();</div><div class=\"line\">...;</div><div class=\"line\"><span class=\"keyword\">String</span> filename = (<span class=\"keyword\">String</span>) files.<span class=\"keyword\">get</span>(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>没有进行错误检查, 可以向数组列表中添加任何类的对象.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">files.<span class=\"keyword\">add</span>(<span class=\"keyword\">new</span> file(<span class=\"string\">\"...\"</span>));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>而泛型提供了一个更好的解决方案: 类型参数:<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;<span class=\"keyword\">String</span>&gt; files = <span class=\"keyword\">new</span> <span class=\"type\">ArrayList</span>&lt;<span class=\"keyword\">String</span>&gt;();</div></pre></td></tr></table></figure></p>\n<p>备注:</p>\n<p>问题1: 为什么针对files.get(0), 强制转换为String可以成功?<br>答: 虽然ArrayList存储的是Object, 但它也会存储额外的信息, 用来确定所存储的元素类型, 所以才能保证强制转换的正确性.</p>\n<p>问题2: 为什么是以Object为引用?<br>答: 因为Object是Java中的最原始的类型, 除了基本数据类型外, 所有的对象均派生于Object, 即所有的对象都可向上转型为Object.</p>\n<h3 id=\"定义简单泛型类\"><a href=\"#定义简单泛型类\" class=\"headerlink\" title=\"定义简单泛型类\"></a>定义简单泛型类</h3><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> T first;</div><div class=\"line\">  <span class=\"keyword\">private</span> T second;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> Pair() &#123; first = <span class=\"literal\">null</span>; second = <span class=\"literal\">null</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> Pair(T first, T second) &#123;<span class=\"built_in\">this</span>.first = first; <span class=\"built_in\">this</span>.second = second;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> T getFirst() &#123;<span class=\"keyword\">return</span> first;&#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> T getSecond() &#123;<span class=\"keyword\">return</span> second;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> void setFirst(T <span class=\"keyword\">new</span><span class=\"type\">Value</span>) &#123;first = <span class=\"keyword\">new</span><span class=\"type\">Value</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> void setSecond(T <span class=\"keyword\">new</span><span class=\"type\">Value</span>) &#123;second = <span class=\"keyword\">new</span><span class=\"type\">Value</span>;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 在Java中使用:<br> 变量E表示集合的元素类型;<br>  K和V分别表示表的关键字与值的类型;<br>  T, U和S表示任意类型;</p>\n<h3 id=\"定义泛型方法\"><a href=\"#定义泛型方法\" class=\"headerlink\" title=\"定义泛型方法\"></a>定义泛型方法</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayAlg</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getMiddle</span>(<span class=\"params\">T... a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a[a.length / <span class=\"number\">2</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后, 我们可以这样进行调用:<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">String</span> middle = ArrayAlg.&lt;<span class=\"keyword\">String</span>&gt;getMiddle(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"Java\"</span>);</div></pre></td></tr></table></figure></p>\n<p>备注:</p>\n<ol>\n<li>泛型方法既可以定义在普通类中, 也可以定义在泛型类中.</li>\n<li>如果泛型方法的参数类型可以推导出来, 则可省略, 如<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">String middle</span> = ArrayAlg.getMiddle(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Q.\"</span>, <span class=\"string\">\"Public\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>但是在无法推导出来时候, 例如double和int, 则还是需要类型参数.<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ERROR</span></div><div class=\"line\">double middle = ArrayAlg.getMiddle(<span class=\"number\">3.14</span>, <span class=\"number\">1729</span>, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>类型变量的限定</p>\n<p>有时, 类或方法需要对类型变量加以约束. 例如我们计算数组中的最小元素:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayAlg</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">min</span>(<span class=\"params\">T[] a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span> || a.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    T smallest = a[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (smallest.compareTo(a[i]) &gt; <span class=\"number\">0</span>) smallest = a[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> smallest;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里存在一个问题在于: 调用compareTo方法的对象必须实现了Comparable接口才行, 而T类型并不确定是否实现了Comparable接口.</p>\n<p>我们需要扩展T类型:<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"keyword\">static</span> &lt;T extends <span class=\"type\">Comparable</span>&gt; T min(T[] a) <span class=\"meta\">&#123;...&#125;</span></div></pre></td></tr></table></figure></p>\n<p>而一个类型变量或通配符可以有多个限定:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">T <span class=\"keyword\">extends</span> <span class=\"built_in\">Comparable</span> &amp; Serializable</div></pre></td></tr></table></figure></p>\n<p>一个实际的例子:<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> PairTest2 &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">    <span class=\"keyword\">String</span>[] strs = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[]&#123;<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"love\"</span>, <span class=\"string\">\"coding\"</span>&#125;;</div><div class=\"line\">    Pair&lt;<span class=\"keyword\">String</span>&gt; mm = ArrayAlg.minmax(strs);</div><div class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"min=\"</span> + mm.getFirst());</div><div class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"max=\"</span> + mm.getSecond());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ArrayAlg &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&gt; Pair&lt;T&gt; minmax(T[] a) &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span> (a == null || a.length == <span class=\"number\">0</span>) <span class=\"built_in\">return</span> null;</div><div class=\"line\">    T <span class=\"built_in\">min</span> = a[<span class=\"number\">0</span>];</div><div class=\"line\">    T <span class=\"built_in\">max</span> = a[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">      <span class=\"built_in\">if</span> (<span class=\"built_in\">min</span>.compareTo(a[i]) &gt; <span class=\"number\">0</span>) <span class=\"built_in\">min</span> = a[i];</div><div class=\"line\">      <span class=\"built_in\">if</span> (<span class=\"built_in\">max</span>.compareTo(a[i]) &lt; <span class=\"number\">0</span>) <span class=\"built_in\">max</span> = a[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"built_in\">min</span>, <span class=\"built_in\">max</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"泛型代码和虚拟机\"><a href=\"#泛型代码和虚拟机\" class=\"headerlink\" title=\"泛型代码和虚拟机\"></a>泛型代码和虚拟机</h3><p>虚拟机没有泛型类型对象–所有对象都属于普通类.</p>\n<p>无论何时定义一个泛型类型, 都自动提供了一个相应的原始类型. 原始类型的名字就是删去类型参数后的泛型类型名. 擦除类型变量, 并替换为限定类型.</p>\n<p>如Pair<t>的原始类型如下:<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">Object</span> first;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">Object</span> second;</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></t></p>\n<p>而假定对T进行了扩展, 则为扩展的类型:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Interval&lt;T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span> <span class=\"title\">&amp;</span> <span class=\"title\">Serializable&gt;</span> <span class=\"title\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>其中原始类型为: Comparable</p>\n<p>但如果某些变量的类型为Serializable, 则编译器在必要时候进行强制转换(Comparable –&gt; Serializable)</p>\n<p>翻译泛型表达式<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pair&lt;Employee&gt; <span class=\"keyword\">buddies </span>= ...<span class=\"comment\">;</span></div><div class=\"line\">Employee <span class=\"keyword\">buddy </span>= <span class=\"keyword\">buddies.getFirst();</span></div></pre></td></tr></table></figure></p>\n<p>擦除getFirst的返回类型后将返回Object类型. 编译器自动插入Employee的强制类型转换. 即编译器把这个方法调用翻译为两条虚拟机指令:</p>\n<ol>\n<li><p>对原始方法Pair.getFirst的调用.</p>\n</li>\n<li><p>将返回的Object类型强制转换为Employee类型.</p>\n</li>\n</ol>\n<p>由于对象buddies会存储实际类型的信息(Employee), 所以可以保证强制类型转换成功.</p>\n<p>翻译泛型方法</p>\n<p>类型擦除也会出现在泛型方法中:<br>public static <t extends=\"\" comparable=\"\"> T min(T[] a);<br>经过类型擦除后变成:<br>public static Comparable min(Comparable[] a);<br>但方法的擦除带来两个复杂的问题, 例如:<br>class DateInterval extends Pair<date> {<br>  public void setSecond(Date second) {…}<br>}<br>这里由于Pair也有setSecond(Date d)方法, 所以它们为同样的方法, 动态运行时候可以绑定变量的类型, 决定调用哪个方法(多态).</date></t></p>\n<p>但是由于类型擦除后:</p>\n<p>class DateInterval extends Pair {<br>  public void setSecond(Date second) {…}<br>}<br>Pair中的setSecond为: public void setSecond(Object second) {…}, 所以无法进行动态绑定(Date和Object为不同的类型, 即此时两个setSecond为不同的方法).</p>\n<p>由于类型擦除导致多态失效. 所以我们需要用桥方法将两个setSecond方法”多态”起来:</p>\n<p>class DateInterval extends Pair {<br>  public void setSecond(Date second) {…}<br>  public void setSecond(Object second) {<br>    setSecond((Date) second);<br>  }<br>}<br>编译器生成了第二个setSecond方法, 从而解决了擦除导致多态失效的问题.</p>\n<p>总结如下:</p>\n<ol>\n<li><p>虚拟机中没有泛型, 只有普通的类和方法.</p>\n</li>\n<li><p>所有的类型参数都用它们的限定类型替换.</p>\n</li>\n<li><p>桥方法被合成保持多态.</p>\n</li>\n<li><p>为保持类型安全性, 必要时插入强制类型转换.</p>\n</li>\n</ol>\n<h3 id=\"约束与局限性\"><a href=\"#约束与局限性\" class=\"headerlink\" title=\"约束与局限性\"></a>约束与局限性</h3><ol>\n<li>不能用基本类型实例化类型参数</li>\n</ol>\n<p>例如没有Pair<double>, 只有Pair<double>, 因为擦除后只有Object, 而Object不能存储double类型.</double></double></p>\n<p>运行时类型查询只适用于原始类型</p>\n<p>由于存在类型擦除, 所以泛型类型实际上存储的是原始类型. 所以:</p>\n<p>if (a instanceof Pair<string>)<br>是语法错误的.</string></p>\n<p>if (a instanceof Pair<object>)<br>也是语法错误的. 因为a被当做Pair类型, 而元素类型被擦除为Object而已, 它本身为一个普通的类, 不存在任何的泛型信息.</object></p>\n<p>所以</p>\n<p>if (a instanceof Pair)<br>是正确的.</p>\n<p>同理, 任何Pair的getClass肯定都等于Pair.class:</p>\n<p>Pair<string> strPair = …;<br>Pair<employee> empPair = …;<br>strPair.getClass() == empPair.getClass();</employee></string></p>\n<ol>\n<li>不能创建参数化类型的数组</li>\n</ol>\n<p>之所以不能实例化参数类型的数组, 是因为数组会记住它元素的类型, 例如字符串的数组是不能存储浮点数的.</p>\n<p>而如果对泛型数组进行实例化, 由于擦除的存在, 导致数组的类型为Object, 则可以存储任何的类型, 这跟数组的语法相冲突, 所以在语法层面上, 参数化类型的数组本身是不允许的. 如:</p>\n<p>Pair<string>[] table = new Pair<string>[10]; //ERROR<br>Varargs警告</string></string></p>\n<p>假设我们编写如下的代码:</p>\n<p>public static <t> void addAll(Collection<t> coll, T… ts) {<br>  for (t: ts) coll.add(t);<br>}<br>Collection<pair<string>&gt; table = …;<br>Pair<string> pair1 = …;<br>Pair<string> pair2 = …;<br>addAll(table, pair1, pair2);<br>这在语法层面是没有问题的, 运行起来是存在警告的, 是因为虚拟机会建立一个Pair<string>数组, 而这违反了”不能创建参数化类型的数组”.</string></string></string></pair<string></t></t></p>\n<p>这里之所以正确是因为: 1. 数组的存储空间在编译时期确定的, 所以需要确定数组元素的类型. 2. 而针对集合Collection来说, 它的存储空间是动态递增的, 所以无需考虑元素的类型.</p>\n<p>这可以增加@SafeVarargs来抑制这个警告.</p>\n<p>@SafeVarargs<br>public static <t> void addAll(Collection<t> coll, T… ts){}<br>不能实例化类型变量</t></t></p>\n<p>不能使用像new T(…), new T[…]或T.class这样的表达式中的类型变量, 例如下例的Pair<t>构造器是非法的:</t></p>\n<p>public Pair() {first = new T(); second = new T();}<br>因为类型擦除将T改变为Object, 而new Object()肯定不是代码的本意.</p>\n<p>同理, 我们也不能使用:</p>\n<p>first = T.class.newInstance();<br>因为类型擦除的存在, T.class无法明确其Class类型. 所以我们需要显式的指明其Class类型:</p>\n<p>public static <t> Pair<t> makePair(Class<t> c1) {<br>  try {return new Pair&lt;&gt;(c1.newInstance(), c1.newInstance());}<br>  catch (Exception ex) {return null;}<br>}<br>我们可以这样调用:</t></t></t></p>\n<p>Pair<string> p = Pair.makePair(String.class);<br>而new T[…]着实让人头疼, 因为类型擦除的原因导致无法确切知道数组的原始类型(语法层面上数组必须知道其元素类型, 才能判断出String[]存储double时候会报错), 则我们需要反射的机制(在运行时获取其class的信息, 从而获取其具体的类型, 则可进行new的操作)动态获取其数据类型, 来进行new T[…].</string></p>\n<p>public static <t extends=\"\" comparable=\"\"> T[] minmax(T… a) {<br>  T[] mm = (T[])Array.newInstance(a.getClass().getComponentType(), 2);<br>}</t></p>\n<ol>\n<li>泛型类的静态上下文中类型变量无效</li>\n</ol>\n<p>静态的方法或变量是跟具体的类实例无关的, 而泛型的存在本身就跟具体的类实例有关, 两者冲突导致静态域或方法中引用类型变量是无效的.</p>\n<p>public class Singleton<t> {<br>  private static T singleInstance; //ERROR<br>  public static T getSingleInstance() {} //ERROR<br>}</t></p>\n<ol>\n<li>不能抛出或捕获泛型类的实例</li>\n</ol>\n<p>因为一旦类型擦除, 根本就不确定其具体的异常类型.<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T <span class=\"keyword\">extends</span> Throwable&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">(Class&lt;T&gt; t)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123; <span class=\"comment\">//OK</span></div><div class=\"line\"></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (T e) &#123; <span class=\"comment\">//ERROR</span></div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由于不能抛出或捕获泛型类, 所以也不能对泛型类进行扩展Exception:</p>\n<p>public class Problem<t> extends Exception {} // ERROR<br>备注: 对”可以消除已检查异常的检查”, 不太理解(书章节12.6.7, p543)</t></p>\n<p>擦除后的冲突</p>\n<p>例如我们编写如下的代码:</p>\n<p>public class Pair<t> {<br>  public boolean equals(T value) {return first.equals(value) &amp;&amp; second.equals(value);}<br>}<br>由于擦除的存在, 导致Pair<string>实际上有两个equals:</string></t></p>\n<p>boolean equals(String) //defined in Pair<t><br>boolean equals(Object) //inherited from Objects<br>要么使用”桥方法”, 要么重命名函数进行修复.</t></p>\n<p>备注: 泛型规范的原则之一: 要想支持擦除的转换, 就需要强行限制一个类或类型变量不能同时成为两个接口类型的子类, 而这两个接口是同一个接口的不同参数化.</p>\n<h3 id=\"泛型类型的继承规则\"><a href=\"#泛型类型的继承规则\" class=\"headerlink\" title=\"泛型类型的继承规则\"></a>泛型类型的继承规则</h3><p>无论S与T有什么联系(例如子类和父类的关系), Pair<s>和Pair<t>均没有任何关系. 因为Pair<s>和Pair<t>的本质类型都是Pair.</t></s></t></s></p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> s;</div><div class=\"line\">  A(<span class=\"keyword\">String</span> s) &#123;</div><div class=\"line\">    <span class=\"built_in\">this</span>.s = s;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> show() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\"><span class=\"keyword\">extends</span> <span class=\"type\">A</span></span> </span>&#123;</div><div class=\"line\">  B(<span class=\"keyword\">String</span> s) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(s);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PairTest1</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">    Pair&lt;B&gt; b = <span class=\"keyword\">new</span> <span class=\"type\">Pair</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"type\">B</span>(<span class=\"string\">\"hello\"</span>), <span class=\"keyword\">new</span> <span class=\"type\">B</span>(<span class=\"string\">\"world\"</span>));</div><div class=\"line\"><span class=\"comment\">//    Pair&lt;A&gt; a = b; // ERROR, Pair&lt;B&gt;无法转换为Pair&lt;A&gt;</span></div><div class=\"line\">    Pair c = b;</div><div class=\"line\">    c.setFirst(<span class=\"keyword\">new</span> <span class=\"type\">B</span>(<span class=\"string\">\"java\"</span>));</div><div class=\"line\">    System.out.println(((B)c.getFirst()).show());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"通配符类型\"><a href=\"#通配符类型\" class=\"headerlink\" title=\"通配符类型\"></a>通配符类型</h3><p>Pair&lt;? extends Employee&gt;表示任何泛型Pair类型, 它的类型参数是Employee的子类, 如Pair<manager>, 但不是Pair<string>.</string></manager></p>\n<p>所以, 如果我们要打印出所有雇员的信息, 不能定义:</p>\n<p>public static void printBuddies(Pair<employee> p);<br>而应该定义:</employee></p>\n<p>public static void printBuddies(Pair&lt;? extends Employee&gt; p);<br>备注:</p>\n<ol>\n<li>针对语法糖extends, 它往往表示扩展某个接口,类型或者继承了某个类. 例如interface A extends B, 则说明接口A扩展了接口B, class A extends B, 代表A继承B.</li>\n</ol>\n<p>所以** A extends B, 则类型为B.</p>\n<ol>\n<li>针对A extends B来说, 只适合get的操作, 因为明确知道其基本类型为B, 但不能执行set操作, 因为不知道具体类型是什么.</li>\n</ol>\n<p>通配符的超类型限定</p>\n<p>与”? extends Employee”相反, “? super Manager”限制为Manager的所有超类型.</p>\n<p>void setFirst(? super Manager);<br>? extends Employee getFirst();<br>备注: 针对? super Manager, 只适合set的操作, 因为知道具体类型为Manager, 但不能执行get操作, 因为不知道其基本类型.</p>\n<p>无限定通配符</p>\n<p>对于Pair&lt;?&gt;的方法:</p>\n<p>? getFirst()<br>void setFirst(?)<br>getFirst的返回值只能赋给一个Object. setFirst方法不能被调用, 甚至不能用Object调用. Pair&lt;?&gt;和Pair本质的不同在于: 可以用任意Object对象调用原始的Pair类的setObject方法.</p>\n<p>备注: 这里setObject泛指一切set的方法.</p>\n<p>所以如果我们要测试一个Pair是否包含一个null引用, 则可以这样定义:</p>\n<p>public static boolean hasNulls(Pair&lt;?&gt; p) {<br>  return p.getFirst() == null || p.getSecond() == null;<br>}<br>而无需定义成:</p>\n<p>public static <t> boolean hasNulls(Pair<t> p){}</t></t></p>\n","excerpt":"","more":"<h3 id=\"为什么要使用泛型程序设计\"><a href=\"#为什么要使用泛型程序设计\" class=\"headerlink\" title=\"为什么要使用泛型程序设计\"></a>为什么要使用泛型程序设计</h3><p>泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用.<br>在Java中增加泛型类之前, 泛型程序设计是用继承实现的. 例如ArrayList类只维护一个Object引用的数组:<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class <span class=\"type\">ArrayList</span> &#123;</div><div class=\"line\">  private <span class=\"type\">Object</span>[] elementData;</div><div class=\"line\">  public <span class=\"type\">Object</span> get(<span class=\"built_in\">int</span> i) <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">  public <span class=\"built_in\">void</span> add(<span class=\"type\">Object</span> o) <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样实现有两个问题.</p>\n<ol>\n<li><p>当获取一个值时必须进行强制类型转换.</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList first = <span class=\"keyword\">new</span> <span class=\"type\">ArrayList</span>();</div><div class=\"line\">...;</div><div class=\"line\"><span class=\"keyword\">String</span> filename = (<span class=\"keyword\">String</span>) files.<span class=\"keyword\">get</span>(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>没有进行错误检查, 可以向数组列表中添加任何类的对象.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">files.<span class=\"keyword\">add</span>(<span class=\"keyword\">new</span> file(<span class=\"string\">\"...\"</span>));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>而泛型提供了一个更好的解决方案: 类型参数:<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;<span class=\"keyword\">String</span>&gt; files = <span class=\"keyword\">new</span> <span class=\"type\">ArrayList</span>&lt;<span class=\"keyword\">String</span>&gt;();</div></pre></td></tr></table></figure></p>\n<p>备注:</p>\n<p>问题1: 为什么针对files.get(0), 强制转换为String可以成功?<br>答: 虽然ArrayList存储的是Object, 但它也会存储额外的信息, 用来确定所存储的元素类型, 所以才能保证强制转换的正确性.</p>\n<p>问题2: 为什么是以Object为引用?<br>答: 因为Object是Java中的最原始的类型, 除了基本数据类型外, 所有的对象均派生于Object, 即所有的对象都可向上转型为Object.</p>\n<h3 id=\"定义简单泛型类\"><a href=\"#定义简单泛型类\" class=\"headerlink\" title=\"定义简单泛型类\"></a>定义简单泛型类</h3><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> T first;</div><div class=\"line\">  <span class=\"keyword\">private</span> T second;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> Pair() &#123; first = <span class=\"literal\">null</span>; second = <span class=\"literal\">null</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> Pair(T first, T second) &#123;<span class=\"built_in\">this</span>.first = first; <span class=\"built_in\">this</span>.second = second;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> T getFirst() &#123;<span class=\"keyword\">return</span> first;&#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> T getSecond() &#123;<span class=\"keyword\">return</span> second;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> void setFirst(T <span class=\"keyword\">new</span><span class=\"type\">Value</span>) &#123;first = <span class=\"keyword\">new</span><span class=\"type\">Value</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> void setSecond(T <span class=\"keyword\">new</span><span class=\"type\">Value</span>) &#123;second = <span class=\"keyword\">new</span><span class=\"type\">Value</span>;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 在Java中使用:<br> 变量E表示集合的元素类型;<br>  K和V分别表示表的关键字与值的类型;<br>  T, U和S表示任意类型;</p>\n<h3 id=\"定义泛型方法\"><a href=\"#定义泛型方法\" class=\"headerlink\" title=\"定义泛型方法\"></a>定义泛型方法</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayAlg</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getMiddle</span>(<span class=\"params\">T... a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a[a.length / <span class=\"number\">2</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后, 我们可以这样进行调用:<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">String</span> middle = ArrayAlg.&lt;<span class=\"keyword\">String</span>&gt;getMiddle(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"Java\"</span>);</div></pre></td></tr></table></figure></p>\n<p>备注:</p>\n<ol>\n<li>泛型方法既可以定义在普通类中, 也可以定义在泛型类中.</li>\n<li>如果泛型方法的参数类型可以推导出来, 则可省略, 如<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">String middle</span> = ArrayAlg.getMiddle(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Q.\"</span>, <span class=\"string\">\"Public\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>但是在无法推导出来时候, 例如double和int, 则还是需要类型参数.<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ERROR</span></div><div class=\"line\">double middle = ArrayAlg.getMiddle(<span class=\"number\">3.14</span>, <span class=\"number\">1729</span>, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>类型变量的限定</p>\n<p>有时, 类或方法需要对类型变量加以约束. 例如我们计算数组中的最小元素:<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayAlg</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">min</span>(<span class=\"params\">T[] a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span> || a.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    T smallest = a[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (smallest.compareTo(a[i]) &gt; <span class=\"number\">0</span>) smallest = a[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> smallest;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里存在一个问题在于: 调用compareTo方法的对象必须实现了Comparable接口才行, 而T类型并不确定是否实现了Comparable接口.</p>\n<p>我们需要扩展T类型:<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"keyword\">static</span> &lt;T extends <span class=\"type\">Comparable</span>&gt; T min(T[] a) <span class=\"meta\">&#123;...&#125;</span></div></pre></td></tr></table></figure></p>\n<p>而一个类型变量或通配符可以有多个限定:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">T <span class=\"keyword\">extends</span> <span class=\"built_in\">Comparable</span> &amp; Serializable</div></pre></td></tr></table></figure></p>\n<p>一个实际的例子:<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> PairTest2 &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">    <span class=\"keyword\">String</span>[] strs = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[]&#123;<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"love\"</span>, <span class=\"string\">\"coding\"</span>&#125;;</div><div class=\"line\">    Pair&lt;<span class=\"keyword\">String</span>&gt; mm = ArrayAlg.minmax(strs);</div><div class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"min=\"</span> + mm.getFirst());</div><div class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"max=\"</span> + mm.getSecond());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ArrayAlg &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&gt; Pair&lt;T&gt; minmax(T[] a) &#123;</div><div class=\"line\">    <span class=\"built_in\">if</span> (a == null || a.length == <span class=\"number\">0</span>) <span class=\"built_in\">return</span> null;</div><div class=\"line\">    T <span class=\"built_in\">min</span> = a[<span class=\"number\">0</span>];</div><div class=\"line\">    T <span class=\"built_in\">max</span> = a[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">      <span class=\"built_in\">if</span> (<span class=\"built_in\">min</span>.compareTo(a[i]) &gt; <span class=\"number\">0</span>) <span class=\"built_in\">min</span> = a[i];</div><div class=\"line\">      <span class=\"built_in\">if</span> (<span class=\"built_in\">max</span>.compareTo(a[i]) &lt; <span class=\"number\">0</span>) <span class=\"built_in\">max</span> = a[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">new</span> Pair&lt;&gt;(<span class=\"built_in\">min</span>, <span class=\"built_in\">max</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"泛型代码和虚拟机\"><a href=\"#泛型代码和虚拟机\" class=\"headerlink\" title=\"泛型代码和虚拟机\"></a>泛型代码和虚拟机</h3><p>虚拟机没有泛型类型对象–所有对象都属于普通类.</p>\n<p>无论何时定义一个泛型类型, 都自动提供了一个相应的原始类型. 原始类型的名字就是删去类型参数后的泛型类型名. 擦除类型变量, 并替换为限定类型.</p>\n<p>如Pair<T>的原始类型如下:<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">Object</span> first;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">Object</span> second;</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>而假定对T进行了扩展, 则为扩展的类型:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Interval&lt;T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span> <span class=\"title\">&amp;</span> <span class=\"title\">Serializable&gt;</span> <span class=\"title\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>其中原始类型为: Comparable</p>\n<p>但如果某些变量的类型为Serializable, 则编译器在必要时候进行强制转换(Comparable –&gt; Serializable)</p>\n<p>翻译泛型表达式<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pair&lt;Employee&gt; <span class=\"keyword\">buddies </span>= ...<span class=\"comment\">;</span></div><div class=\"line\">Employee <span class=\"keyword\">buddy </span>= <span class=\"keyword\">buddies.getFirst();</span></div></pre></td></tr></table></figure></p>\n<p>擦除getFirst的返回类型后将返回Object类型. 编译器自动插入Employee的强制类型转换. 即编译器把这个方法调用翻译为两条虚拟机指令:</p>\n<ol>\n<li><p>对原始方法Pair.getFirst的调用.</p>\n</li>\n<li><p>将返回的Object类型强制转换为Employee类型.</p>\n</li>\n</ol>\n<p>由于对象buddies会存储实际类型的信息(Employee), 所以可以保证强制类型转换成功.</p>\n<p>翻译泛型方法</p>\n<p>类型擦除也会出现在泛型方法中:<br>public static <T extends Comparable> T min(T[] a);<br>经过类型擦除后变成:<br>public static Comparable min(Comparable[] a);<br>但方法的擦除带来两个复杂的问题, 例如:<br>class DateInterval extends Pair<Date> {<br>  public void setSecond(Date second) {…}<br>}<br>这里由于Pair也有setSecond(Date d)方法, 所以它们为同样的方法, 动态运行时候可以绑定变量的类型, 决定调用哪个方法(多态).</p>\n<p>但是由于类型擦除后:</p>\n<p>class DateInterval extends Pair {<br>  public void setSecond(Date second) {…}<br>}<br>Pair中的setSecond为: public void setSecond(Object second) {…}, 所以无法进行动态绑定(Date和Object为不同的类型, 即此时两个setSecond为不同的方法).</p>\n<p>由于类型擦除导致多态失效. 所以我们需要用桥方法将两个setSecond方法”多态”起来:</p>\n<p>class DateInterval extends Pair {<br>  public void setSecond(Date second) {…}<br>  public void setSecond(Object second) {<br>    setSecond((Date) second);<br>  }<br>}<br>编译器生成了第二个setSecond方法, 从而解决了擦除导致多态失效的问题.</p>\n<p>总结如下:</p>\n<ol>\n<li><p>虚拟机中没有泛型, 只有普通的类和方法.</p>\n</li>\n<li><p>所有的类型参数都用它们的限定类型替换.</p>\n</li>\n<li><p>桥方法被合成保持多态.</p>\n</li>\n<li><p>为保持类型安全性, 必要时插入强制类型转换.</p>\n</li>\n</ol>\n<h3 id=\"约束与局限性\"><a href=\"#约束与局限性\" class=\"headerlink\" title=\"约束与局限性\"></a>约束与局限性</h3><ol>\n<li>不能用基本类型实例化类型参数</li>\n</ol>\n<p>例如没有Pair<double>, 只有Pair<Double>, 因为擦除后只有Object, 而Object不能存储double类型.</p>\n<p>运行时类型查询只适用于原始类型</p>\n<p>由于存在类型擦除, 所以泛型类型实际上存储的是原始类型. 所以:</p>\n<p>if (a instanceof Pair<String>)<br>是语法错误的.</p>\n<p>if (a instanceof Pair<Object>)<br>也是语法错误的. 因为a被当做Pair类型, 而元素类型被擦除为Object而已, 它本身为一个普通的类, 不存在任何的泛型信息.</p>\n<p>所以</p>\n<p>if (a instanceof Pair)<br>是正确的.</p>\n<p>同理, 任何Pair的getClass肯定都等于Pair.class:</p>\n<p>Pair<String> strPair = …;<br>Pair<Employee> empPair = …;<br>strPair.getClass() == empPair.getClass();</p>\n<ol>\n<li>不能创建参数化类型的数组</li>\n</ol>\n<p>之所以不能实例化参数类型的数组, 是因为数组会记住它元素的类型, 例如字符串的数组是不能存储浮点数的.</p>\n<p>而如果对泛型数组进行实例化, 由于擦除的存在, 导致数组的类型为Object, 则可以存储任何的类型, 这跟数组的语法相冲突, 所以在语法层面上, 参数化类型的数组本身是不允许的. 如:</p>\n<p>Pair<String>[] table = new Pair<String>[10]; //ERROR<br>Varargs警告</p>\n<p>假设我们编写如下的代码:</p>\n<p>public static <T> void addAll(Collection<T> coll, T… ts) {<br>  for (t: ts) coll.add(t);<br>}<br>Collection<Pair<String>&gt; table = …;<br>Pair<String> pair1 = …;<br>Pair<String> pair2 = …;<br>addAll(table, pair1, pair2);<br>这在语法层面是没有问题的, 运行起来是存在警告的, 是因为虚拟机会建立一个Pair<String>数组, 而这违反了”不能创建参数化类型的数组”.</p>\n<p>这里之所以正确是因为: 1. 数组的存储空间在编译时期确定的, 所以需要确定数组元素的类型. 2. 而针对集合Collection来说, 它的存储空间是动态递增的, 所以无需考虑元素的类型.</p>\n<p>这可以增加@SafeVarargs来抑制这个警告.</p>\n<p>@SafeVarargs<br>public static <T> void addAll(Collection<T> coll, T… ts){}<br>不能实例化类型变量</p>\n<p>不能使用像new T(…), new T[…]或T.class这样的表达式中的类型变量, 例如下例的Pair<T>构造器是非法的:</p>\n<p>public Pair() {first = new T(); second = new T();}<br>因为类型擦除将T改变为Object, 而new Object()肯定不是代码的本意.</p>\n<p>同理, 我们也不能使用:</p>\n<p>first = T.class.newInstance();<br>因为类型擦除的存在, T.class无法明确其Class类型. 所以我们需要显式的指明其Class类型:</p>\n<p>public static <T> Pair<T> makePair(Class<T> c1) {<br>  try {return new Pair&lt;&gt;(c1.newInstance(), c1.newInstance());}<br>  catch (Exception ex) {return null;}<br>}<br>我们可以这样调用:</p>\n<p>Pair<String> p = Pair.makePair(String.class);<br>而new T[…]着实让人头疼, 因为类型擦除的原因导致无法确切知道数组的原始类型(语法层面上数组必须知道其元素类型, 才能判断出String[]存储double时候会报错), 则我们需要反射的机制(在运行时获取其class的信息, 从而获取其具体的类型, 则可进行new的操作)动态获取其数据类型, 来进行new T[…].</p>\n<p>public static <T extends Comparable> T[] minmax(T… a) {<br>  T[] mm = (T[])Array.newInstance(a.getClass().getComponentType(), 2);<br>}</p>\n<ol>\n<li>泛型类的静态上下文中类型变量无效</li>\n</ol>\n<p>静态的方法或变量是跟具体的类实例无关的, 而泛型的存在本身就跟具体的类实例有关, 两者冲突导致静态域或方法中引用类型变量是无效的.</p>\n<p>public class Singleton<T> {<br>  private static T singleInstance; //ERROR<br>  public static T getSingleInstance() {} //ERROR<br>}</p>\n<ol>\n<li>不能抛出或捕获泛型类的实例</li>\n</ol>\n<p>因为一旦类型擦除, 根本就不确定其具体的异常类型.<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T <span class=\"keyword\">extends</span> Throwable&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">(Class&lt;T&gt; t)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123; <span class=\"comment\">//OK</span></div><div class=\"line\"></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (T e) &#123; <span class=\"comment\">//ERROR</span></div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由于不能抛出或捕获泛型类, 所以也不能对泛型类进行扩展Exception:</p>\n<p>public class Problem<T> extends Exception {} // ERROR<br>备注: 对”可以消除已检查异常的检查”, 不太理解(书章节12.6.7, p543)</p>\n<p>擦除后的冲突</p>\n<p>例如我们编写如下的代码:</p>\n<p>public class Pair<T> {<br>  public boolean equals(T value) {return first.equals(value) &amp;&amp; second.equals(value);}<br>}<br>由于擦除的存在, 导致Pair<String>实际上有两个equals:</p>\n<p>boolean equals(String) //defined in Pair<T><br>boolean equals(Object) //inherited from Objects<br>要么使用”桥方法”, 要么重命名函数进行修复.</p>\n<p>备注: 泛型规范的原则之一: 要想支持擦除的转换, 就需要强行限制一个类或类型变量不能同时成为两个接口类型的子类, 而这两个接口是同一个接口的不同参数化.</p>\n<h3 id=\"泛型类型的继承规则\"><a href=\"#泛型类型的继承规则\" class=\"headerlink\" title=\"泛型类型的继承规则\"></a>泛型类型的继承规则</h3><p>无论S与T有什么联系(例如子类和父类的关系), Pair<S>和Pair<T>均没有任何关系. 因为Pair<S>和Pair<T>的本质类型都是Pair.</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> s;</div><div class=\"line\">  A(<span class=\"keyword\">String</span> s) &#123;</div><div class=\"line\">    <span class=\"built_in\">this</span>.s = s;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> show() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\"><span class=\"keyword\">extends</span> <span class=\"type\">A</span></span> </span>&#123;</div><div class=\"line\">  B(<span class=\"keyword\">String</span> s) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(s);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PairTest1</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">    Pair&lt;B&gt; b = <span class=\"keyword\">new</span> <span class=\"type\">Pair</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"type\">B</span>(<span class=\"string\">\"hello\"</span>), <span class=\"keyword\">new</span> <span class=\"type\">B</span>(<span class=\"string\">\"world\"</span>));</div><div class=\"line\"><span class=\"comment\">//    Pair&lt;A&gt; a = b; // ERROR, Pair&lt;B&gt;无法转换为Pair&lt;A&gt;</span></div><div class=\"line\">    Pair c = b;</div><div class=\"line\">    c.setFirst(<span class=\"keyword\">new</span> <span class=\"type\">B</span>(<span class=\"string\">\"java\"</span>));</div><div class=\"line\">    System.out.println(((B)c.getFirst()).show());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"通配符类型\"><a href=\"#通配符类型\" class=\"headerlink\" title=\"通配符类型\"></a>通配符类型</h3><p>Pair&lt;? extends Employee&gt;表示任何泛型Pair类型, 它的类型参数是Employee的子类, 如Pair<Manager>, 但不是Pair<String>.</p>\n<p>所以, 如果我们要打印出所有雇员的信息, 不能定义:</p>\n<p>public static void printBuddies(Pair<Employee> p);<br>而应该定义:</p>\n<p>public static void printBuddies(Pair&lt;? extends Employee&gt; p);<br>备注:</p>\n<ol>\n<li>针对语法糖extends, 它往往表示扩展某个接口,类型或者继承了某个类. 例如interface A extends B, 则说明接口A扩展了接口B, class A extends B, 代表A继承B.</li>\n</ol>\n<p>所以** A extends B, 则类型为B.</p>\n<ol>\n<li>针对A extends B来说, 只适合get的操作, 因为明确知道其基本类型为B, 但不能执行set操作, 因为不知道具体类型是什么.</li>\n</ol>\n<p>通配符的超类型限定</p>\n<p>与”? extends Employee”相反, “? super Manager”限制为Manager的所有超类型.</p>\n<p>void setFirst(? super Manager);<br>? extends Employee getFirst();<br>备注: 针对? super Manager, 只适合set的操作, 因为知道具体类型为Manager, 但不能执行get操作, 因为不知道其基本类型.</p>\n<p>无限定通配符</p>\n<p>对于Pair&lt;?&gt;的方法:</p>\n<p>? getFirst()<br>void setFirst(?)<br>getFirst的返回值只能赋给一个Object. setFirst方法不能被调用, 甚至不能用Object调用. Pair&lt;?&gt;和Pair本质的不同在于: 可以用任意Object对象调用原始的Pair类的setObject方法.</p>\n<p>备注: 这里setObject泛指一切set的方法.</p>\n<p>所以如果我们要测试一个Pair是否包含一个null引用, 则可以这样定义:</p>\n<p>public static boolean hasNulls(Pair&lt;?&gt; p) {<br>  return p.getFirst() == null || p.getSecond() == null;<br>}<br>而无需定义成:</p>\n<p>public static <T> boolean hasNulls(Pair<T> p){}</p>\n"}],"PostAsset":[{"_id":"source/_posts/elk-mac/kibana.png","slug":"kibana.png","post":"cj5tkg7mt0008t8dm8v9hfmwa","modified":1,"renderable":0},{"_id":"source/_posts/crawler4j-jsoup/crawler.png","slug":"crawler.png","post":"cj5tkg7mc0000t8dmx65ngvt0","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cj5tkg7mt0008t8dm8v9hfmwa","category_id":"cj5tkg7mo0004t8dmdspj4hj4","_id":"cj5tkg7mx000dt8dmg1pnkod0"},{"post_id":"cj5tkg7mc0000t8dmx65ngvt0","category_id":"cj5tkg7mo0004t8dmdspj4hj4","_id":"cj5tkg7n0000ht8dmxy157qgp"},{"post_id":"cj5tkg7mv0009t8dmg1kzham3","category_id":"cj5tkg7mo0004t8dmdspj4hj4","_id":"cj5tkg7n1000jt8dmhxpff95i"},{"post_id":"cj5tkg7mw000ct8dmln8yqb3k","category_id":"cj5tkg7mo0004t8dmdspj4hj4","_id":"cj5tkg7n3000mt8dm0fad3rwz"},{"post_id":"cj5tkg7mj0002t8dm054zqytj","category_id":"cj5tkg7mw000at8dmgltlfome","_id":"cj5tkg7n5000pt8dmqitnsn7j"},{"post_id":"cj5tkg7mx000et8dmuphdyppa","category_id":"cj5tkg7mo0004t8dmdspj4hj4","_id":"cj5tkg7n7000rt8dmg3k6zoav"},{"post_id":"cj5tkg7n0000it8dm2p124p7w","category_id":"cj5tkg7mo0004t8dmdspj4hj4","_id":"cj5tkg7n8000ut8dmx5cv2o7f"},{"post_id":"cj5tkg7mq0006t8dmiato63k6","category_id":"cj5tkg7mo0004t8dmdspj4hj4","_id":"cj5tkg7n8000xt8dmwaazfyw2"},{"post_id":"cj5tkg7n1000kt8dm1na87emb","category_id":"cj5tkg7n5000ot8dm224uctqr","_id":"cj5tkg7n80010t8dm2lyf1hco"},{"post_id":"cj5tkg7n3000nt8dmrrvzhl6g","category_id":"cj5tkg7n8000vt8dmg738tpxg","_id":"cj5tkg7na0014t8dmb1ma63bm"},{"post_id":"cj5tkg7n5000qt8dm55vzf7jm","category_id":"cj5tkg7n80011t8dmvriyagix","_id":"cj5tkg7nb0016t8dmbcmmxns7"}],"PostTag":[{"post_id":"cj5tkg7mc0000t8dmx65ngvt0","tag_id":"cj5tkg7mq0005t8dm8zekq4z0","_id":"cj5tkg7n7000tt8dm9taymoly"},{"post_id":"cj5tkg7mc0000t8dmx65ngvt0","tag_id":"cj5tkg7mw000bt8dmwspkiaem","_id":"cj5tkg7n8000wt8dmm5q4zqvm"},{"post_id":"cj5tkg7mc0000t8dmx65ngvt0","tag_id":"cj5tkg7my000gt8dmxqjoz4qp","_id":"cj5tkg7n8000zt8dmsq7tnom3"},{"post_id":"cj5tkg7mc0000t8dmx65ngvt0","tag_id":"cj5tkg7n3000lt8dmpfiy0mnz","_id":"cj5tkg7n80012t8dm4tn8hyqs"},{"post_id":"cj5tkg7mj0002t8dm054zqytj","tag_id":"cj5tkg7n7000st8dmk3tvnqz2","_id":"cj5tkg7nc0018t8dmrrchthnd"},{"post_id":"cj5tkg7mj0002t8dm054zqytj","tag_id":"cj5tkg7n8000yt8dmwcqufyh7","_id":"cj5tkg7nd0019t8dmb8m2gym0"},{"post_id":"cj5tkg7mj0002t8dm054zqytj","tag_id":"cj5tkg7n90013t8dmbczu0khz","_id":"cj5tkg7ne001bt8dm3kafzlsm"},{"post_id":"cj5tkg7mj0002t8dm054zqytj","tag_id":"cj5tkg7na0015t8dmeckrr549","_id":"cj5tkg7ne001ct8dmaxzu2hso"},{"post_id":"cj5tkg7mq0006t8dmiato63k6","tag_id":"cj5tkg7nc0017t8dmuq0buux9","_id":"cj5tkg7ng001ft8dmuir1eht0"},{"post_id":"cj5tkg7mq0006t8dmiato63k6","tag_id":"cj5tkg7nd001at8dmuadqjdd5","_id":"cj5tkg7ng001gt8dmoyzg965m"},{"post_id":"cj5tkg7mq0006t8dmiato63k6","tag_id":"cj5tkg7ne001dt8dmsocen6pj","_id":"cj5tkg7ng001it8dmngd2w79l"},{"post_id":"cj5tkg7mt0008t8dm8v9hfmwa","tag_id":"cj5tkg7nf001et8dm27yxdlxq","_id":"cj5tkg7nk001lt8dm2jbgtjts"},{"post_id":"cj5tkg7mt0008t8dm8v9hfmwa","tag_id":"cj5tkg7ng001ht8dmv92yix0g","_id":"cj5tkg7nl001mt8dmdq5ceh37"},{"post_id":"cj5tkg7mt0008t8dm8v9hfmwa","tag_id":"cj5tkg7nj001jt8dmrk3vad1d","_id":"cj5tkg7nl001ot8dm70i805ep"},{"post_id":"cj5tkg7mv0009t8dmg1kzham3","tag_id":"cj5tkg7nk001kt8dmjkyv6frd","_id":"cj5tkg7nn001st8dmn9cfrmk9"},{"post_id":"cj5tkg7mv0009t8dmg1kzham3","tag_id":"cj5tkg7nl001nt8dm7g83lz7i","_id":"cj5tkg7nn001tt8dmo4o5hm2w"},{"post_id":"cj5tkg7mv0009t8dmg1kzham3","tag_id":"cj5tkg7nm001pt8dmbo0k7w33","_id":"cj5tkg7no001vt8dm90d34exy"},{"post_id":"cj5tkg7mv0009t8dmg1kzham3","tag_id":"cj5tkg7ne001dt8dmsocen6pj","_id":"cj5tkg7no001wt8dmcwkabu4c"},{"post_id":"cj5tkg7mw000ct8dmln8yqb3k","tag_id":"cj5tkg7nn001rt8dmejsjb0xp","_id":"cj5tkg7np001zt8dm22hlpmb2"},{"post_id":"cj5tkg7mw000ct8dmln8yqb3k","tag_id":"cj5tkg7no001ut8dmh805f319","_id":"cj5tkg7np0020t8dmnzjqvu8s"},{"post_id":"cj5tkg7mw000ct8dmln8yqb3k","tag_id":"cj5tkg7no001xt8dmsi8sflf0","_id":"cj5tkg7np0022t8dmxlla2nm7"},{"post_id":"cj5tkg7mx000et8dmuphdyppa","tag_id":"cj5tkg7np001yt8dms676yitu","_id":"cj5tkg7nq0026t8dmyfx30mc7"},{"post_id":"cj5tkg7mx000et8dmuphdyppa","tag_id":"cj5tkg7np0021t8dmrmkx6ujg","_id":"cj5tkg7nq0027t8dmpupw770j"},{"post_id":"cj5tkg7mx000et8dmuphdyppa","tag_id":"cj5tkg7np0023t8dmdgl2w3ct","_id":"cj5tkg7nq0029t8dmyj4cf6fd"},{"post_id":"cj5tkg7mx000et8dmuphdyppa","tag_id":"cj5tkg7nq0024t8dmpll1sukd","_id":"cj5tkg7nq002at8dmhwcji75e"},{"post_id":"cj5tkg7n0000it8dm2p124p7w","tag_id":"cj5tkg7nq0025t8dmy4xwtmwr","_id":"cj5tkg7nr002et8dm9p1w0hvf"},{"post_id":"cj5tkg7n0000it8dm2p124p7w","tag_id":"cj5tkg7nq0028t8dm7ql72oqa","_id":"cj5tkg7nr002ft8dmjdy05lg5"},{"post_id":"cj5tkg7n0000it8dm2p124p7w","tag_id":"cj5tkg7nq002bt8dmgsp284oq","_id":"cj5tkg7ns002ht8dmcx1yjd7g"},{"post_id":"cj5tkg7n0000it8dm2p124p7w","tag_id":"cj5tkg7nq002ct8dmn6zwkhf1","_id":"cj5tkg7ns002it8dms3hzve9e"},{"post_id":"cj5tkg7n1000kt8dm1na87emb","tag_id":"cj5tkg7nr002dt8dmol5q2wz8","_id":"cj5tkg7ns002lt8dmklrct3vy"},{"post_id":"cj5tkg7n1000kt8dm1na87emb","tag_id":"cj5tkg7nq0025t8dmy4xwtmwr","_id":"cj5tkg7ns002mt8dm7nlqov6e"},{"post_id":"cj5tkg7n1000kt8dm1na87emb","tag_id":"cj5tkg7ns002jt8dmnf505g0j","_id":"cj5tkg7ns002ot8dms9ojsylf"},{"post_id":"cj5tkg7n3000nt8dmrrvzhl6g","tag_id":"cj5tkg7ns002kt8dm6rg4sx5k","_id":"cj5tkg7nt002rt8dmp4kyh90y"},{"post_id":"cj5tkg7n3000nt8dmrrvzhl6g","tag_id":"cj5tkg7ns002nt8dmplwid1xn","_id":"cj5tkg7nt002st8dmx9tntdrq"},{"post_id":"cj5tkg7n3000nt8dmrrvzhl6g","tag_id":"cj5tkg7ns002pt8dmk9ezimn2","_id":"cj5tkg7nt002ut8dm6ag6v395"},{"post_id":"cj5tkg7n5000qt8dm55vzf7jm","tag_id":"cj5tkg7nt002qt8dmipjsfz3v","_id":"cj5tkg7nt002wt8dmnnwy5zqd"},{"post_id":"cj5tkg7n5000qt8dm55vzf7jm","tag_id":"cj5tkg7nt002tt8dmlved7god","_id":"cj5tkg7nt002xt8dm0gg30ty3"},{"post_id":"cj5tkg7n5000qt8dm55vzf7jm","tag_id":"cj5tkg7nt002vt8dmy9468ssf","_id":"cj5tkg7nt002yt8dmzpvmvbhf"}],"Tag":[{"name":"Crawler4j","_id":"cj5tkg7mq0005t8dm8zekq4z0"},{"name":"Jsoup","_id":"cj5tkg7mw000bt8dmwspkiaem"},{"name":"JDBC","_id":"cj5tkg7my000gt8dmxqjoz4qp"},{"name":"爬虫","_id":"cj5tkg7n3000lt8dmpfiy0mnz"},{"name":"动态代理","_id":"cj5tkg7n7000st8dmk3tvnqz2"},{"name":"反射","_id":"cj5tkg7n8000yt8dmwcqufyh7"},{"name":"代理","_id":"cj5tkg7n90013t8dmbczu0khz"},{"name":"AOP","_id":"cj5tkg7na0015t8dmeckrr549"},{"name":"github","_id":"cj5tkg7nc0017t8dmuq0buux9"},{"name":"github.io","_id":"cj5tkg7nd001at8dmuadqjdd5"},{"name":"hexo","_id":"cj5tkg7ne001dt8dmsocen6pj"},{"name":"elasticsearch","_id":"cj5tkg7nf001et8dm27yxdlxq"},{"name":"kabana","_id":"cj5tkg7ng001ht8dmv92yix0g"},{"name":"logstash","_id":"cj5tkg7nj001jt8dmrk3vad1d"},{"name":"图片引用","_id":"cj5tkg7nk001kt8dmjkyv6frd"},{"name":"tags","_id":"cj5tkg7nl001nt8dm7g83lz7i"},{"name":"plugin","_id":"cj5tkg7nm001pt8dmbo0k7w33"},{"name":"Hbase","_id":"cj5tkg7nn001rt8dmejsjb0xp"},{"name":"Shell","_id":"cj5tkg7no001ut8dmh805f319"},{"name":"常用","_id":"cj5tkg7no001xt8dmsi8sflf0"},{"name":"线上","_id":"cj5tkg7np001yt8dms676yitu"},{"name":"日志","_id":"cj5tkg7np0021t8dmrmkx6ujg"},{"name":"log","_id":"cj5tkg7np0023t8dmdgl2w3ct"},{"name":"问题排查","_id":"cj5tkg7nq0024t8dmpll1sukd"},{"name":"redis","_id":"cj5tkg7nq0025t8dmy4xwtmwr"},{"name":"sed","_id":"cj5tkg7nq0028t8dm7ql72oqa"},{"name":"导入","_id":"cj5tkg7nq002bt8dmgsp284oq"},{"name":"导出","_id":"cj5tkg7nq002ct8dmn6zwkhf1"},{"name":"分布式数据一致性","_id":"cj5tkg7nr002dt8dmol5q2wz8"},{"name":"DB","_id":"cj5tkg7ns002jt8dmnf505g0j"},{"name":"JDK源码","_id":"cj5tkg7ns002kt8dm6rg4sx5k"},{"name":"Lock","_id":"cj5tkg7ns002nt8dmplwid1xn"},{"name":"ReentrantLock","_id":"cj5tkg7ns002pt8dmk9ezimn2"},{"name":"java","_id":"cj5tkg7nt002qt8dmipjsfz3v"},{"name":"generic","_id":"cj5tkg7nt002tt8dmlved7god"},{"name":"泛型","_id":"cj5tkg7nt002vt8dmy9468ssf"}]}}