package com.xiaomi.miui.cache.rediscluster;

import com.xiaomi.miui.cache.impl.AbstractCache;
import org.junit.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import redis.clients.jedis.*;

import java.io.InputStream;
import java.util.HashSet;

import java.util.Properties;
import java.util.Set;

/**
 * @author edwin
 * @since 02 十二月 2015
 */
public class DefaultRedisClusterCache extends AbstractCache implements RedisClusterCache{

    private static Logger logger = LoggerFactory.getLogger(DefaultRedisClusterCache.class);

    private RedisCluster redisCluster;

    private Properties properties = new Properties();

    private volatile boolean initialized = false;

    public DefaultRedisClusterCache() {

    }

    @Override
    public void init() throws Exception {
        InputStream in = getClass().getClassLoader().getResourceAsStream("redis.cluster.properties");
        properties.load(in);
        String line = properties.getProperty("redis.cluster");
        if(logger.isInfoEnabled()) logger.info("redis.cluster:{}", line);
        Assert.assertNotNull(line);
        Set<HostAndPort> nodes = new HashSet<HostAndPort>();
        for(String pair : line.split(",")){
            String[] s = pair.split(":");
            nodes.add(new HostAndPort(s[0], Integer.valueOf(s[1])));
        }
        JedisPoolConfig poolConfig = new JedisPoolConfig();
        poolConfig.setMaxIdle(50);
        poolConfig.setMinIdle(10);
        poolConfig.setMaxTotal(512);
        if(logger.isInfoEnabled()) logger.info("poolConfig minIdle:{}, maxIdle:{}, maxTotal:{}", poolConfig.getMinIdle(), poolConfig.getMaxIdle(), poolConfig.getMaxTotal());
        redisCluster = new RedisCluster(nodes, 500, 5, poolConfig);
        initialized = true;
    }

    @Override
    public void destroy() throws Exception {
        redisCluster.close();
    }

    @Override
    public RedisCluster getRedisCluster() {
        if(!initialized) throw new IllegalStateException("cluster cache doesn't initialized");
        return redisCluster;
    }

    @Override
    public <K, V> V get(K key, RedisClusterCallable<V> callable) throws Exception {
        if(!initialized) throw new IllegalStateException("cluster cache doesn't initialized");
        return callable.call(redisCluster);
    }
}
